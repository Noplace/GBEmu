; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\audio\output\directsound.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,1000000000> >::value
PUBLIC	?value@?$_GcdX@$00$0DLJKMKAA@@std@@2_JB		; std::_GcdX<1,1000000000>::value
PUBLIC	?value@?$_Gcd@$00$0DLJKMKAA@@std@@2_JB		; std::_Gcd<1,1000000000>::value
PUBLIC	?num@?$ratio@$00$0DLJKMKAA@@std@@2_JB		; std::ratio<1,1000000000>::num
PUBLIC	?den@?$ratio@$00$0DLJKMKAA@@std@@2_JB		; std::ratio<1,1000000000>::den
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1,1> >::_G1
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1,1> >::_G2
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<1000000000,1> >::_G1
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0JIJGIA@@std@@2_JB	; std::_GcdX<1000000000,10000000>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?value@?$_Gcd@$0DLJKMKAA@$0JIJGIA@@std@@2_JB	; std::_Gcd<1000000000,10000000>::value
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<1000000000,1> >::_G2
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?value@?$_Always_false@_J@std@@2_NB		; std::_Always_false<__int64>::value
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?value@?$_GcdX@$0GE@$00@std@@2_JB		; std::_GcdX<100,1>::value
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?value@?$_Gcd@$0GE@$00@std@@2_JB		; std::_Gcd<100,1>::value
PUBLIC	?num@?$ratio@$0GE@$00@std@@2_JB			; std::ratio<100,1>::num
PUBLIC	?den@?$ratio@$0GE@$00@std@@2_JB			; std::ratio<100,1>::den
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1,1> >::_G1
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1,1> >::_G2
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000000000,1> >::_G1
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?value@?$_GcdX@$0DOI@$0A@@std@@2_JB		; std::_GcdX<1000,0>::value
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0DOI@@std@@2_JB	; std::_GcdX<1000000000,1000>::value
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?value@?$_Gcd@$0DLJKMKAA@$0DOI@@std@@2_JB	; std::_Gcd<1000000000,1000>::value
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000000000,1> >::_G2
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$00@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,1> >::value
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$_Abs@$0PECEA@@std@@2_JB		; std::_Abs<1000000>::value
PUBLIC	?value@?$_GcdX@$0PECEA@$00@std@@2_JB		; std::_GcdX<1000000,1>::value
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?value@?$_Gcd@$0PECEA@$00@std@@2_JB		; std::_Gcd<1000000,1>::value
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?num@?$ratio@$0PECEA@$00@std@@2_JB		; std::ratio<1000000,1>::num
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?den@?$ratio@$0PECEA@$00@std@@2_JB		; std::ratio<1000000,1>::den
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?_Gx@?$_Lcm@$0DOI@$0DOI@@std@@2_JB		; std::_Lcm<1000,1000>::_Gx
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?value@?$_Lcm@$0DOI@$0DOI@@std@@2_JB		; std::_Lcm<1000,1000>::value
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1000000000,1> >::_G1
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0A@@std@@2_JB	; std::_GcdX<1000000000,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<1000000000,1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?value@?$_Gcd@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<1000000000,1000000000>::value
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1000000000,1> >::_G2
PUBLIC	?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@@chrono@std@@2_NB ; std::chrono::_Is_duration<std::chrono::duration<__int64,std::ratio<1,1> > >::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1000000000,1> >::_G1
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$00@std@@2_JB		; std::_GcdX<1000000000,1>::value
PUBLIC	?value@?$_Gcd@$0DLJKMKAA@$00@std@@2_JB		; std::_Gcd<1000000000,1>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1000000000,1> >::_G2
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?num@?$ratio@$0DLJKMKAA@$00@std@@2_JB		; std::ratio<1000000000,1>::num
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?den@?$ratio@$0DLJKMKAA@$00@std@@2_JB		; std::ratio<1000000000,1>::den
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	_ConcRT_ProviderGuid
PUBLIC	_ConcRTEventGuid
PUBLIC	_SchedulerEventGuid
PUBLIC	_ScheduleGroupEventGuid
PUBLIC	_ContextEventGuid
PUBLIC	_ChoreEventGuid
PUBLIC	_VirtualProcessorEventGuid
PUBLIC	_LockEventGuid
PUBLIC	_ResourceManagerEventGuid
PUBLIC	_PPLParallelInvokeEventGuid
PUBLIC	_PPLParallelForEventGuid
PUBLIC	_PPLParallelForeachEventGuid
PUBLIC	_AgentEventGuid
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000,1> >::_G1
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?value@?$_GcdX@$0DOI@$0DOI@@std@@2_JB		; std::_GcdX<1000,1000>::value
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Gcd@$0DOI@$0DOI@@std@@2_JB		; std::_Gcd<1000,1000>::value
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000,1> >::_G2
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0DOI@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,1000> >::value
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?value@?$_Abs@$0DOI@@std@@2_JB			; std::_Abs<1000>::value
PUBLIC	?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@@chrono@std@@2_NB ; std::chrono::_Is_duration<std::chrono::duration<__int64,std::ratio<1,1000000000> > >::value
PUBLIC	?value@?$_GcdX@$0DOI@$00@std@@2_JB		; std::_GcdX<1000,1>::value
PUBLIC	?value@?$_GcdX@$00$0DOI@@std@@2_JB		; std::_GcdX<1,1000>::value
PUBLIC	?value@?$_Gcd@$00$0DOI@@std@@2_JB		; std::_Gcd<1,1000>::value
PUBLIC	?num@?$ratio@$00$0DOI@@std@@2_JB		; std::ratio<1,1000>::num
PUBLIC	?den@?$ratio@$00$0DOI@@std@@2_JB		; std::ratio<1,1000>::den
;	COMDAT ?den@?$ratio@$00$0DOI@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0DOI@@std@@2_JB DQ 00000000000003e8H	; std::ratio<1,1000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0DOI@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0DOI@@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0DOI@@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0DOI@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DOI@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DOI@$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_duration<std::chrono::duration<__int64,std::ratio<1,1000000000> > >::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DOI@@std@@2_JB DQ 00000000000003e8H	; std::_Abs<1000>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0DOI@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0DOI@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,1000> >::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB DQ 00000000000003e8H ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0DOI@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0DOI@$0DOI@@std@@2_JB DQ 00000000000003e8H ; std::_Gcd<1000,1000>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DOI@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DOI@$0DOI@@std@@2_JB DQ 00000000000003e8H ; std::_GcdX<1000,1000>::value
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DOI@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000,1> >::_G1
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT _AgentEventGuid
CONST	SEGMENT
_AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT _PPLParallelForeachEventGuid
CONST	SEGMENT
_PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT _PPLParallelForEventGuid
CONST	SEGMENT
_PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT _PPLParallelInvokeEventGuid
CONST	SEGMENT
_PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT _ResourceManagerEventGuid
CONST	SEGMENT
_ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT _LockEventGuid
CONST	SEGMENT
_LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT _VirtualProcessorEventGuid
CONST	SEGMENT
_VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT _ChoreEventGuid
CONST	SEGMENT
_ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT _ContextEventGuid
CONST	SEGMENT
_ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT _ScheduleGroupEventGuid
CONST	SEGMENT
_ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT _SchedulerEventGuid
CONST	SEGMENT
_SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT _ConcRTEventGuid
CONST	SEGMENT
_ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT _ConcRT_ProviderGuid
CONST	SEGMENT
_ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?den@?$ratio@$0DLJKMKAA@$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$0DLJKMKAA@$00@std@@2_JB DQ 0000000000000001H ; std::ratio<1000000000,1>::den
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?num@?$ratio@$0DLJKMKAA@$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$0DLJKMKAA@$00@std@@2_JB DQ 000000003b9aca00H ; std::ratio<1000000000,1>::num
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
CONST	SEGMENT
$SG152244 DB	'ds stop', 0aH, 00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1000000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0DLJKMKAA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0DLJKMKAA@$00@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1000000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1000000000,1>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1000000000,1> >::_G1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_duration@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_duration<std::chrono::duration<__int64,std::ratio<1,1> > >::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 000000003b9aca00H ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1000000000,1> >::_G2
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Gcd<1000000000,1000000000>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_GcdX<1000000000,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0A@@std@@2_JB DQ 000000003b9aca00H ; std::_GcdX<1000000000,0>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1000000000,1> >::_G1
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?value@?$_Lcm@$0DOI@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_Lcm@$0DOI@$0DOI@@std@@2_JB DQ 00000000000003e8H ; std::_Lcm<1000,1000>::value
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?_Gx@?$_Lcm@$0DOI@$0DOI@@std@@2_JB
CONST	SEGMENT
?_Gx@?$_Lcm@$0DOI@$0DOI@@std@@2_JB DQ 00000000000003e8H	; std::_Lcm<1000,1000>::_Gx
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB DD 08H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?den@?$ratio@$0PECEA@$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$0PECEA@$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1000000,1>::den
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?num@?$ratio@$0PECEA@$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$0PECEA@$00@std@@2_JB DQ 00000000000f4240H	; std::ratio<1000000,1>::num
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB DD 00H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0PECEA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0PECEA@$00@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1000000,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0PECEA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0PECEA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0PECEA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0PECEA@@std@@2_JB DQ 00000000000f4240H	; std::_Abs<1000000>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$00@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$00@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,1> >::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 00000000000003e8H ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000000000,1> >::_G2
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0DLJKMKAA@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0DLJKMKAA@$0DOI@@std@@2_JB DQ 00000000000003e8H ; std::_Gcd<1000000000,1000>::value
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0DOI@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0DOI@@std@@2_JB DQ 00000000000003e8H ; std::_GcdX<1000000000,1000>::value
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DOI@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DOI@$0A@@std@@2_JB DQ 00000000000003e8H ; std::_GcdX<1000,0>::value
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DOI@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1000>,std::ratio<1000000000,1> >::_G1
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1,1> >::_G2
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$00@std@@U12@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1>,std::ratio<1,1> >::_G1
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?den@?$ratio@$0GE@$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$0GE@$00@std@@2_JB DQ 0000000000000001H	; std::ratio<100,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$0GE@$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$0GE@$00@std@@2_JB DQ 0000000000000064H	; std::ratio<100,1>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<100,1>::value
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<100,1>::value
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?value@?$_Always_false@_J@std@@2_NB
CONST	SEGMENT
?value@?$_Always_false@_J@std@@2_NB DB 00H		; std::_Always_false<__int64>::value
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<1000000000,1> >::_G2
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0DLJKMKAA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0DLJKMKAA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<1000000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<1000000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0DLJKMKAA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<1000000000,1> >::_G1
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1,1> >::_G2
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0DLJKMKAA@@std@@U?$ratio@$00$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,1000000000>,std::ratio<1,1> >::_G1
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::ratio<1,1000000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0DLJKMKAA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,1000000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0DLJKMKAA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0DLJKMKAA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,1000000000> >::value
CONST	ENDS
PUBLIC	?_Atomic_load_4@std@@YAKPCKW4memory_order@1@@Z	; std::_Atomic_load_4
PUBLIC	?_Store_relaxed_4@std@@YAXPCKK@Z		; std::_Store_relaxed_4
PUBLIC	?_Store_release_4@std@@YAXPCKK@Z		; std::_Store_release_4
PUBLIC	?_Store_seq_cst_4@std@@YAXPCKK@Z		; std::_Store_seq_cst_4
PUBLIC	?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z ; std::_Atomic_store_4
PUBLIC	?_Load_relaxed_4@std@@YAKPCK@Z			; std::_Load_relaxed_4
PUBLIC	?_Load_acquire_4@std@@YAKPCK@Z			; std::_Load_acquire_4
PUBLIC	?_Load_seq_cst_4@std@@YAKPCK@Z			; std::_Load_seq_cst_4
PUBLIC	??4atomic_int@std@@QAEHH@Z			; std::atomic_int::operator=
PUBLIC	??Batomic_int@std@@QBEHXZ			; std::atomic_int::operator int
PUBLIC	??0?$atomic@H@std@@QAE@XZ			; std::atomic<int>::atomic<int>
PUBLIC	??4?$atomic@H@std@@QAEHH@Z			; std::atomic<int>::operator=
PUBLIC	?atomic_store_explicit@std@@YAXPAUatomic_int@1@HW4memory_order@1@@Z ; std::atomic_store_explicit
PUBLIC	?atomic_store@std@@YAXPAUatomic_int@1@H@Z	; std::atomic_store
PUBLIC	?atomic_load_explicit@std@@YAHPBUatomic_int@1@W4memory_order@1@@Z ; std::atomic_load_explicit
PUBLIC	?atomic_load@std@@YAHPBUatomic_int@1@@Z		; std::atomic_load
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ; std::chrono::system_clock::now
PUBLIC	?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
PUBLIC	??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
PUBLIC	?time_since_epoch@?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_since_epoch
PUBLIC	??$?0_J@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64>
PUBLIC	?sleep_until@this_thread@std@@YAXPBUxtime@@@Z	; std::this_thread::sleep_until
PUBLIC	??0Interface@output@audio@@QAE@XZ		; audio::output::Interface::Interface
PUBLIC	??0DirectSound@output@audio@@QAE@XZ		; audio::output::DirectSound::DirectSound
PUBLIC	??1DirectSound@output@audio@@QAE@XZ		; audio::output::DirectSound::~DirectSound
PUBLIC	?Initialize@DirectSound@output@audio@@UAEHIEE@Z	; audio::output::DirectSound::Initialize
PUBLIC	?Deinitialize@DirectSound@output@audio@@UAEHXZ	; audio::output::DirectSound::Deinitialize
PUBLIC	?Play@DirectSound@output@audio@@UAEHXZ		; audio::output::DirectSound::Play
PUBLIC	?Stop@DirectSound@output@audio@@UAEHXZ		; audio::output::DirectSound::Stop
PUBLIC	?GetBytesBuffered@DirectSound@output@audio@@UAEIXZ ; audio::output::DirectSound::GetBytesBuffered
PUBLIC	?GetCursors@DirectSound@output@audio@@UAEXAAI0@Z ; audio::output::DirectSound::GetCursors
PUBLIC	?Write@DirectSound@output@audio@@UAEHPAXI@Z	; audio::output::DirectSound::Write
PUBLIC	?BeginWrite@DirectSound@output@audio@@UAEHAAI@Z	; audio::output::DirectSound::BeginWrite
PUBLIC	?EndWrite@DirectSound@output@audio@@UAEHPAX@Z	; audio::output::DirectSound::EndWrite
PUBLIC	?Sync@DirectSound@output@audio@@UAEXXZ		; audio::output::DirectSound::Sync
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
PUBLIC	?zero@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@SA?AV123@XZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::zero
PUBLIC	??$?0H@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABHPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int>
PUBLIC	??$sleep_for@_JU?$ratio@$00$0DOI@@std@@@this_thread@std@@YAXABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@1@@Z ; std::this_thread::sleep_for<__int64,std::ratio<1,1000> >
PUBLIC	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>
PUBLIC	??$SafeRelease@UIDirectSound8@@@@YAXPAPAUIDirectSound8@@@Z ; SafeRelease<IDirectSound8>
PUBLIC	??$_To_xtime@_JU?$ratio@$00$0DOI@@std@@@std@@YA?AUxtime@@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@0@@Z ; std::_To_xtime<__int64,std::ratio<1,1000> >
PUBLIC	??$?N_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ; std::chrono::operator<=<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
PUBLIC	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
PUBLIC	??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=
PUBLIC	??Z?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator-=
PUBLIC	??$?0_JU?$ratio@$00$0JIJGIA@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,10000000> >
PUBLIC	??$?0_JU?$ratio@$00$0DOI@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000> >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >
PUBLIC	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
PUBLIC	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
PUBLIC	??$?0_JU?$ratio@$00$00@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$00@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1> >
PUBLIC	?zero@?$duration_values@_J@chrono@std@@SA_JXZ	; std::chrono::duration_values<__int64>::zero
PUBLIC	??$?0_J@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><__int64>
PUBLIC	??$?M_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ; std::chrono::operator<<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0JIJGIA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,10000000> >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >
PUBLIC	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$00@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$00@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1> >
PUBLIC	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
PUBLIC	??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; `string'
PUBLIC	??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@		; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@NMHCEFB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAl?$AAo?$AAa?$AAd?$AA_?$AA4?$AA?$AA@ ; `string'
PUBLIC	??_7Interface@output@audio@@6B@			; audio::output::Interface::`vftable'
PUBLIC	??_7DirectSound@output@audio@@6B@		; audio::output::DirectSound::`vftable'
PUBLIC	??_R4Interface@output@audio@@6B@		; audio::output::Interface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVInterface@output@audio@@@8		; audio::output::Interface `RTTI Type Descriptor'
PUBLIC	??_R3Interface@output@audio@@8			; audio::output::Interface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Interface@output@audio@@8			; audio::output::Interface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Interface@output@audio@@8		; audio::output::Interface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DirectSound@output@audio@@6B@		; audio::output::DirectSound::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDirectSound@output@audio@@@8		; audio::output::DirectSound `RTTI Type Descriptor'
PUBLIC	??_R3DirectSound@output@audio@@8		; audio::output::DirectSound::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DirectSound@output@audio@@8		; audio::output::DirectSound::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DirectSound@output@audio@@8	; audio::output::DirectSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@46feb000
PUBLIC	__real@47000000
PUBLIC	__real@c6feb000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	_memset:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	_DirectSoundCreate8@12:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	__imp__xtime_get:PROC
EXTRN	__imp___Xtime_diff_to_millis2:PROC
EXTRN	__imp___Xtime_get_ticks:PROC
EXTRN	__imp_?wait@Concurrency@@YAXI@Z:PROC
EXTRN	__imp_?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ:PROC
EXTRN	__imp___Thrd_sleep:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_UninitUse:PROC
EXTRN	__alldiv:PROC
EXTRN	__allmul:PROC
EXTRN	_DSDEVID_DefaultPlayback:BYTE
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@c6feb000
CONST	SEGMENT
__real@c6feb000 DD 0c6feb000r			; -32600
CONST	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46feb000
CONST	SEGMENT
__real@46feb000 DD 046feb000r			; 32600
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DirectSound@output@audio@@8 DD FLAT:??_R0?AVDirectSound@output@audio@@@8 ; audio::output::DirectSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DirectSound@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R2DirectSound@output@audio@@8 DD FLAT:??_R1A@?0A@EA@DirectSound@output@audio@@8 ; audio::output::DirectSound::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R3DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R3DirectSound@output@audio@@8 DD 00H			; audio::output::DirectSound::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DirectSound@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDirectSound@output@audio@@@8
_DATA	SEGMENT
??_R0?AVDirectSound@output@audio@@@8 DD FLAT:??_7type_info@@6B@ ; audio::output::DirectSound `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDirectSound@output@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DirectSound@output@audio@@6B@
rdata$r	SEGMENT
??_R4DirectSound@output@audio@@6B@ DD 00H		; audio::output::DirectSound::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDirectSound@output@audio@@@8
	DD	FLAT:??_R3DirectSound@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Interface@output@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Interface@output@audio@@8 DD FLAT:??_R0?AVInterface@output@audio@@@8 ; audio::output::Interface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2Interface@output@audio@@8
rdata$r	SEGMENT
??_R2Interface@output@audio@@8 DD FLAT:??_R1A@?0A@EA@Interface@output@audio@@8 ; audio::output::Interface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Interface@output@audio@@8
rdata$r	SEGMENT
??_R3Interface@output@audio@@8 DD 00H			; audio::output::Interface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVInterface@output@audio@@@8
_DATA	SEGMENT
??_R0?AVInterface@output@audio@@@8 DD FLAT:??_7type_info@@6B@ ; audio::output::Interface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInterface@output@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Interface@output@audio@@6B@
rdata$r	SEGMENT
??_R4Interface@output@audio@@6B@ DD 00H			; audio::output::Interface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInterface@output@audio@@@8
	DD	FLAT:??_R3Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_7DirectSound@output@audio@@6B@
CONST	SEGMENT
??_7DirectSound@output@audio@@6B@ DD FLAT:??_R4DirectSound@output@audio@@6B@ ; audio::output::DirectSound::`vftable'
	DD	FLAT:?Initialize@DirectSound@output@audio@@UAEHIEE@Z
	DD	FLAT:?Deinitialize@DirectSound@output@audio@@UAEHXZ
	DD	FLAT:?Play@DirectSound@output@audio@@UAEHXZ
	DD	FLAT:?Stop@DirectSound@output@audio@@UAEHXZ
	DD	FLAT:?GetBytesBuffered@DirectSound@output@audio@@UAEIXZ
	DD	FLAT:?GetCursors@DirectSound@output@audio@@UAEXAAI0@Z
	DD	FLAT:?Write@DirectSound@output@audio@@UAEHPAXI@Z
	DD	FLAT:?BeginWrite@DirectSound@output@audio@@UAEHAAI@Z
	DD	FLAT:?EndWrite@DirectSound@output@audio@@UAEHPAX@Z
	DD	FLAT:?Sync@DirectSound@output@audio@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7Interface@output@audio@@6B@
CONST	SEGMENT
??_7Interface@output@audio@@6B@ DD FLAT:??_R4Interface@output@audio@@6B@ ; audio::output::Interface::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_1CI@NMHCEFB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAl?$AAo?$AAa?$AAd?$AA_?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@NMHCEFB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAl?$AAo?$AAa?$AAd?$AA_?$AA4?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	't', 00H, 'o', 00H, 'm', 00H, 'i', 00H, 'c', 00H, '_', 00H, 'l'
	DB	00H, 'o', 00H, 'a', 00H, 'd', 00H, '_', 00H, '4', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	't', 00H, 'o', 00H, 'm', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '_', 00H, '4', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'A', 00H
	DB	'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, '"', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
CONST	SEGMENT
??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ DB 'Standa'
	DB	'rd C++ Libraries Invalid Argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ DB 'I'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y'
	DB	00H, '_', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '1', 00H, '.', 00H, '0', 00H, '\', 00H, 'V'
	DB	00H, 'C', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'm', 00H, 'i', 00H, 'c', 00H, '.', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 106  : 		static_assert(_Is_ratio<_Period>::value,
; 107  : 			"period not an instance of std::ratio");
; 108  : 		static_assert(0 < _Period::num,
; 109  : 			"duration negative or zero");
; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$00@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$00@std@@@01@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
$T3 = -16						; size = 8
$T4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$00@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$00@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1> >, COMDAT

; 535  : 	{	// convert duration to another duration

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 536  : 	typedef typename ratio_divide<_Period, typename _To::period>::type _CF;
; 537  : 	typedef typename common_type<
; 538  : 		typename common_type<typename _To::rep, _Rep>::type,
; 539  : 			intmax_t>::type _CR;
; 540  : 	if (_CF::num == 1 && _CF::den == 1)

	xor	eax, eax
	je	SHORT $LN6@duration_c

; 541  : 		return (_To(static_cast<typename _To::rep>(_Dur.count())));

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@duration_c
	jmp	$LN7@duration_c
$LN6@duration_c:

; 542  : 	else if (_CF::num != 1 && _CF::den == 1)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@duration_c

; 543  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c
	jmp	SHORT $LN7@duration_c
$LN4@duration_c:

; 544  : 			static_cast<_CR>(_Dur.count())) * static_cast<_CR>(_CF::num)));
; 545  : 	else if (_CF::num == 1 && _CF::den != 1)

	xor	ecx, ecx
	je	SHORT $LN2@duration_c

; 546  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	push	0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c

; 547  : 			static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den))));
; 548  : 	else

	jmp	SHORT $LN7@duration_c
$LN2@duration_c:

; 549  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN7@duration_c:

; 550  : 			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
; 551  : 			/ static_cast<_CR>(_CF::den))));
; 552  : 	}

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$00@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$00@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
$T3 = -16						; size = 8
$T4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >, COMDAT

; 535  : 	{	// convert duration to another duration

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 536  : 	typedef typename ratio_divide<_Period, typename _To::period>::type _CF;
; 537  : 	typedef typename common_type<
; 538  : 		typename common_type<typename _To::rep, _Rep>::type,
; 539  : 			intmax_t>::type _CR;
; 540  : 	if (_CF::num == 1 && _CF::den == 1)

	xor	eax, eax
	je	SHORT $LN6@duration_c

; 541  : 		return (_To(static_cast<typename _To::rep>(_Dur.count())));

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@duration_c
	jmp	$LN7@duration_c
$LN6@duration_c:

; 542  : 	else if (_CF::num != 1 && _CF::den == 1)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@duration_c

; 543  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	push	0
	push	1000000					; 000f4240H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c
	jmp	SHORT $LN7@duration_c
$LN4@duration_c:

; 544  : 			static_cast<_CR>(_Dur.count())) * static_cast<_CR>(_CF::num)));
; 545  : 	else if (_CF::num == 1 && _CF::den != 1)

	xor	ecx, ecx
	je	SHORT $LN2@duration_c

; 546  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	push	0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c

; 547  : 			static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den))));
; 548  : 	else

	jmp	SHORT $LN7@duration_c
$LN2@duration_c:

; 549  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	push	0
	push	1000000					; 000f4240H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN7@duration_c:

; 550  : 			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
; 551  : 			/ static_cast<_CR>(_CF::den))));
; 552  : 	}

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0JIJGIA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@01@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
$T3 = -16						; size = 8
$T4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0JIJGIA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,10000000> >, COMDAT

; 535  : 	{	// convert duration to another duration

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 536  : 	typedef typename ratio_divide<_Period, typename _To::period>::type _CF;
; 537  : 	typedef typename common_type<
; 538  : 		typename common_type<typename _To::rep, _Rep>::type,
; 539  : 			intmax_t>::type _CR;
; 540  : 	if (_CF::num == 1 && _CF::den == 1)

	xor	eax, eax
	je	SHORT $LN6@duration_c

; 541  : 		return (_To(static_cast<typename _To::rep>(_Dur.count())));

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@duration_c
	jmp	$LN7@duration_c
$LN6@duration_c:

; 542  : 	else if (_CF::num != 1 && _CF::den == 1)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN4@duration_c

; 543  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
	push	0
	push	100					; 00000064H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c
	jmp	SHORT $LN7@duration_c
$LN4@duration_c:

; 544  : 			static_cast<_CR>(_Dur.count())) * static_cast<_CR>(_CF::num)));
; 545  : 	else if (_CF::num == 1 && _CF::den != 1)

	xor	ecx, ecx
	je	SHORT $LN2@duration_c

; 546  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	push	0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c

; 547  : 			static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den))));
; 548  : 	else

	jmp	SHORT $LN7@duration_c
$LN2@duration_c:

; 549  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
	push	0
	push	100					; 00000064H
	push	edx
	push	eax
	call	__allmul
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN7@duration_c:

; 550  : 			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
; 551  : 			/ static_cast<_CR>(_CF::den))));
; 552  : 	}

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0JIJGIA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,10000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?M_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z
_TEXT	SEGMENT
tv71 = -36						; size = 4
tv94 = -32						; size = 8
tv91 = -24						; size = 8
$T1 = -16						; size = 8
$T2 = -8						; size = 8
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?M_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z PROC ; std::chrono::operator<<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >, COMDAT

; 488  : 	{	// test if duration < duration

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 489  : 	typedef typename common_type<
; 490  : 		duration<_Rep1, _Period1>,
; 491  : 		duration<_Rep2, _Period2> >::type _CT;
; 492  : 	return (_CT(_Left).count() < _CT(_Right).count());

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR $T2[ebp+4], edx
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	DWORD PTR $T1[ebp+4], edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	mov	esi, eax
	mov	edi, edx
	lea	ecx, DWORD PTR $T1[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
	mov	DWORD PTR tv91[ebp], esi
	mov	DWORD PTR tv91[ebp+4], edi
	mov	DWORD PTR tv94[ebp], eax
	mov	DWORD PTR tv94[ebp+4], edx
	mov	eax, DWORD PTR tv91[ebp+4]
	cmp	eax, DWORD PTR tv94[ebp+4]
	jg	SHORT $LN3@operator
	jl	SHORT $LN5@operator
	mov	ecx, DWORD PTR tv91[ebp]
	cmp	ecx, DWORD PTR tv94[ebp]
	jae	SHORT $LN3@operator
$LN5@operator:
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv71[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv71[ebp]

; 493  : 	}

	pop	edi
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?M_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ENDP ; std::chrono::operator<<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_J@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@AB_JPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_J@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@AB_JPAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><__int64>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 106  : 		static_assert(_Is_ratio<_Period>::value,
; 107  : 			"period not an instance of std::ratio");
; 108  : 		static_assert(0 < _Period::num,
; 109  : 			"duration negative or zero");
; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_J@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?zero@?$duration_values@_J@chrono@std@@SA_JXZ
_TEXT	SEGMENT
?zero@?$duration_values@_J@chrono@std@@SA_JXZ PROC	; std::chrono::duration_values<__int64>::zero, COMDAT

; 33   : 		{	// get zero value

	push	ebp
	mov	ebp, esp

; 34   : 		return (_Rep(0));

	xor	eax, eax
	xor	edx, edx

; 35   : 		}

	pop	ebp
	ret	0
?zero@?$duration_values@_J@chrono@std@@SA_JXZ ENDP	; std::chrono::duration_values<__int64>::zero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_JU?$ratio@$00$00@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$00@std@@@12@PAPAX@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Dur$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_JU?$ratio@$00$00@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$00@std@@@12@PAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1> >, COMDAT
; _this$ = ecx

; 120  : 		{	// construct from a duration

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Dur$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$00@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$00@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 121  : 		typedef typename ratio_divide<_Period2, _Period>::type _Checked_type;
; 122  : 
; 123  : 		static_assert(_Is_ratio<_Period>::value,
; 124  : 			"period not an instance of std::ratio");
; 125  : 		static_assert(0 < _Period::num,
; 126  : 			"duration negative or zero");
; 127  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_JU?$ratio@$00$00@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$00@std@@@12@PAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 106  : 		static_assert(_Is_ratio<_Period>::value,
; 107  : 			"period not an instance of std::ratio");
; 108  : 		static_assert(0 < _Period::num,
; 109  : 			"duration negative or zero");
; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1> >::count, COMDAT
; _this$ = ecx

; 130  : 		{	// get stored rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (_MyRep);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$duration_cast@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 8
$T2 = -24						; size = 8
$T3 = -16						; size = 8
$T4 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
__Dur$ = 12						; size = 4
??$duration_cast@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z PROC ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >, COMDAT

; 535  : 	{	// convert duration to another duration

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 536  : 	typedef typename ratio_divide<_Period, typename _To::period>::type _CF;
; 537  : 	typedef typename common_type<
; 538  : 		typename common_type<typename _To::rep, _Rep>::type,
; 539  : 			intmax_t>::type _CR;
; 540  : 	if (_CF::num == 1 && _CF::den == 1)

	xor	eax, eax
	je	SHORT $LN6@duration_c

; 541  : 		return (_To(static_cast<typename _To::rep>(_Dur.count())));

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR $T4[ebp+4], edx
	push	0
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@duration_c
	jmp	$LN7@duration_c
$LN6@duration_c:

; 542  : 	else if (_CF::num != 1 && _CF::den == 1)

	xor	edx, edx
	je	SHORT $LN4@duration_c

; 543  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR $T3[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c
	jmp	SHORT $LN7@duration_c
$LN4@duration_c:

; 544  : 			static_cast<_CR>(_Dur.count())) * static_cast<_CR>(_CF::num)));
; 545  : 	else if (_CF::num == 1 && _CF::den != 1)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN2@duration_c

; 546  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__alldiv
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR $T2[ebp+4], edx
	push	0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@duration_c

; 547  : 			static_cast<_CR>(_Dur.count()) / static_cast<_CR>(_CF::den))));
; 548  : 	else

	jmp	SHORT $LN7@duration_c
$LN2@duration_c:

; 549  : 		return (_To(static_cast<typename _To::rep>(

	mov	ecx, DWORD PTR __Dur$[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	push	0
	push	1000000000				; 3b9aca00H
	push	edx
	push	eax
	call	__alldiv
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN7@duration_c:

; 550  : 			static_cast<_CR>(_Dur.count()) * static_cast<_CR>(_CF::num)
; 551  : 			/ static_cast<_CR>(_CF::den))));
; 552  : 	}

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$duration_cast@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ENDP ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_JU?$ratio@$00$0DOI@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@PAPAX@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Dur$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_JU?$ratio@$00$0DOI@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@PAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000> >, COMDAT
; _this$ = ecx

; 120  : 		{	// construct from a duration

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Dur$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0DOI@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,1000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 121  : 		typedef typename ratio_divide<_Period2, _Period>::type _Checked_type;
; 122  : 
; 123  : 		static_assert(_Is_ratio<_Period>::value,
; 124  : 			"period not an instance of std::ratio");
; 125  : 		static_assert(0 < _Period::num,
; 126  : 			"duration negative or zero");
; 127  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_JU?$ratio@$00$0DOI@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@PAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_JU?$ratio@$00$0JIJGIA@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@PAPAX@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Dur$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_JU?$ratio@$00$0JIJGIA@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@PAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,10000000> >, COMDAT
; _this$ = ecx

; 120  : 		{	// construct from a duration

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Dur$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@_JU?$ratio@$00$0JIJGIA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1000000000> >,__int64,std::ratio<1,10000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 121  : 		typedef typename ratio_divide<_Period2, _Period>::type _Checked_type;
; 122  : 
; 123  : 		static_assert(_Is_ratio<_Period>::value,
; 124  : 			"period not an instance of std::ratio");
; 125  : 		static_assert(0 < _Period::num,
; 126  : 			"duration negative or zero");
; 127  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_JU?$ratio@$00$0JIJGIA@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@PAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,10000000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??Z?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Z?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator-=, COMDAT
; _this$ = ecx

; 173  : 		{	// subtract _Right from rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 174  : 		_MyRep -= _Right._MyRep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	sbb	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 175  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 176  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Z?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=, COMDAT
; _this$ = ecx

; 167  : 		{	// add _Right to rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		_MyRep += _Right._MyRep;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+4]
	adc	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 169  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 170  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count, COMDAT
; _this$ = ecx

; 130  : 		{	// get stored rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (_MyRep);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?N_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?N_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z PROC ; std::chrono::operator<=<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >, COMDAT

; 502  : 	{	// test if duration <= duration

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 503  : 	return (!(_Right < _Left));

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	call	??$?M_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ; std::chrono::operator<<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv69[ebp]

; 504  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?N_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ENDP ; std::chrono::operator<=<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$_To_xtime@_JU?$ratio@$00$0DOI@@std@@@std@@YA?AUxtime@@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@0@@Z
_TEXT	SEGMENT
$T1 = -100						; size = 8
$T2 = -92						; size = 8
$T3 = -84						; size = 8
$T4 = -76						; size = 8
$T5 = -68						; size = 8
$T6 = -60						; size = 8
$T7 = -52						; size = 8
__T0$8 = -40						; size = 8
__Xt$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
$T9 = 8							; size = 4
__Rel_time$ = 12					; size = 4
??$_To_xtime@_JU?$ratio@$00$0DOI@@std@@@std@@YA?AUxtime@@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@0@@Z PROC ; std::_To_xtime<__int64,std::ratio<1,1000> >, COMDAT

; 738  : 	{	// convert duration to xtime

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 739  : 	xtime _Xt;
; 740  : 	if (_Rel_time <= chrono::duration<_Rep, _Period>::zero())

	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	?zero@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@SA?AV123@XZ ; std::chrono::duration<__int64,std::ratio<1,1000> >::zero
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Rel_time$[ebp]
	push	ecx
	call	??$?N_JU?$ratio@$00$0DOI@@std@@_JU01@@chrono@std@@YA_NABV?$duration@_JU?$ratio@$00$0DOI@@std@@@01@0@Z ; std::chrono::operator<=<__int64,std::ratio<1,1000>,__int64,std::ratio<1,1000> >
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@To_xtime

; 741  : 		{	// negative or zero relative time, return zero
; 742  : 		_Xt.sec = 0;

	xorpd	xmm0, xmm0
	movlpd	QWORD PTR __Xt$[ebp], xmm0

; 743  : 		_Xt.nsec = 0;

	mov	DWORD PTR __Xt$[ebp+8], 0

; 744  : 		}
; 745  : 	else

	jmp	$LN1@To_xtime
$LN2@To_xtime:

; 746  : 		{	// positive relative time, convert
; 747  : 		chrono::nanoseconds _T0 =
; 748  : 			chrono::system_clock::now().time_since_epoch();

	push	0
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ; std::chrono::system_clock::now
	add	esp, 4
	mov	ecx, eax
	call	?time_since_epoch@?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@XZ ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_since_epoch
	push	eax
	lea	ecx, DWORD PTR __T0$8[ebp]
	call	??$?0_JU?$ratio@$00$0JIJGIA@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,10000000> >

; 749  : 		_T0 += _Rel_time;

	push	0
	mov	edx, DWORD PTR __Rel_time$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0_JU?$ratio@$00$0DOI@@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1000> >
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR __T0$8[ebp]
	call	??Y?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator+=

; 750  : 		_Xt.sec = chrono::duration_cast<chrono::seconds>(_T0).count();

	lea	ecx, DWORD PTR __T0$8[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$duration_cast@V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$00@std@@@01@ABV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z ; std::chrono::duration_cast<std::chrono::duration<__int64,std::ratio<1,1> >,__int64,std::ratio<1,1000000000> >
	add	esp, 8
	mov	ecx, eax
	call	?count@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1> >::count
	mov	DWORD PTR __Xt$[ebp], eax
	mov	DWORD PTR __Xt$[ebp+4], edx

; 751  : 		_T0 -= chrono::seconds(_Xt.sec);

	push	0
	push	0
	lea	eax, DWORD PTR __Xt$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1> >::duration<__int64,std::ratio<1,1> ><__int64>
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0_JU?$ratio@$00$00@std@@@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$00@std@@@12@PAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::duration<__int64,std::ratio<1,1000000000> ><__int64,std::ratio<1,1> >
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR __T0$8[ebp]
	call	??Z?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QAEAAV012@ABV012@@Z ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::operator-=

; 752  : 		_Xt.nsec = (long)_T0.count();

	lea	ecx, DWORD PTR __T0$8[ebp]
	call	?count@?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@QBE_JXZ ; std::chrono::duration<__int64,std::ratio<1,1000000000> >::count
	mov	DWORD PTR __Xt$[ebp+8], eax
$LN1@To_xtime:

; 753  : 		}
; 754  : 	return (_Xt);

	mov	edx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR __Xt$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Xt$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR __Xt$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR __Xt$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR $T9[ebp]

; 755  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@To_xtime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@To_xtime:
	DD	2
	DD	$LN7@To_xtime
$LN7@To_xtime:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN5@To_xtime
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN6@To_xtime
$LN6@To_xtime:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	48					; 00000030H
	DB	0
$LN5@To_xtime:
	DB	95					; 0000005fH
	DB	88					; 00000058H
	DB	116					; 00000074H
	DB	0
??$_To_xtime@_JU?$ratio@$00$0DOI@@std@@@std@@YA?AUxtime@@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@0@@Z ENDP ; std::_To_xtime<__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_v$1 = -12						; size = 4
_i$2 = -8						; size = 4
_dests$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_nsamples$ = 16						; size = 4
?clamp@output@audio@@YAXPAXPBMH@Z PROC			; audio::output::clamp

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 273  :   int16_t *dests = (int16_t *)dest;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _dests$[ebp], eax

; 274  : 
; 275  :   for (int32_t i=0; i < nsamples; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@clamp
$LN4@clamp:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN5@clamp:
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _nsamples$[ebp]
	jge	SHORT $LN3@clamp

; 276  :   {
; 277  :     float v = src[i] * 32768.0f;

	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	movss	xmm0, DWORD PTR [ecx+eax*4]
	mulss	xmm0, DWORD PTR __real@47000000
	movss	DWORD PTR _v$1[ebp], xmm0

; 278  :     if (v >  32600.0f) v =  32600.0f;

	movss	xmm0, DWORD PTR _v$1[ebp]
	comiss	xmm0, DWORD PTR __real@46feb000
	jbe	SHORT $LN2@clamp
	movss	xmm0, DWORD PTR __real@46feb000
	movss	DWORD PTR _v$1[ebp], xmm0
$LN2@clamp:

; 279  :     if (v < -32600.0f) v = -32600.0f;

	movss	xmm0, DWORD PTR __real@c6feb000
	comiss	xmm0, DWORD PTR _v$1[ebp]
	jbe	SHORT $LN1@clamp
	movss	xmm0, DWORD PTR __real@c6feb000
	movss	DWORD PTR _v$1[ebp], xmm0
$LN1@clamp:

; 280  :     dests[i] = (int16_t)v;

	cvttss2si edx, DWORD PTR _v$1[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _dests$[ebp]
	mov	WORD PTR [ecx+eax*2], dx

; 281  :   }

	jmp	SHORT $LN4@clamp
$LN3@clamp:

; 282  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?clamp@output@audio@@YAXPAXPBMH@Z ENDP			; audio::output::clamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIDirectSound8@@@@YAXPAPAUIDirectSound8@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIDirectSound8@@@@YAXPAPAUIDirectSound8@@@Z PROC ; SafeRelease<IDirectSound8>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIDirectSound8@@@@YAXPAPAUIDirectSound8@@@Z ENDP ; SafeRelease<IDirectSound8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z PROC ; SafeRelease<IDirectSoundBuffer>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z ENDP ; SafeRelease<IDirectSoundBuffer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thread
;	COMDAT ??$sleep_for@_JU?$ratio@$00$0DOI@@std@@@this_thread@std@@YAXABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@1@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 16
$T2 = -44						; size = 16
__Tgt$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
__Rel_time$ = 8						; size = 4
??$sleep_for@_JU?$ratio@$00$0DOI@@std@@@this_thread@std@@YAXABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@1@@Z PROC ; std::this_thread::sleep_for<__int64,std::ratio<1,1000> >, COMDAT

; 163  : 	{	// sleep for duration

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 164  : 	stdext::threads::xtime _Tgt = _To_xtime(_Rel_time);

	mov	eax, DWORD PTR __Rel_time$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_To_xtime@_JU?$ratio@$00$0DOI@@std@@@std@@YA?AUxtime@@ABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@0@@Z ; std::_To_xtime<__int64,std::ratio<1,1000> >
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp+12], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR __Tgt$[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR __Tgt$[ebp+4], edx
	mov	eax, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR __Tgt$[ebp+8], eax
	mov	ecx, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR __Tgt$[ebp+12], ecx

; 165  : 	sleep_until(&_Tgt);

	lea	edx, DWORD PTR __Tgt$[ebp]
	push	edx
	call	?sleep_until@this_thread@std@@YAXPBUxtime@@@Z ; std::this_thread::sleep_until
	add	esp, 4

; 166  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sleep_for
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@sleep_for:
	DD	1
	DD	$LN4@sleep_for
$LN4@sleep_for:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN3@sleep_for
$LN3@sleep_for:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	103					; 00000067H
	DB	116					; 00000074H
	DB	0
??$sleep_for@_JU?$ratio@$00$0DOI@@std@@@this_thread@std@@YAXABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@1@@Z ENDP ; std::this_thread::sleep_for<__int64,std::ratio<1,1000> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0H@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABHPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0H@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABHPAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx

; 106  : 		static_assert(_Is_ratio<_Period>::value,
; 107  : 			"period not an instance of std::ratio");
; 108  : 		static_assert(0 < _Period::num,
; 109  : 			"duration negative or zero");
; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0H@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABHPAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?zero@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@SA?AV123@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?zero@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@SA?AV123@XZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::zero, COMDAT

; 203  : 		{	// get zero value

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 204  : 		return (_Myt(duration_values<_Rep>::zero()));

	call	?zero@?$duration_values@_J@chrono@std@@SA_JXZ ; std::chrono::duration_values<__int64>::zero
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><__int64>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 205  : 		}

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?zero@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@SA?AV123@XZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::zero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,1000> >::count, COMDAT
; _this$ = ecx

; 130  : 		{	// get stored rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (_MyRep);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?count@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,1000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.h
;	COMDAT ?Sync@DirectSound@output@audio@@UAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 8
_this$ = -4						; size = 4
?Sync@DirectSound@output@audio@@UAEXXZ PROC		; audio::output::DirectSound::Sync, COMDAT
; _this$ = ecx

; 45   :   void Sync() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Sync:

; 46   : 			while (lock != 0) std::this_thread::sleep_for(std::chrono::milliseconds(2));

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??Batomic_int@std@@QBEHXZ		; std::atomic_int::operator int
	test	eax, eax
	je	SHORT $LN3@Sync
	mov	DWORD PTR $T1[ebp], 2
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0H@?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@QAE@ABHPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,1000> >::duration<__int64,std::ratio<1,1000> ><int>
	push	eax
	call	??$sleep_for@_JU?$ratio@$00$0DOI@@std@@@this_thread@std@@YAXABV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@1@@Z ; std::this_thread::sleep_for<__int64,std::ratio<1,1000> >
	add	esp, 4
	jmp	SHORT $LN2@Sync
$LN3@Sync:

; 47   : 	}

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sync@DirectSound@output@audio@@UAEXXZ ENDP		; audio::output::DirectSound::Sync
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data_pointer$ = 8					; size = 4
?EndWrite@DirectSound@output@audio@@UAEHPAX@Z PROC	; audio::output::DirectSound::EndWrite
; _this$ = ecx

; 285  : int DirectSound::EndWrite(void* data_pointer) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 
; 287  :   /*auto dest_buf=(uint8_t*)buf1;
; 288  :   auto dw=len1;
; 289  : 
; 290  :   auto src_buf=(float*)data_pointer;
; 291  :   while (dw) { 
; 292  :     float v = *src_buf++;
; 293  :     v *= 32768.0f; // * vol;
; 294  :     if (v >  32600.0f) v =  32600.0f;
; 295  :     if (v < -32600.0f) v = -32600.0f;
; 296  :     *dest_buf++ = (short)v;
; 297  :     dw--;
; 298  :   }
; 299  : 
; 300  :   if(buf2)  {
; 301  :     dest_buf=(uint8_t*)buf2;
; 302  :     dw=len2;
; 303  :     while(dw) {
; 304  :       float v = *src_buf++;
; 305  :       v *= 32768.0f; // * vol;
; 306  :       if (v >  32600.0f) v =  32600.0f;
; 307  :       if (v < -32600.0f) v = -32600.0f;
; 308  :       *dest_buf++ = (short)v;
; 309  :     dw--;
; 310  :     }
; 311  :   }*/
; 312  : 
; 313  :     if (buf1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN4@EndWrite

; 314  :       clamp(buf1, (float*)data_pointer, len1/2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	shr	edx, 1
	push	edx
	mov	eax, DWORD PTR _data_pointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	?clamp@output@audio@@YAXPAXPBMH@Z	; audio::output::clamp
	add	esp, 12					; 0000000cH
$LN4@EndWrite:

; 315  :     if (buf2)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@EndWrite

; 316  :       clamp(buf2, (float*)data_pointer + len1/2, len2/2);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	shr	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	shr	ecx, 1
	mov	edx, DWORD PTR _data_pointer$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	?clamp@output@audio@@YAXPAXPBMH@Z	; audio::output::clamp
	add	esp, 12					; 0000000cH
$LN3@EndWrite:

; 317  : 
; 318  :   if (secondary_buffer->Unlock(buf1, len1, buf2, len2)==DS_OK)

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+76]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN2@EndWrite

; 319  :     return S_OK;

	xor	eax, eax
	jmp	SHORT $LN5@EndWrite

; 320  :   else

	jmp	SHORT $LN5@EndWrite
$LN2@EndWrite:

; 321  :     return S_FALSE;

	mov	eax, 1
$LN5@EndWrite:

; 322  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EndWrite@DirectSound@output@audio@@UAEHPAX@Z ENDP	; audio::output::DirectSound::EndWrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_hr$1 = -24						; size = 4
_nwrite$ = -20						; size = 4
_curpos$ = -12						; size = 4
_this$ = -4						; size = 4
_samples$ = 8						; size = 4
?BeginWrite@DirectSound@output@audio@@UAEHAAI@Z PROC	; audio::output::DirectSound::BeginWrite
; _this$ = ecx

; 236  : int DirectSound::BeginWrite(uint32_t& samples) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 237  :    DWORD curpos;
; 238  :   int32_t nwrite = 0;

	mov	DWORD PTR _nwrite$[ebp], 0
$LN9@BeginWrite:

; 239  :   for (;;) {
; 240  :     HRESULT hr = secondary_buffer->GetCurrentPosition(&curpos, 0);

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _curpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$1[ebp], eax

; 241  :     if (hr == S_OK)

	cmp	DWORD PTR _hr$1[ebp], 0
	jne	$LN7@BeginWrite

; 242  :     {
; 243  :       // find out how many bytes to write
; 244  :       curpos &= ~31u;

	mov	ecx, DWORD PTR _curpos$[ebp]
	and	ecx, -32				; ffffffe0H
	mov	DWORD PTR _curpos$[ebp], ecx

; 245  :       if (curpos == last_cursor_pos)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _curpos$[ebp]
	cmp	eax, DWORD PTR [edx+60]
	jne	SHORT $LN6@BeginWrite

; 246  :         return S_FALSE;

	mov	eax, 1
	jmp	$LN10@BeginWrite
$LN6@BeginWrite:

; 247  : 
; 248  :       nwrite = curpos - last_cursor_pos;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _curpos$[ebp]
	sub	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _nwrite$[ebp], edx

; 249  :       if (nwrite < 0)

	jns	SHORT $LN5@BeginWrite

; 250  :         nwrite += buffer_size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nwrite$[ebp]
	add	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _nwrite$[ebp], ecx
$LN5@BeginWrite:

; 251  : 
; 252  :       hr = secondary_buffer->Lock(last_cursor_pos, nwrite, &buf1, &len1, &buf2, &len2, 0);

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 56					; 00000038H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	eax, DWORD PTR _nwrite$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$1[ebp], eax
$LN7@BeginWrite:

; 253  :     }
; 254  : 
; 255  :     if (hr == S_OK)

	cmp	DWORD PTR _hr$1[ebp], 0
	jne	SHORT $LN4@BeginWrite

; 256  :       break;

	jmp	SHORT $LN8@BeginWrite
	jmp	SHORT $LN3@BeginWrite
$LN4@BeginWrite:

; 257  :     else if (hr == DSERR_BUFFERLOST)

	cmp	DWORD PTR _hr$1[ebp], -2005401450	; 88780096H
	jne	SHORT $LN2@BeginWrite

; 258  :       secondary_buffer->Restore();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+80]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  :     else

	jmp	SHORT $LN3@BeginWrite
$LN2@BeginWrite:

; 260  :       return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN10@BeginWrite
$LN3@BeginWrite:

; 261  :   }

	jmp	$LN9@BeginWrite
$LN8@BeginWrite:

; 262  : 
; 263  :   // we got the lock
; 264  :   last_cursor_pos = curpos;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _curpos$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 265  :   //g_dsound.bufcnt += nwrite;
; 266  :   samples = nwrite / 4;

	mov	eax, DWORD PTR _nwrite$[ebp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	edx, DWORD PTR _samples$[ebp]
	mov	DWORD PTR [edx], eax

; 267  :   return S_OK;

	xor	eax, eax
$LN10@BeginWrite:

; 268  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@BeginWrite
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN14@BeginWrite:
	DD	1
	DD	$LN13@BeginWrite
$LN13@BeginWrite:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN12@BeginWrite
$LN12@BeginWrite:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?BeginWrite@DirectSound@output@audio@@UAEHAAI@Z ENDP	; audio::output::DirectSound::BeginWrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
$T1 = -96						; size = 1
$T2 = -95						; size = 1
$T3 = -94						; size = 1
$T4 = -93						; size = 1
_src_buf$ = -92						; size = 4
_len$ = -88						; size = 4
_dest_buf$ = -84					; size = 4
_buf_size2$ = -76					; size = 4
_buf_size1$ = -64					; size = 4
_write_cursor$ = -52					; size = 4
_play_cursor$ = -40					; size = 4
_hr$ = -32						; size = 4
_buf_ptr2$ = -24					; size = 4
_buf_ptr1$ = -12					; size = 4
_this$ = -4						; size = 4
_data_pointer$ = 8					; size = 4
_size_bytes$ = 12					; size = 4
?Write@DirectSound@output@audio@@UAEHPAXI@Z PROC	; audio::output::DirectSound::Write
; _this$ = ecx

; 143  : int DirectSound::Write(void* data_pointer, uint32_t size_bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T4[ebp], 0
	mov	BYTE PTR $T2[ebp], 0
	mov	BYTE PTR $T3[ebp], 0
	mov	BYTE PTR $T1[ebp], 0

; 144  : 	lock = 1;

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??4?$atomic@H@std@@QAEHH@Z		; std::atomic<int>::operator=
$LN12@Write:

; 145  :   LPVOID buf_ptr1, buf_ptr2;
; 146  :   HRESULT hr;
; 147  :   DWORD play_cursor,write_cursor;
; 148  :   DWORD buf_size1,buf_size2; 
; 149  : 	
; 150  :   for (;;) {
; 151  :     hr = secondary_buffer->GetCurrentPosition(&play_cursor,&write_cursor);

	mov	esi, esp
	lea	eax, DWORD PTR _write_cursor$[ebp]
	push	eax
	lea	ecx, DWORD PTR _play_cursor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 152  :     if (hr == S_OK)

	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN10@Write

; 153  :     {
; 154  :       hr = secondary_buffer->Lock(write_cursor,size_bytes,&buf_ptr1,&buf_size1,&buf_ptr2,&buf_size2,0);

	mov	esi, esp
	push	0
	mov	BYTE PTR $T4[ebp], 1
	lea	edx, DWORD PTR _buf_size2$[ebp]
	push	edx
	mov	BYTE PTR $T3[ebp], 1
	lea	eax, DWORD PTR _buf_ptr2$[ebp]
	push	eax
	mov	BYTE PTR $T2[ebp], 1
	lea	ecx, DWORD PTR _buf_size1$[ebp]
	push	ecx
	mov	BYTE PTR $T1[ebp], 1
	lea	edx, DWORD PTR _buf_ptr1$[ebp]
	push	edx
	mov	eax, DWORD PTR _size_bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _write_cursor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN10@Write:

; 155  :     }
; 156  : 
; 157  :     if (hr == S_OK)

	cmp	DWORD PTR _hr$[ebp], 0
	jne	SHORT $LN9@Write

; 158  :       break;

	jmp	SHORT $LN11@Write
	jmp	SHORT $LN8@Write
$LN9@Write:

; 159  :     else if (hr == DSERR_BUFFERLOST)

	cmp	DWORD PTR _hr$[ebp], -2005401450	; 88780096H
	jne	SHORT $LN7@Write

; 160  :       secondary_buffer->Restore();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 161  :     else {

	jmp	SHORT $LN8@Write
$LN7@Write:

; 162  : 			lock = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??4?$atomic@H@std@@QAEHH@Z		; std::atomic<int>::operator=

; 163  :       return S_FALSE;

	mov	eax, 1
	jmp	$LN13@Write
$LN8@Write:

; 164  : 		}
; 165  :   }  

	jmp	$LN12@Write
$LN11@Write:

; 166  : 	//OutputDebugString("ds write\n");
; 167  : 
; 168  :   auto dest_buf=(uint8_t*)buf_ptr1;

	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN15@Write
	push	OFFSET $LN16@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN15@Write:
	mov	edx, DWORD PTR _buf_ptr1$[ebp]
	mov	DWORD PTR _dest_buf$[ebp], edx

; 169  :   auto len=buf_size1;

	cmp	BYTE PTR $T2[ebp], 0
	jne	SHORT $LN17@Write
	push	OFFSET $LN18@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN17@Write:
	mov	eax, DWORD PTR _buf_size1$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 170  : 
; 171  :   auto src_buf=(uint8_t*)data_pointer;

	mov	ecx, DWORD PTR _data_pointer$[ebp]
	mov	DWORD PTR _src_buf$[ebp], ecx
$LN5@Write:

; 172  :   while(len) {*dest_buf++=*src_buf++;len--;}

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN4@Write
	mov	edx, DWORD PTR _dest_buf$[ebp]
	mov	eax, DWORD PTR _src_buf$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _dest_buf$[ebp]
	add	edx, 1
	mov	DWORD PTR _dest_buf$[ebp], edx
	mov	eax, DWORD PTR _src_buf$[ebp]
	add	eax, 1
	mov	DWORD PTR _src_buf$[ebp], eax
	mov	ecx, DWORD PTR _len$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	jmp	SHORT $LN5@Write
$LN4@Write:

; 173  : 
; 174  :   if(buf_ptr2)  {

	cmp	BYTE PTR $T3[ebp], 0
	jne	SHORT $LN19@Write
	push	OFFSET $LN20@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN19@Write:
	cmp	DWORD PTR _buf_ptr2$[ebp], 0
	je	SHORT $LN3@Write

; 175  :     dest_buf=(uint8_t*)buf_ptr2;

	cmp	BYTE PTR $T3[ebp], 0
	jne	SHORT $LN21@Write
	push	OFFSET $LN20@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN21@Write:
	mov	edx, DWORD PTR _buf_ptr2$[ebp]
	mov	DWORD PTR _dest_buf$[ebp], edx

; 176  :     len=buf_size2;

	cmp	BYTE PTR $T4[ebp], 0
	jne	SHORT $LN22@Write
	push	OFFSET $LN23@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN22@Write:
	mov	eax, DWORD PTR _buf_size2$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN2@Write:

; 177  :     while(len) {*dest_buf++=*src_buf++;len--;}

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN3@Write
	mov	ecx, DWORD PTR _dest_buf$[ebp]
	mov	edx, DWORD PTR _src_buf$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _dest_buf$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dest_buf$[ebp], ecx
	mov	edx, DWORD PTR _src_buf$[ebp]
	add	edx, 1
	mov	DWORD PTR _src_buf$[ebp], edx
	mov	eax, DWORD PTR _len$[ebp]
	sub	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN2@Write
$LN3@Write:

; 178  :   }
; 179  : 
; 180  :   secondary_buffer->Unlock(buf_ptr1,buf_size1,buf_ptr2,buf_size2);

	cmp	BYTE PTR $T4[ebp], 0
	jne	SHORT $LN24@Write
	push	OFFSET $LN23@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN24@Write:
	cmp	BYTE PTR $T3[ebp], 0
	jne	SHORT $LN25@Write
	push	OFFSET $LN20@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN25@Write:
	cmp	BYTE PTR $T2[ebp], 0
	jne	SHORT $LN26@Write
	push	OFFSET $LN18@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN26@Write:
	cmp	BYTE PTR $T1[ebp], 0
	jne	SHORT $LN27@Write
	push	OFFSET $LN16@Write
	call	__RTC_UninitUse
	add	esp, 4
$LN27@Write:
	mov	esi, esp
	mov	ecx, DWORD PTR _buf_size2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf_ptr2$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf_size1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf_ptr1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+76]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 181  : 	lock = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??4?$atomic@H@std@@QAEHH@Z		; std::atomic<int>::operator=

; 182  :   return S_OK;

	xor	eax, eax
$LN13@Write:

; 183  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN31@Write:
	DD	6
	DD	$LN30@Write
$LN30@Write:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN16@Write
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN18@Write
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN20@Write
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN23@Write
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN28@Write
	DD	-52					; ffffffccH
	DD	4
	DD	$LN29@Write
$LN29@Write:
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN28@Write:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN23@Write:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN20@Write:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN18@Write:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	49					; 00000031H
	DB	0
$LN16@Write:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
?Write@DirectSound@output@audio@@UAEHPAXI@Z ENDP	; audio::output::DirectSound::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_play$ = 8						; size = 4
_write$ = 12						; size = 4
?GetCursors@DirectSound@output@audio@@UAEXAAI0@Z PROC	; audio::output::DirectSound::GetCursors
; _this$ = ecx

; 138  : void DirectSound::GetCursors(uint32_t& play, uint32_t& write) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 139  :   secondary_buffer->GetCurrentPosition((LPDWORD)&play,(LPDWORD)&write);

	mov	esi, esp
	mov	eax, DWORD PTR _write$[ebp]
	push	eax
	mov	ecx, DWORD PTR _play$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetCursors@DirectSound@output@audio@@UAEXAAI0@Z ENDP	; audio::output::DirectSound::GetCursors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_cwrite$ = -24						; size = 4
_cplay$ = -12						; size = 4
_this$ = -4						; size = 4
?GetBytesBuffered@DirectSound@output@audio@@UAEIXZ PROC	; audio::output::DirectSound::GetBytesBuffered
; _this$ = ecx

; 125  : uint32_t DirectSound::GetBytesBuffered() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 126  :  unsigned long cplay,cwrite;
; 127  : 
; 128  :  if(last_write_cursor==0xffffffff) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], -1
	jne	SHORT $LN3@GetBytesBu
	xor	eax, eax
	jmp	SHORT $LN4@GetBytesBu
$LN3@GetBytesBu:

; 129  : 
; 130  :  secondary_buffer->GetCurrentPosition(&cplay,&cwrite);

	mov	esi, esp
	lea	ecx, DWORD PTR _cwrite$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cplay$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 
; 132  :  if(cplay>buffer_size_) return buffer_size_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cplay$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jbe	SHORT $LN2@GetBytesBu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	jmp	SHORT $LN4@GetBytesBu
$LN2@GetBytesBu:

; 133  : 
; 134  :  if(cplay<last_write_cursor) return last_write_cursor-cplay;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cplay$[ebp]
	cmp	ecx, DWORD PTR [eax+64]
	jae	SHORT $LN1@GetBytesBu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	sub	eax, DWORD PTR _cplay$[ebp]
	jmp	SHORT $LN4@GetBytesBu
$LN1@GetBytesBu:

; 135  :  return (buffer_size_-cplay)+last_write_cursor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]
	sub	eax, DWORD PTR _cplay$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+64]
$LN4@GetBytesBu:

; 136  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetBytesBu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@GetBytesBu:
	DD	2
	DD	$LN8@GetBytesBu
$LN8@GetBytesBu:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN6@GetBytesBu
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@GetBytesBu
$LN7@GetBytesBu:
	DB	99					; 00000063H
	DB	119					; 00000077H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN6@GetBytesBu:
	DB	99					; 00000063H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
?GetBytesBuffered@DirectSound@output@audio@@UAEIXZ ENDP	; audio::output::DirectSound::GetBytesBuffered
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_hr$1 = -12						; size = 4
_hr$2 = -8						; size = 4
_this$ = -4						; size = 4
?Stop@DirectSound@output@audio@@UAEHXZ PROC		; audio::output::DirectSound::Stop
; _this$ = ecx

; 112  : int DirectSound::Stop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	OutputDebugString("ds stop\n");

	mov	esi, esp
	push	OFFSET $SG152244
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  :   if (secondary_buffer != nullptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN4@Stop

; 115  :     auto hr = secondary_buffer->Stop();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$2[ebp], eax

; 116  :     if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$2[ebp], 0
	jge	SHORT $LN4@Stop
	mov	eax, 1
	jmp	SHORT $LN5@Stop
$LN4@Stop:

; 117  :   }
; 118  :   if (primary_buffer != nullptr) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@Stop

; 119  :     auto hr = primary_buffer->Stop();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+72]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$1[ebp], eax

; 120  :     if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$1[ebp], 0
	jge	SHORT $LN2@Stop
	mov	eax, 1
	jmp	SHORT $LN5@Stop
$LN2@Stop:

; 121  :   }
; 122  :   return S_OK;

	xor	eax, eax
$LN5@Stop:

; 123  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Stop@DirectSound@output@audio@@UAEHXZ ENDP		; audio::output::DirectSound::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_this$ = -4						; size = 4
?Play@DirectSound@output@audio@@UAEHXZ PROC		; audio::output::DirectSound::Play
; _this$ = ecx

; 103  : int DirectSound::Play() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 104  :   auto hr = primary_buffer->Play(0,0,DSBPLAY_LOOPING);

	mov	esi, esp
	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 105  :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Play
	mov	eax, 1
	jmp	SHORT $LN3@Play
$LN2@Play:

; 106  :   hr = secondary_buffer->Play(0,0,DSBPLAY_LOOPING);

	mov	esi, esp
	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 107  :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Play
	mov	eax, 1
	jmp	SHORT $LN3@Play
$LN1@Play:

; 108  :   hr = secondary_buffer->SetCurrentPosition(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 109  :   return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN3@Play:

; 110  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Play@DirectSound@output@audio@@UAEHXZ ENDP		; audio::output::DirectSound::Play
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deinitialize@DirectSound@output@audio@@UAEHXZ PROC	; audio::output::DirectSound::Deinitialize
; _this$ = ecx

; 95   : int DirectSound::Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 96   :   Stop();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   :   SafeRelease(&secondary_buffer);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	call	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>
	add	esp, 4

; 98   :   SafeRelease(&primary_buffer);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPAPAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>
	add	esp, 4

; 99   :   SafeRelease(&ds8);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	??$SafeRelease@UIDirectSound8@@@@YAXPAPAUIDirectSound8@@@Z ; SafeRelease<IDirectSound8>
	add	esp, 4

; 100  :   return S_OK;

	xor	eax, eax

; 101  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@DirectSound@output@audio@@UAEHXZ ENDP	; audio::output::DirectSound::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
tv408 = -84						; size = 8
tv406 = -76						; size = 4
tv403 = -70						; size = 2
tv401 = -68						; size = 8
tv397 = -60						; size = 4
_dsbd$ = -52						; size = 36
_hr$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_sample_rate$ = 8					; size = 4
_channels$ = 12						; size = 1
_bits$ = 16						; size = 1
?Initialize@DirectSound@output@audio@@UAEHIEE@Z PROC	; audio::output::DirectSound::Initialize
; _this$ = ecx

; 38   : int DirectSound::Initialize(uint32_t sample_rate, uint8_t channels, uint8_t bits) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 39   :   last_write_cursor=0xffffffff;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], -1

; 40   :   HRESULT hr = DirectSoundCreate8(&DSDEVID_DefaultPlayback,&ds8,nullptr);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	push	OFFSET _DSDEVID_DefaultPlayback
	call	_DirectSoundCreate8@12
	mov	DWORD PTR _hr$[ebp], eax

; 41   :   if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@Initialize

; 42   :     Deinitialize();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   :     return S_FALSE;

	mov	eax, 1
	jmp	$LN8@Initialize
$LN7@Initialize:

; 44   :   }
; 45   :   hr = ds8->SetCooperativeLevel((HWND)window_handle_,DSSCL_PRIORITY);

	mov	esi, esp
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 46   :   if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@Initialize

; 47   :     hr = ds8->SetCooperativeLevel((HWND)window_handle_,DSSCL_NORMAL);  

	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 48   :     if (FAILED(hr)) {

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@Initialize

; 49   :       return S_FALSE;

	mov	eax, 1
	jmp	$LN8@Initialize
$LN5@Initialize:

; 50   :     }
; 51   :   }
; 52   : 
; 53   :   DSBUFFERDESC dsbd;
; 54   : 	ZeroMemory(&dsbd,sizeof(DSBUFFERDESC));

	push	36					; 00000024H
	push	0
	lea	ecx, DWORD PTR _dsbd$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 55   : 	dsbd.dwSize        = sizeof(DSBUFFERDESC);

	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H

; 56   : 	dsbd.dwFlags       = DSBCAPS_PRIMARYBUFFER;

	mov	DWORD PTR _dsbd$[ebp+4], 1

; 57   : 	dsbd.dwBufferBytes = 0;

	mov	DWORD PTR _dsbd$[ebp+8], 0

; 58   : 	dsbd.lpwfxFormat   = NULL;

	mov	DWORD PTR _dsbd$[ebp+16], 0

; 59   : 
; 60   : 
; 61   : 	hr = ds8->CreateSoundBuffer(&dsbd,&primary_buffer,nullptr) ;

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	lea	eax, DWORD PTR _dsbd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 62   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Initialize
	mov	eax, 1
	jmp	$LN8@Initialize
$LN4@Initialize:

; 63   : 
; 64   : 	ZeroMemory( &wave_format_, sizeof(WAVEFORMATEX) ); 

	push	18					; 00000012H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 65   : 	wave_format_.wFormatTag      = (WORD) WAVE_FORMAT_PCM; 

	mov	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+4], dx

; 66   : 	wave_format_.nChannels       =  channels; 

	movzx	cx, BYTE PTR _channels$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+6], cx

; 67   : 	wave_format_.nSamplesPerSec  = sample_rate; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sample_rate$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 68   : 	wave_format_.wBitsPerSample  = (WORD) bits; 

	movzx	dx, BYTE PTR _bits$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+18], dx

; 69   : 	wave_format_.nBlockAlign     = (WORD) ((wave_format_.wBitsPerSample >> 3) * wave_format_.nChannels);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+18]
	sar	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	imul	edx, ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+16], dx

; 70   : 	wave_format_.nAvgBytesPerSec = (DWORD) (wave_format_.nSamplesPerSec * wave_format_.nBlockAlign);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 71   :   wave_format_.cbSize = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+20], dx

; 72   : 	hr = primary_buffer->SetFormat(&wave_format_);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 73   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@Initialize
	mov	eax, 1
	jmp	$LN8@Initialize
$LN3@Initialize:

; 74   : 
; 75   : 
; 76   :   if (buffer_size_ == 0)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN2@Initialize

; 77   :     buffer_size_ = uint32_t(wave_format_.nBlockAlign * wave_format_.nSamplesPerSec * 0.4); //400ms

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR tv397[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv397[ebp]
	mov	eax, DWORD PTR tv397[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR __real@3fd999999999999a
	movsd	QWORD PTR tv401[ebp], xmm0
	fld	QWORD PTR tv401[ebp]
	fnstcw	WORD PTR tv403[ebp]
	movzx	eax, WORD PTR tv403[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv406[ebp], eax
	fldcw	WORD PTR tv406[ebp]
	fistp	QWORD PTR tv408[ebp]
	fldcw	WORD PTR tv403[ebp]
	mov	ecx, DWORD PTR tv408[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN2@Initialize:

; 78   : 
; 79   : 
; 80   : 	ZeroMemory( &dsbd, sizeof(DSBUFFERDESC) );

	push	36					; 00000024H
	push	0
	lea	eax, DWORD PTR _dsbd$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 81   : 	dsbd.dwSize        = sizeof(DSBUFFERDESC);

	mov	DWORD PTR _dsbd$[ebp], 36		; 00000024H

; 82   : 	dsbd.dwFlags       = DSBCAPS_GLOBALFOCUS | DSBCAPS_GETCURRENTPOSITION2;

	mov	DWORD PTR _dsbd$[ebp+4], 98304		; 00018000H

; 83   : 	dsbd.dwBufferBytes = buffer_size_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _dsbd$[ebp+8], edx

; 84   : 	dsbd.lpwfxFormat   = &wave_format_;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR _dsbd$[ebp+16], eax

; 85   :   // Create a temporary sound buffer with the specific buffer settings.
; 86   : 	hr = ds8->CreateSoundBuffer(&dsbd, &secondary_buffer, NULL);

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	lea	edx, DWORD PTR _dsbd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 87   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Initialize
	mov	eax, 1
	jmp	SHORT $LN8@Initialize
$LN1@Initialize:

; 88   : 
; 89   :     //hr = secondary_buffer->SetVolume(DSBVOLUME_MAX);
; 90   :   //if (FAILED(hr)) return S_FALSE;
; 91   : 
; 92   :   return S_OK;

	xor	eax, eax
$LN8@Initialize:

; 93   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN12@Initialize:
	DD	1
	DD	$LN11@Initialize
$LN11@Initialize:
	DD	-52					; ffffffccH
	DD	36					; 00000024H
	DD	$LN10@Initialize
$LN10@Initialize:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	0
?Initialize@DirectSound@output@audio@@UAEHIEE@Z ENDP	; audio::output::DirectSound::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DirectSound@output@audio@@QAE@XZ PROC		; audio::output::DirectSound::~DirectSound
; _this$ = ecx

; 34   : DirectSound::~DirectSound() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DirectSound@output@audio@@6B@

; 35   :   Deinitialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deinitialize@DirectSound@output@audio@@UAEHXZ ; audio::output::DirectSound::Deinitialize

; 36   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1DirectSound@output@audio@@QAE@XZ ENDP		; audio::output::DirectSound::~DirectSound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\output\directsound.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DirectSound@output@audio@@QAE@XZ PROC		; audio::output::DirectSound::DirectSound
; _this$ = ecx

; 28   : DirectSound::DirectSound() : last_write_cursor(0),last_cursor_pos(0) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Interface@output@audio@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DirectSound@output@audio@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$atomic@H@std@@QAE@XZ		; std::atomic<int>::atomic<int>

; 29   :   window_handle_ = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 30   :   buffer_size_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 31   : 	lock = 0;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??4?$atomic@H@std@@QAEHH@Z		; std::atomic<int>::operator=

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0DirectSound@output@audio@@QAE@XZ ENDP		; audio::output::DirectSound::DirectSound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Interface@output@audio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Interface@output@audio@@QAE@XZ PROC			; audio::output::Interface::Interface, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Interface@output@audio@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Interface@output@audio@@QAE@XZ ENDP			; audio::output::Interface::Interface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thread
;	COMDAT ?sleep_until@this_thread@std@@YAXPBUxtime@@@Z
_TEXT	SEGMENT
__Now$1 = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
__Abs_time$ = 8						; size = 4
?sleep_until@this_thread@std@@YAXPBUxtime@@@Z PROC	; std::this_thread::sleep_until, COMDAT

; 135  : 	{	// sleep until _Abs_time

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 136  : 	if (::Concurrency::details::_CurrentScheduler::_Id() != -1)

	mov	esi, esp
	call	DWORD PTR __imp_?_Id@_CurrentScheduler@details@Concurrency@@SAIXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	je	SHORT $LN1@sleep_unti

; 137  : 		{
; 138  : 		stdext::threads::xtime _Now;
; 139  : 		stdext::threads::xtime_get(&_Now, stdext::threads::TIME_UTC);

	mov	esi, esp
	push	1
	lea	eax, DWORD PTR __Now$1[ebp]
	push	eax
	call	DWORD PTR __imp__xtime_get
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 		::Concurrency::wait(_Xtime_diff_to_millis2(_Abs_time, &_Now));

	mov	esi, esp
	lea	ecx, DWORD PTR __Now$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Abs_time$[ebp]
	push	edx
	call	DWORD PTR __imp___Xtime_diff_to_millis2
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp_?wait@Concurrency@@YAXI@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 		return;

	jmp	SHORT $LN2@sleep_unti
$LN1@sleep_unti:

; 142  : 		}
; 143  : 
; 144  : 	_Thrd_sleep(_Abs_time);

	mov	esi, esp
	mov	eax, DWORD PTR __Abs_time$[ebp]
	push	eax
	call	DWORD PTR __imp___Thrd_sleep
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sleep_unti:

; 145  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@sleep_unti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@sleep_unti:
	DD	1
	DD	$LN5@sleep_unti
$LN5@sleep_unti:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN4@sleep_unti
$LN4@sleep_unti:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	0
?sleep_until@this_thread@std@@YAXPBUxtime@@@Z ENDP	; std::this_thread::sleep_until
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??$?0_J@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?0_J@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z PROC ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64>, COMDAT
; _this$ = ecx

; 105  : 		{	// construct from representation

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 106  : 		static_assert(_Is_ratio<_Period>::value,
; 107  : 			"period not an instance of std::ratio");
; 108  : 		static_assert(0 < _Period::num,
; 109  : 			"duration negative or zero");
; 110  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0_J@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?time_since_epoch@?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?time_since_epoch@?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@XZ PROC ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_since_epoch, COMDAT
; _this$ = ecx

; 271  : 		{	// get duration from epoch

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 272  : 		return (_MyDur);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 273  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?time_since_epoch@?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QBE?AV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@XZ ENDP ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_since_epoch
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >, COMDAT
; _this$ = ecx

; 259  : 		{	// construct from a duration

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Other$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx

; 260  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ PROC ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count, COMDAT
; _this$ = ecx

; 130  : 		{	// get stored rep

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return (_MyRep);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx+4]

; 132  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?count@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QBE_JXZ ENDP ; std::chrono::duration<__int64,std::ratio<1,10000000> >::count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\chrono
;	COMDAT ?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
$T2 = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ PROC ; std::chrono::system_clock::now, COMDAT

; 705  : 		{	// get current time

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 706  : 		return (time_point(duration(_Xtime_get_ticks())));

	mov	esi, esp
	call	DWORD PTR __imp___Xtime_get_ticks
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T1[ebp], eax
	mov	DWORD PTR $T1[ebp+4], edx
	push	0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0_J@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QAE@AB_JPAPAX@Z ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64>
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QAE@ABV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 707  : 		}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ENDP ; std::chrono::system_clock::now
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 120  : 	_Ignore()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ?atomic_load@std@@YAHPBUatomic_int@1@@Z
_TEXT	SEGMENT
__Atom$ = 8						; size = 4
?atomic_load@std@@YAHPBUatomic_int@1@@Z PROC		; std::atomic_load, COMDAT

; 667  : 	{	// return value stored in *_Atom

	push	ebp
	mov	ebp, esp

; 668  : 	return atomic_load_explicit(_Atom, memory_order_seq_cst);

	push	5
	mov	eax, DWORD PTR __Atom$[ebp]
	push	eax
	call	?atomic_load_explicit@std@@YAHPBUatomic_int@1@W4memory_order@1@@Z ; std::atomic_load_explicit
	add	esp, 8

; 669  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?atomic_load@std@@YAHPBUatomic_int@1@@Z ENDP		; std::atomic_load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ?atomic_load_explicit@std@@YAHPBUatomic_int@1@W4memory_order@1@@Z
_TEXT	SEGMENT
__Atom$ = 8						; size = 4
__Order$ = 12						; size = 4
?atomic_load_explicit@std@@YAHPBUatomic_int@1@W4memory_order@1@@Z PROC ; std::atomic_load_explicit, COMDAT

; 655  : 	{	// return value held in *_Atom

	push	ebp
	mov	ebp, esp

; 656  : 	return _ATOMIC_LOAD(_Atom, _Order);

	mov	eax, DWORD PTR __Order$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Atom$[ebp]
	push	ecx
	call	?_Atomic_load_4@std@@YAKPCKW4memory_order@1@@Z ; std::_Atomic_load_4
	add	esp, 8

; 657  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?atomic_load_explicit@std@@YAHPBUatomic_int@1@W4memory_order@1@@Z ENDP ; std::atomic_load_explicit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ?atomic_store@std@@YAXPAUatomic_int@1@H@Z
_TEXT	SEGMENT
__Atom$ = 8						; size = 4
__Value$ = 12						; size = 4
?atomic_store@std@@YAXPAUatomic_int@1@H@Z PROC		; std::atomic_store, COMDAT

; 643  : 	{	// store _Value into *_Atom

	push	ebp
	mov	ebp, esp

; 644  : 	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);

	push	5
	mov	eax, DWORD PTR __Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Atom$[ebp]
	push	ecx
	call	?atomic_store_explicit@std@@YAXPAUatomic_int@1@HW4memory_order@1@@Z ; std::atomic_store_explicit
	add	esp, 12					; 0000000cH

; 645  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?atomic_store@std@@YAXPAUatomic_int@1@H@Z ENDP		; std::atomic_store
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ?atomic_store_explicit@std@@YAXPAUatomic_int@1@HW4memory_order@1@@Z
_TEXT	SEGMENT
__Atom$ = 8						; size = 4
__Value$ = 12						; size = 4
__Order$ = 16						; size = 4
?atomic_store_explicit@std@@YAXPAUatomic_int@1@HW4memory_order@1@@Z PROC ; std::atomic_store_explicit, COMDAT

; 630  : 	{	// store _Value into *_Atom

	push	ebp
	mov	ebp, esp

; 631  : 	assert(_ISIZE == sizeof (_ITYPE));
; 632  : 	_ATOMIC_STORE(_Atom, _Value, _Order);

	mov	eax, DWORD PTR __Order$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Value$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Atom$[ebp]
	push	edx
	call	?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z ; std::_Atomic_store_4
	add	esp, 12					; 0000000cH

; 633  : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?atomic_store_explicit@std@@YAXPAUatomic_int@1@HW4memory_order@1@@Z ENDP ; std::atomic_store_explicit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ??4?$atomic@H@std@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??4?$atomic@H@std@@QAEHH@Z PROC				; std::atomic<int>::operator=, COMDAT
; _this$ = ecx

; 273  : 		{	// assign from _Val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 274  : 		return _ATOMIC_ITYPE::operator=(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4atomic_int@std@@QAEHH@Z		; std::atomic_int::operator=

; 275  : 		}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$atomic@H@std@@QAEHH@Z ENDP				; std::atomic<int>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ??0?$atomic@H@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$atomic@H@std@@QAE@XZ PROC				; std::atomic<int>::atomic<int>, COMDAT
; _this$ = ecx

; 257  : 	atomic() _NOEXCEPT

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 258  : 		{	// default constructor
; 259  : 		_ATOMIC_ITYPE::operator=(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4atomic_int@std@@QAEHH@Z		; std::atomic_int::operator=

; 260  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$atomic@H@std@@QAE@XZ ENDP				; std::atomic<int>::atomic<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ??Batomic_int@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Batomic_int@std@@QBEHXZ PROC				; std::atomic_int::operator int, COMDAT
; _this$ = ecx

; 886  : 	{	// return value held in *this

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 	return atomic_load(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?atomic_load@std@@YAHPBUatomic_int@1@@Z	; std::atomic_load
	add	esp, 4

; 888  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Batomic_int@std@@QBEHXZ ENDP				; std::atomic_int::operator int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xxatomic
;	COMDAT ??4atomic_int@std@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Value$ = 8						; size = 4
??4atomic_int@std@@QAEHH@Z PROC				; std::atomic_int::operator=, COMDAT
; _this$ = ecx

; 841  : 	{	// assign _Value to *this

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 842  : 	atomic_store(this, _Value);

	mov	eax, DWORD PTR __Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?atomic_store@std@@YAXPAUatomic_int@1@H@Z ; std::atomic_store
	add	esp, 8

; 843  : 	return _Value;

	mov	eax, DWORD PTR __Value$[ebp]

; 844  : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4atomic_int@std@@QAEHH@Z ENDP				; std::atomic_int::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Load_seq_cst_4@std@@YAKPCK@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
__Value$ = -4						; size = 4
__Tgt$ = 8						; size = 4
?_Load_seq_cst_4@std@@YAKPCK@Z PROC			; std::_Load_seq_cst_4, COMDAT

; 1520 : 	{	/* load from *_Tgt atomically with

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1521 : 			sequentially consistent memory order */
; 1522 : 	_Uint4_t _Value;
; 1523 : 
; 1524 :  #if defined(_M_ARM)
; 1525 : 	_Memory_barrier();
; 1526 : 	_Value = __iso_volatile_load32((volatile int *)_Tgt);
; 1527 : 	_Memory_barrier();
; 1528 :  #else
; 1529 : 	_Value = _InterlockedOr((volatile long *)_Tgt, 0);

	xor	ecx, ecx
	mov	edx, DWORD PTR __Tgt$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
$LN3@Load_seq_c:
	mov	esi, eax
	or	esi, ecx
	lock	 cmpxchg DWORD PTR [edx], esi
	jne	SHORT $LN3@Load_seq_c
	mov	DWORD PTR __Value$[ebp], eax

; 1530 :  #endif
; 1531 : 
; 1532 : 	return (_Value);

	mov	eax, DWORD PTR __Value$[ebp]

; 1533 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Load_seq_cst_4@std@@YAKPCK@Z ENDP			; std::_Load_seq_cst_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Load_acquire_4@std@@YAKPCK@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
__Value$ = -4						; size = 4
__Tgt$ = 8						; size = 4
?_Load_acquire_4@std@@YAKPCK@Z PROC			; std::_Load_acquire_4, COMDAT

; 1505 : 	{	/* load from *_Tgt atomically with

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1506 : 			acquire memory order */
; 1507 : 	_Uint4_t _Value;
; 1508 : 
; 1509 :  #if defined(_M_ARM)
; 1510 : 	_Value = __iso_volatile_load32((volatile int *)_Tgt);
; 1511 : 	_Memory_barrier();
; 1512 :  #else
; 1513 : 	_Value = _InterlockedOr((volatile long *)_Tgt, 0);

	xor	ecx, ecx
	mov	edx, DWORD PTR __Tgt$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
$LN3@Load_acqui:
	mov	esi, eax
	or	esi, ecx
	lock	 cmpxchg DWORD PTR [edx], esi
	jne	SHORT $LN3@Load_acqui
	mov	DWORD PTR __Value$[ebp], eax

; 1514 :  #endif
; 1515 : 
; 1516 : 	return (_Value);

	mov	eax, DWORD PTR __Value$[ebp]

; 1517 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Load_acquire_4@std@@YAKPCK@Z ENDP			; std::_Load_acquire_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Load_relaxed_4@std@@YAKPCK@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
__Value$ = -4						; size = 4
__Tgt$ = 8						; size = 4
?_Load_relaxed_4@std@@YAKPCK@Z PROC			; std::_Load_relaxed_4, COMDAT

; 1491 : 	{	/* load from *_Tgt atomically with

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1492 : 			relaxed memory order */
; 1493 : 	_Uint4_t _Value;
; 1494 : 
; 1495 :  #if defined(_M_ARM)
; 1496 : 	_Value = __iso_volatile_load32((volatile int *)_Tgt);
; 1497 :  #else
; 1498 : 	_Value = _InterlockedOr((volatile long *)_Tgt, 0);

	xor	ecx, ecx
	mov	edx, DWORD PTR __Tgt$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
$LN3@Load_relax:
	mov	esi, eax
	or	esi, ecx
	lock	 cmpxchg DWORD PTR [edx], esi
	jne	SHORT $LN3@Load_relax
	mov	DWORD PTR __Value$[ebp], eax

; 1499 :  #endif
; 1500 : 
; 1501 : 	return (_Value);

	mov	eax, DWORD PTR __Value$[ebp]

; 1502 : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Load_relaxed_4@std@@YAKPCK@Z ENDP			; std::_Load_relaxed_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
__Tgt$ = 8						; size = 4
__Value$ = 12						; size = 4
__Order$ = 16						; size = 4
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z PROC	; std::_Atomic_store_4, COMDAT

; 1471 : 	{	/* store _Value atomically */

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1472 : 	switch(_Order)

	mov	eax, DWORD PTR __Order$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@Atomic_sto
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN3@Atomic_sto
	cmp	DWORD PTR tv64[ebp], 5
	je	SHORT $LN2@Atomic_sto
	jmp	SHORT $LN1@Atomic_sto
$LN4@Atomic_sto:

; 1473 : 		{
; 1474 : 		case memory_order_relaxed:
; 1475 : 			_Store_relaxed_4(_Tgt, _Value);

	mov	ecx, DWORD PTR __Value$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Tgt$[ebp]
	push	edx
	call	?_Store_relaxed_4@std@@YAXPCKK@Z	; std::_Store_relaxed_4
	add	esp, 8

; 1476 : 			break;

	jmp	$LN7@Atomic_sto
$LN3@Atomic_sto:

; 1477 : 		case memory_order_release:
; 1478 : 			_Store_release_4(_Tgt, _Value);

	mov	eax, DWORD PTR __Value$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Tgt$[ebp]
	push	ecx
	call	?_Store_release_4@std@@YAXPCKK@Z	; std::_Store_release_4
	add	esp, 8

; 1479 : 			break;

	jmp	$LN7@Atomic_sto
$LN2@Atomic_sto:

; 1480 : 		case memory_order_seq_cst:
; 1481 : 			_Store_seq_cst_4(_Tgt, _Value);

	mov	edx, DWORD PTR __Value$[ebp]
	push	edx
	mov	eax, DWORD PTR __Tgt$[ebp]
	push	eax
	call	?_Store_seq_cst_4@std@@YAXPCKK@Z	; std::_Store_seq_cst_4
	add	esp, 8

; 1482 : 			break;

	jmp	$LN7@Atomic_sto
$LN1@Atomic_sto:

; 1483 : 		default:
; 1484 : 			_INVALID_MEMORY_ORDER;

	mov	esi, esp
	push	1484					; 000005ccH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	ecx, ecx
	je	SHORT $LN9@Atomic_sto
	xor	edx, edx
	jne	SHORT $LN10@Atomic_sto
$LN9@Atomic_sto:
	mov	esi, esp
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1484					; 000005ccH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN10@Atomic_sto
	int	3
$LN10@Atomic_sto:
	mov	esi, esp
	push	0
	push	1484					; 000005ccH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@Atomic_sto:

; 1485 : 			break;
; 1486 : 		}
; 1487 : 	}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z ENDP	; std::_Atomic_store_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Store_seq_cst_4@std@@YAXPCKK@Z
_TEXT	SEGMENT
__Tgt$ = 8						; size = 4
__Value$ = 12						; size = 4
?_Store_seq_cst_4@std@@YAXPCKK@Z PROC			; std::_Store_seq_cst_4, COMDAT

; 1458 : 	{	/* store _Value atomically with

	push	ebp
	mov	ebp, esp

; 1459 : 			sequentially consistent memory order */
; 1460 :  #if defined(_M_ARM)
; 1461 : 	_Memory_barrier();
; 1462 : 	__iso_volatile_store32((volatile int *)_Tgt, _Value);
; 1463 : 	_Memory_barrier();
; 1464 :  #else
; 1465 : 	_InterlockedExchange((volatile long *)_Tgt, _Value);

	mov	eax, DWORD PTR __Value$[ebp]
	mov	ecx, DWORD PTR __Tgt$[ebp]
	xchg	DWORD PTR [ecx], eax

; 1466 :  #endif
; 1467 : 	}

	pop	ebp
	ret	0
?_Store_seq_cst_4@std@@YAXPCKK@Z ENDP			; std::_Store_seq_cst_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Store_release_4@std@@YAXPCKK@Z
_TEXT	SEGMENT
__Tgt$ = 8						; size = 4
__Value$ = 12						; size = 4
?_Store_release_4@std@@YAXPCKK@Z PROC			; std::_Store_release_4, COMDAT

; 1436 : 	{	/* store _Value atomically with release memory order */

	push	ebp
	mov	ebp, esp

; 1437 :  #if defined(_M_ARM)
; 1438 : 	_Memory_barrier();
; 1439 : 	__iso_volatile_store32((volatile int *)_Tgt, _Value);
; 1440 :  #elif _MS_32
; 1441 : 	_Compiler_barrier();
; 1442 : 	__asm
; 1443 : 		{
; 1444 : 		mov eax, _Value;

	mov	eax, DWORD PTR __Value$[ebp]

; 1445 : 		mov edx, _Tgt;

	mov	edx, DWORD PTR __Tgt$[ebp]

; 1446 : 		mov [edx], eax;

	mov	DWORD PTR [edx], eax

; 1447 : 		}
; 1448 : 	_Compiler_barrier();
; 1449 : 
; 1450 :  #elif _MS_64
; 1451 : 	_Compiler_barrier();
; 1452 : 	*_Tgt = _Value;
; 1453 : 	_Compiler_barrier();
; 1454 :  #endif /* _MS_32 */
; 1455 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Store_release_4@std@@YAXPCKK@Z ENDP			; std::_Store_release_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Store_relaxed_4@std@@YAXPCKK@Z
_TEXT	SEGMENT
__Tgt$ = 8						; size = 4
__Value$ = 12						; size = 4
?_Store_relaxed_4@std@@YAXPCKK@Z PROC			; std::_Store_relaxed_4, COMDAT

; 1415 : 	{	/* store _Value atomically with relaxed memory order */

	push	ebp
	mov	ebp, esp

; 1416 :  #if defined(_M_ARM)
; 1417 : 	__iso_volatile_store32((volatile int *)_Tgt, _Value);
; 1418 :  #elif _MS_32
; 1419 : 	_Compiler_barrier();
; 1420 : 	__asm
; 1421 : 		{
; 1422 : 		mov eax, _Value;

	mov	eax, DWORD PTR __Value$[ebp]

; 1423 : 		mov edx, _Tgt;

	mov	edx, DWORD PTR __Tgt$[ebp]

; 1424 : 		mov [edx], eax;

	mov	DWORD PTR [edx], eax

; 1425 : 		}
; 1426 : 	_Compiler_barrier();
; 1427 : 
; 1428 :  #elif _MS_64
; 1429 : 	_Compiler_barrier();
; 1430 : 	*_Tgt = _Value;
; 1431 : 	_Compiler_barrier();
; 1432 :  #endif /* _MS_32 */
; 1433 : 	}

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?_Store_relaxed_4@std@@YAXPCKK@Z ENDP			; std::_Store_relaxed_4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xatomic.h
;	COMDAT ?_Atomic_load_4@std@@YAKPCKW4memory_order@1@@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
__Tgt$ = 8						; size = 4
__Order$ = 12						; size = 4
?_Atomic_load_4@std@@YAKPCKW4memory_order@1@@Z PROC	; std::_Atomic_load_4, COMDAT

; 1537 : 	{	/* load from *_Tgt atomically */

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 1538 : 	switch(_Order)

	mov	eax, DWORD PTR __Order$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 5
	ja	SHORT $LN1@Atomic_loa
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN11@Atomic_loa[ecx*4]
$LN4@Atomic_loa:

; 1539 : 		{
; 1540 : 		case memory_order_relaxed:
; 1541 : 			return (_Load_relaxed_4(_Tgt));

	mov	edx, DWORD PTR __Tgt$[ebp]
	push	edx
	call	?_Load_relaxed_4@std@@YAKPCK@Z		; std::_Load_relaxed_4
	add	esp, 4
	jmp	$LN7@Atomic_loa
$LN3@Atomic_loa:

; 1542 : 
; 1543 : 		case memory_order_consume:
; 1544 : 		case memory_order_acquire:
; 1545 : 			return (_Load_acquire_4(_Tgt));

	mov	eax, DWORD PTR __Tgt$[ebp]
	push	eax
	call	?_Load_acquire_4@std@@YAKPCK@Z		; std::_Load_acquire_4
	add	esp, 4
	jmp	$LN7@Atomic_loa
$LN2@Atomic_loa:

; 1546 : 
; 1547 : 		case memory_order_seq_cst:
; 1548 : 			return (_Load_seq_cst_4(_Tgt));

	mov	ecx, DWORD PTR __Tgt$[ebp]
	push	ecx
	call	?_Load_seq_cst_4@std@@YAKPCK@Z		; std::_Load_seq_cst_4
	add	esp, 4
	jmp	$LN7@Atomic_loa
$LN1@Atomic_loa:

; 1549 : 
; 1550 : 		default:
; 1551 : 			_INVALID_MEMORY_ORDER;

	mov	esi, esp
	push	1551					; 0000060fH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
	test	edx, edx
	je	SHORT $LN9@Atomic_loa
	xor	eax, eax
	jne	SHORT $LN10@Atomic_loa
$LN9@Atomic_loa:
	mov	esi, esp
	push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	push	0
	push	1551					; 0000060fH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN10@Atomic_loa
	int	3
$LN10@Atomic_loa:
	mov	esi, esp
	push	0
	push	1551					; 0000060fH
	push	OFFSET ??_C@_1JC@OFINEDFE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1CI@NMHCEFB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAl?$AAo?$AAa?$AAd?$AA_?$AA4?$AA?$AA@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1552 : 			return (0);

	xor	eax, eax
$LN7@Atomic_loa:

; 1553 : 		}
; 1554 : 	}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@Atomic_loa:
	DD	$LN4@Atomic_loa
	DD	$LN3@Atomic_loa
	DD	$LN3@Atomic_loa
	DD	$LN1@Atomic_loa
	DD	$LN1@Atomic_loa
	DD	$LN2@Atomic_loa
?_Atomic_load_4@std@@YAKPCKW4memory_order@1@@Z ENDP	; std::_Atomic_load_4
_TEXT	ENDS
END

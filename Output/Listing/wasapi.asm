; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\audio\wasapi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__GUID_a95664d2_9614_4f35_a746_de8db63617e6
PUBLIC	__GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
PUBLIC	__GUID_f294acfc_3146_4483_a7bf_addca7c260e2
PUBLIC	?device_enumurator@@3PAUIMMDeviceEnumerator@@A	; device_enumurator
PUBLIC	?device@@3PAUIMMDevice@@A			; device
PUBLIC	?audio_client@@3PAUIAudioClient@@A		; audio_client
PUBLIC	?render_client@@3PAUIAudioRenderClient@@A	; render_client
PUBLIC	?pwfx@@3PAUtWAVEFORMATEX@@A			; pwfx
PUBLIC	?bufferFrameCount@@3IA				; bufferFrameCount
PUBLIC	?numFramesAvailable@@3IA			; numFramesAvailable
PUBLIC	?numFramesPadding@@3IA				; numFramesPadding
PUBLIC	?hnsRequestedDuration@@3_JA			; hnsRequestedDuration
PUBLIC	?hnsActualDuration@@3_JA			; hnsActualDuration
PUBLIC	?written_samples@@3IA				; written_samples
PUBLIC	?fmt@@3UWAVEFORMATEXTENSIBLE@@A			; fmt
PUBLIC	?audio_block@@3PAEA				; audio_block
PUBLIC	__GUID_00000001_0000_0010_8000_00aa00389b71
PUBLIC	__GUID_bcde0395_e52f_467c_8e3d_c4579291692e
_BSS	SEGMENT
?device_enumurator@@3PAUIMMDeviceEnumerator@@A DD 01H DUP (?) ; device_enumurator
?device@@3PAUIMMDevice@@A DD 01H DUP (?)		; device
?audio_client@@3PAUIAudioClient@@A DD 01H DUP (?)	; audio_client
?render_client@@3PAUIAudioRenderClient@@A DD 01H DUP (?) ; render_client
?pwfx@@3PAUtWAVEFORMATEX@@A DD 01H DUP (?)		; pwfx
?bufferFrameCount@@3IA DD 01H DUP (?)			; bufferFrameCount
?numFramesAvailable@@3IA DD 01H DUP (?)			; numFramesAvailable
?numFramesPadding@@3IA DD 01H DUP (?)			; numFramesPadding
?hnsActualDuration@@3_JA DQ 01H DUP (?)			; hnsActualDuration
?written_samples@@3IA DD 01H DUP (?)			; written_samples
?fmt@@3UWAVEFORMATEXTENSIBLE@@A DB 028H DUP (?)		; fmt
?audio_block@@3PAEA DD 01H DUP (?)			; audio_block
_BSS	ENDS
;	COMDAT __GUID_bcde0395_e52f_467c_8e3d_c4579291692e
CONST	SEGMENT
__GUID_bcde0395_e52f_467c_8e3d_c4579291692e DD 0bcde0395H
	DW	0e52fH
	DW	0467cH
	DB	08eH
	DB	03dH
	DB	0c4H
	DB	057H
	DB	092H
	DB	091H
	DB	069H
	DB	02eH
CONST	ENDS
;	COMDAT __GUID_00000001_0000_0010_8000_00aa00389b71
CONST	SEGMENT
__GUID_00000001_0000_0010_8000_00aa00389b71 DD 01H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
CONST	ENDS
_DATA	SEGMENT
?hnsRequestedDuration@@3_JA DQ 00000000001e8480H	; hnsRequestedDuration
_DATA	ENDS
;	COMDAT __GUID_f294acfc_3146_4483_a7bf_addca7c260e2
CONST	SEGMENT
__GUID_f294acfc_3146_4483_a7bf_addca7c260e2 DD 0f294acfcH
	DW	03146H
	DW	04483H
	DB	0a7H
	DB	0bfH
	DB	0adH
	DB	0dcH
	DB	0a7H
	DB	0c2H
	DB	060H
	DB	0e2H
CONST	ENDS
;	COMDAT __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
CONST	SEGMENT
__GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2 DD 01cb9ad4cH
	DW	0dbfaH
	DW	04c32H
	DB	0b1H
	DB	078H
	DB	0c2H
	DB	0f5H
	DB	068H
	DB	0a7H
	DB	03H
	DB	0b2H
CONST	ENDS
;	COMDAT __GUID_a95664d2_9614_4f35_a746_de8db63617e6
CONST	SEGMENT
__GUID_a95664d2_9614_4f35_a746_de8db63617e6 DD 0a95664d2H
	DW	09614H
	DW	04f35H
	DB	0a7H
	DB	046H
	DB	0deH
	DB	08dH
	DB	0b6H
	DB	036H
	DB	017H
	DB	0e6H
CONST	ENDS
PUBLIC	?WASAPI_GetSampleRate@@YAHXZ			; WASAPI_GetSampleRate
PUBLIC	?WASAPI_Initialize@@YAHHHH@Z			; WASAPI_Initialize
PUBLIC	?WASAPI_Deinitialize@@YAHXZ			; WASAPI_Deinitialize
PUBLIC	??$SafeRelease@UIMMDeviceEnumerator@@@@YAXPAPAUIMMDeviceEnumerator@@@Z ; SafeRelease<IMMDeviceEnumerator>
PUBLIC	??$SafeRelease@UIMMDevice@@@@YAXPAPAUIMMDevice@@@Z ; SafeRelease<IMMDevice>
PUBLIC	??$SafeRelease@UIAudioClient@@@@YAXPAPAUIAudioClient@@@Z ; SafeRelease<IAudioClient>
PUBLIC	??$SafeRelease@UIAudioRenderClient@@@@YAXPAPAUIAudioRenderClient@@@Z ; SafeRelease<IAudioRenderClient>
PUBLIC	?WASAPI_WriteData@@YAHPAXI@Z			; WASAPI_WriteData
PUBLIC	_IID_IMMDeviceEnumerator
PUBLIC	_CLSID_MMDeviceEnumerator
PUBLIC	_IID_IAudioClient
PUBLIC	_IID_IAudioRenderClient
PUBLIC	__real@416312d000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
EXTRN	__imp__CoTaskMemFree@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__ftol2:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_IID_IMMDeviceEnumerator DB 010H DUP (?)
_CLSID_MMDeviceEnumerator DB 010H DUP (?)
_IID_IAudioClient DB 010H DUP (?)
_IID_IAudioRenderClient DB 010H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_CLSID_MMDeviceEnumerator$initializer$ DD FLAT:??__ECLSID_MMDeviceEnumerator@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@416312d000000000
CONST	SEGMENT
__real@416312d000000000 DQ 0416312d000000000r	; 1e+007
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
CRT$XCU	SEGMENT
_IID_IMMDeviceEnumerator$initializer$ DD FLAT:??__EIID_IMMDeviceEnumerator@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_IID_IAudioClient$initializer$ DD FLAT:??__EIID_IAudioClient@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_IID_IAudioRenderClient$initializer$ DD FLAT:??__EIID_IAudioRenderClient@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
_TEXT	SEGMENT
_pData$1 = -8						; size = 4
_data$ = 8						; size = 4
_sample_count$ = 12					; size = 4
?WASAPI_WriteData@@YAHPAXI@Z PROC			; WASAPI_WriteData

; 98   : int WASAPI_WriteData(void* data,size_t sample_count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 99   : 
; 100  : 
; 101  :   
; 102  :   memcpy(&audio_block[written_samples*(fmt.Format.wBitsPerSample>>3)],data,sample_count*(fmt.Format.wBitsPerSample>>3));

	movzx	eax, WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+14
	sar	eax, 3
	imul	eax, DWORD PTR _sample_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	movzx	edx, WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+14
	sar	edx, 3
	imul	edx, DWORD PTR ?written_samples@@3IA	; written_samples
	add	edx, DWORD PTR ?audio_block@@3PAEA	; audio_block
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 103  :   //audio_block += sample_count*fmt.Format.nBlockAlign;
; 104  : 
; 105  : 
; 106  :   written_samples += sample_count;

	mov	eax, DWORD PTR ?written_samples@@3IA	; written_samples
	add	eax, DWORD PTR _sample_count$[ebp]
	mov	DWORD PTR ?written_samples@@3IA, eax	; written_samples

; 107  : 
; 108  :   if (written_samples >= bufferFrameCount) {

	mov	ecx, DWORD PTR ?written_samples@@3IA	; written_samples
	cmp	ecx, DWORD PTR ?bufferFrameCount@@3IA	; bufferFrameCount
	jb	$LN2@WASAPI_Wri

; 109  :     BYTE *pData;
; 110  :     render_client->GetBuffer(sample_count, &pData);

	mov	esi, esp
	lea	edx, DWORD PTR _pData$1[ebp]
	push	edx
	mov	eax, DWORD PTR _sample_count$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  :     if (pData)

	cmp	DWORD PTR _pData$1[ebp], 0
	je	SHORT $LN1@WASAPI_Wri

; 112  :     memcpy(pData,audio_block,bufferFrameCount*(fmt.Format.wBitsPerSample>>3));

	movzx	edx, WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+14
	sar	edx, 3
	imul	edx, DWORD PTR ?bufferFrameCount@@3IA	; bufferFrameCount
	push	edx
	mov	eax, DWORD PTR ?audio_block@@3PAEA	; audio_block
	push	eax
	mov	ecx, DWORD PTR _pData$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@WASAPI_Wri:

; 113  :     render_client->ReleaseBuffer(sample_count, 0);

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _sample_count$[ebp]
	push	edx
	mov	eax, DWORD PTR ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  :   
; 115  :     written_samples = 0;

	mov	DWORD PTR ?written_samples@@3IA, 0	; written_samples

; 116  :     audio_client->Start();

	mov	ecx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	eax, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@WASAPI_Wri:

; 117  :   }
; 118  :   return S_OK;

	xor	eax, eax

; 119  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@WASAPI_Wri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@WASAPI_Wri:
	DD	1
	DD	$LN6@WASAPI_Wri
$LN6@WASAPI_Wri:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@WASAPI_Wri
$LN5@WASAPI_Wri:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?WASAPI_WriteData@@YAHPAXI@Z ENDP			; WASAPI_WriteData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIAudioRenderClient@@@@YAXPAPAUIAudioRenderClient@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIAudioRenderClient@@@@YAXPAPAUIAudioRenderClient@@@Z PROC ; SafeRelease<IAudioRenderClient>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIAudioRenderClient@@@@YAXPAPAUIAudioRenderClient@@@Z ENDP ; SafeRelease<IAudioRenderClient>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIAudioClient@@@@YAXPAPAUIAudioClient@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIAudioClient@@@@YAXPAPAUIAudioClient@@@Z PROC ; SafeRelease<IAudioClient>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIAudioClient@@@@YAXPAPAUIAudioClient@@@Z ENDP ; SafeRelease<IAudioClient>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIMMDevice@@@@YAXPAPAUIMMDevice@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIMMDevice@@@@YAXPAPAUIMMDevice@@@Z PROC	; SafeRelease<IMMDevice>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIMMDevice@@@@YAXPAPAUIMMDevice@@@Z ENDP	; SafeRelease<IMMDevice>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIMMDeviceEnumerator@@@@YAXPAPAUIMMDeviceEnumerator@@@Z
_TEXT	SEGMENT
_ppInterfaceToRelease$ = 8				; size = 4
??$SafeRelease@UIMMDeviceEnumerator@@@@YAXPAPAUIMMDeviceEnumerator@@@Z PROC ; SafeRelease<IMMDeviceEnumerator>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

	push	ebp
	mov	ebp, esp
	push	esi

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToRelease$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeReleas:

; 33   :     }
; 34   : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$SafeRelease@UIMMDeviceEnumerator@@@@YAXPAPAUIMMDeviceEnumerator@@@Z ENDP ; SafeRelease<IMMDeviceEnumerator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
?WASAPI_Deinitialize@@YAHXZ PROC			; WASAPI_Deinitialize

; 87   : int WASAPI_Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 88   :   CoTaskMemFree(pwfx);

	mov	esi, esp
	mov	eax, DWORD PTR ?pwfx@@3PAUtWAVEFORMATEX@@A ; pwfx
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 89   :   SafeRelease(&device_enumurator);

	push	OFFSET ?device_enumurator@@3PAUIMMDeviceEnumerator@@A ; device_enumurator
	call	??$SafeRelease@UIMMDeviceEnumerator@@@@YAXPAPAUIMMDeviceEnumerator@@@Z ; SafeRelease<IMMDeviceEnumerator>
	add	esp, 4

; 90   :   SafeRelease(&device);

	push	OFFSET ?device@@3PAUIMMDevice@@A	; device
	call	??$SafeRelease@UIMMDevice@@@@YAXPAPAUIMMDevice@@@Z ; SafeRelease<IMMDevice>
	add	esp, 4

; 91   :   SafeRelease(&audio_client);

	push	OFFSET ?audio_client@@3PAUIAudioClient@@A ; audio_client
	call	??$SafeRelease@UIAudioClient@@@@YAXPAPAUIAudioClient@@@Z ; SafeRelease<IAudioClient>
	add	esp, 4

; 92   :   SafeRelease(&render_client);

	push	OFFSET ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	call	??$SafeRelease@UIAudioRenderClient@@@@YAXPAPAUIAudioRenderClient@@@Z ; SafeRelease<IAudioRenderClient>
	add	esp, 4

; 93   :   delete [] audio_block;

	mov	ecx, DWORD PTR ?audio_block@@3PAEA	; audio_block
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 94   :   return S_OK;

	xor	eax, eax

; 95   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WASAPI_Deinitialize@@YAHXZ ENDP			; WASAPI_Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
_TEXT	SEGMENT
tv289 = -28						; size = 8
tv284 = -20						; size = 4
tv278 = -16						; size = 4
tv74 = -12						; size = 4
$T1 = -8						; size = 4
_hr$ = -4						; size = 4
_rate$ = 8						; size = 4
_channels$ = 12						; size = 4
_bits$ = 16						; size = 4
?WASAPI_Initialize@@YAHHHH@Z PROC			; WASAPI_Initialize

; 38   : int WASAPI_Initialize(int rate,int channels,int bits) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 39   :   
; 40   :   //WAVEFORMATEX* closest_fmt = (WAVEFORMATEX*)CoTaskMemAlloc(sizeof(WAVEFORMATEXTENSIBLE));
; 41   :  // WAVEFORMATEX** pclosest_fmt = &closest_fmt;
; 42   :   fmt.Format.wFormatTag			= WAVE_FORMAT_EXTENSIBLE;

	mov	eax, 65534				; 0000fffeH
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A, ax

; 43   :   fmt.Format.nChannels				= channels;

	mov	cx, WORD PTR _channels$[ebp]
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+2, cx

; 44   :   fmt.Format.nSamplesPerSec	= rate;

	mov	edx, DWORD PTR _rate$[ebp]
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+4, edx

; 45   :   fmt.Format.wBitsPerSample	= (bits+7)&~7;

	mov	eax, DWORD PTR _bits$[ebp]
	add	eax, 7
	and	eax, -8					; fffffff8H
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+14, ax

; 46   :   fmt.Format.nBlockAlign			= channels * fmt.Format.wBitsPerSample>>3;

	movzx	ecx, WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+14
	imul	ecx, DWORD PTR _channels$[ebp]
	sar	ecx, 3
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+12, cx

; 47   :   fmt.Format.nAvgBytesPerSec	= fmt.Format.nBlockAlign * fmt.Format.nSamplesPerSec;

	movzx	edx, WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+12
	imul	edx, DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+4
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+8, edx

; 48   :   fmt.Format.cbSize					= 22;

	mov	eax, 22					; 00000016H
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+16, ax

; 49   :   fmt.Samples.wValidBitsPerSample	= bits;

	mov	cx, WORD PTR _bits$[ebp]
	mov	WORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+18, cx

; 50   : 	fmt.dwChannelMask					= channels==2 ? 3 : 4;	//Select left & right (stereo) or center (mono)

	cmp	DWORD PTR _channels$[ebp], 2
	jne	SHORT $LN9@WASAPI_Ini
	mov	DWORD PTR tv74[ebp], 3
	jmp	SHORT $LN10@WASAPI_Ini
$LN9@WASAPI_Ini:
	mov	DWORD PTR tv74[ebp], 4
$LN10@WASAPI_Ini:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+20, edx

; 51   : 	fmt.SubFormat						= KSDATAFORMAT_SUBTYPE_PCM;

	mov	eax, DWORD PTR __GUID_00000001_0000_0010_8000_00aa00389b71
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+24, eax
	mov	ecx, DWORD PTR __GUID_00000001_0000_0010_8000_00aa00389b71+4
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+28, ecx
	mov	edx, DWORD PTR __GUID_00000001_0000_0010_8000_00aa00389b71+8
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+32, edx
	mov	eax, DWORD PTR __GUID_00000001_0000_0010_8000_00aa00389b71+12
	mov	DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+36, eax

; 52   :   //pwfx = &fmt.Format;
; 53   :   HRESULT hr;
; 54   :   hr = CoCreateInstance(CLSID_MMDeviceEnumerator,NULL,CLSCTX_ALL,IID_IMMDeviceEnumerator,(void**)&device_enumurator);

	mov	esi, esp
	push	OFFSET ?device_enumurator@@3PAUIMMDeviceEnumerator@@A ; device_enumurator
	push	OFFSET _IID_IMMDeviceEnumerator
	push	23					; 00000017H
	push	0
	push	OFFSET _CLSID_MMDeviceEnumerator
	call	DWORD PTR __imp__CoCreateInstance@20
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 55   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN6@WASAPI_Ini:

; 56   :   hr = device_enumurator->GetDefaultAudioEndpoint(eRender,eConsole,&device);

	mov	esi, esp
	push	OFFSET ?device@@3PAUIMMDevice@@A	; device
	push	0
	push	0
	mov	ecx, DWORD PTR ?device_enumurator@@3PAUIMMDeviceEnumerator@@A ; device_enumurator
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?device_enumurator@@3PAUIMMDeviceEnumerator@@A ; device_enumurator
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 57   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN5@WASAPI_Ini:

; 58   :   hr = device->Activate(IID_IAudioClient, CLSCTX_ALL,NULL, (void**)&audio_client);

	mov	esi, esp
	push	OFFSET ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	0
	push	23					; 00000017H
	push	OFFSET _IID_IAudioClient
	mov	edx, DWORD PTR ?device@@3PAUIMMDevice@@A ; device
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?device@@3PAUIMMDevice@@A ; device
	push	ecx
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 59   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN4@WASAPI_Ini:

; 60   :   hr = audio_client->GetMixFormat(&pwfx);

	mov	esi, esp
	push	OFFSET ?pwfx@@3PAUtWAVEFORMATEX@@A	; pwfx
	mov	eax, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 61   :   //if (FAILED(hr)) return S_FALSE;
; 62   :   //hr = audio_client->IsFormatSupported(AUDCLNT_SHAREMODE_SHARED,(WAVEFORMATEX*)&fmt,pclosest_fmt);
; 63   :   //hr = audio_client->IsFormatSupported(AUDCLNT_SHAREMODE_EXCLUSIVE,(WAVEFORMATEX*)&fmt,NULL);
; 64   :   //CoTaskMemFree(closest_fmt);
; 65   :   hr = audio_client->Initialize(AUDCLNT_SHAREMODE_SHARED,0,hnsRequestedDuration,0,pwfx,NULL);

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR ?pwfx@@3PAUtWAVEFORMATEX@@A ; pwfx
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR ?hnsRequestedDuration@@3_JA+4
	push	edx
	mov	eax, DWORD PTR ?hnsRequestedDuration@@3_JA
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 66   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN3@WASAPI_Ini:

; 67   :   //hr = pMySource->SetFormat(pwfx);
; 68   :   //if (FAILED(hr)) return S_FALSE;
; 69   : 
; 70   :   // Get the actual size of the allocated buffer.
; 71   :   hr = audio_client->GetBufferSize(&bufferFrameCount);

	mov	esi, esp
	push	OFFSET ?bufferFrameCount@@3IA		; bufferFrameCount
	mov	edx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 72   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN2@WASAPI_Ini:

; 73   : 
; 74   :   hr = audio_client->GetService(IID_IAudioRenderClient,(void**)&render_client);

	mov	esi, esp
	push	OFFSET ?render_client@@3PAUIAudioRenderClient@@A ; render_client
	push	OFFSET _IID_IAudioRenderClient
	mov	eax, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR ?audio_client@@3PAUIAudioClient@@A ; audio_client
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 75   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@WASAPI_Ini
	mov	eax, 1
	jmp	$LN7@WASAPI_Ini
$LN1@WASAPI_Ini:

; 76   : 
; 77   :   hnsActualDuration = REFERENCE_TIME((double)REFTIMES_PER_SEC *
; 78   :                         bufferFrameCount / fmt.Format.nSamplesPerSec);

	mov	ecx, DWORD PTR ?bufferFrameCount@@3IA	; bufferFrameCount
	mov	DWORD PTR tv278[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv278[ebp]
	mov	edx, DWORD PTR tv278[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	mulsd	xmm0, QWORD PTR __real@416312d000000000
	mov	eax, DWORD PTR ?fmt@@3UWAVEFORMATEXTENSIBLE@@A+4
	mov	DWORD PTR tv284[ebp], eax
	cvtsi2sd xmm1, DWORD PTR tv284[ebp]
	mov	ecx, DWORD PTR tv284[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	divsd	xmm0, xmm1
	movsd	QWORD PTR tv289[ebp], xmm0
	fld	QWORD PTR tv289[ebp]
	call	__ftol2
	mov	DWORD PTR ?hnsActualDuration@@3_JA, eax
	mov	DWORD PTR ?hnsActualDuration@@3_JA+4, edx

; 79   : 
; 80   :   written_samples = 0;

	mov	DWORD PTR ?written_samples@@3IA, 0	; written_samples

; 81   : 
; 82   :   audio_block = new BYTE[bufferFrameCount*pwfx->nBlockAlign];

	mov	edx, DWORD PTR ?pwfx@@3PAUtWAVEFORMATEX@@A ; pwfx
	movzx	eax, WORD PTR [edx+12]
	imul	eax, DWORD PTR ?bufferFrameCount@@3IA	; bufferFrameCount
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?audio_block@@3PAEA, ecx	; audio_block

; 83   : 
; 84   :   return S_OK;

	xor	eax, eax
$LN7@WASAPI_Ini:

; 85   : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?WASAPI_Initialize@@YAHHHH@Z ENDP			; WASAPI_Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
_TEXT	SEGMENT
?WASAPI_GetSampleRate@@YAHXZ PROC			; WASAPI_GetSampleRate

; 34   : int WASAPI_GetSampleRate() {

	push	ebp
	mov	ebp, esp

; 35   :   return pwfx->nSamplesPerSec;

	mov	eax, DWORD PTR ?pwfx@@3PAUtWAVEFORMATEX@@A ; pwfx
	mov	eax, DWORD PTR [eax+4]

; 36   : }

	pop	ebp
	ret	0
?WASAPI_GetSampleRate@@YAHXZ ENDP			; WASAPI_GetSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
;	COMDAT ??__EIID_IAudioRenderClient@@YAXXZ
text$yc	SEGMENT
??__EIID_IAudioRenderClient@@YAXXZ PROC			; `dynamic initializer for 'IID_IAudioRenderClient'', COMDAT

; 14   : const IID IID_IAudioRenderClient = __uuidof(IAudioRenderClient);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2
	mov	DWORD PTR _IID_IAudioRenderClient, eax
	mov	ecx, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+4
	mov	DWORD PTR _IID_IAudioRenderClient+4, ecx
	mov	edx, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+8
	mov	DWORD PTR _IID_IAudioRenderClient+8, edx
	mov	eax, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+12
	mov	DWORD PTR _IID_IAudioRenderClient+12, eax
	pop	ebp
	ret	0
??__EIID_IAudioRenderClient@@YAXXZ ENDP			; `dynamic initializer for 'IID_IAudioRenderClient''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
;	COMDAT ??__EIID_IAudioClient@@YAXXZ
text$yc	SEGMENT
??__EIID_IAudioClient@@YAXXZ PROC			; `dynamic initializer for 'IID_IAudioClient'', COMDAT

; 13   : const IID IID_IAudioClient = __uuidof(IAudioClient);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
	mov	DWORD PTR _IID_IAudioClient, eax
	mov	ecx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+4
	mov	DWORD PTR _IID_IAudioClient+4, ecx
	mov	edx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+8
	mov	DWORD PTR _IID_IAudioClient+8, edx
	mov	eax, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+12
	mov	DWORD PTR _IID_IAudioClient+12, eax
	pop	ebp
	ret	0
??__EIID_IAudioClient@@YAXXZ ENDP			; `dynamic initializer for 'IID_IAudioClient''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
;	COMDAT ??__EIID_IMMDeviceEnumerator@@YAXXZ
text$yc	SEGMENT
??__EIID_IMMDeviceEnumerator@@YAXXZ PROC		; `dynamic initializer for 'IID_IMMDeviceEnumerator'', COMDAT

; 12   : const IID IID_IMMDeviceEnumerator = __uuidof(IMMDeviceEnumerator);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6
	mov	DWORD PTR _IID_IMMDeviceEnumerator, eax
	mov	ecx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+4
	mov	DWORD PTR _IID_IMMDeviceEnumerator+4, ecx
	mov	edx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+8
	mov	DWORD PTR _IID_IMMDeviceEnumerator+8, edx
	mov	eax, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+12
	mov	DWORD PTR _IID_IMMDeviceEnumerator+12, eax
	pop	ebp
	ret	0
??__EIID_IMMDeviceEnumerator@@YAXXZ ENDP		; `dynamic initializer for 'IID_IMMDeviceEnumerator''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\wasapi.cpp
;	COMDAT ??__ECLSID_MMDeviceEnumerator@@YAXXZ
text$yc	SEGMENT
??__ECLSID_MMDeviceEnumerator@@YAXXZ PROC		; `dynamic initializer for 'CLSID_MMDeviceEnumerator'', COMDAT

; 11   : const CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e
	mov	DWORD PTR _CLSID_MMDeviceEnumerator, eax
	mov	ecx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+4
	mov	DWORD PTR _CLSID_MMDeviceEnumerator+4, ecx
	mov	edx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+8
	mov	DWORD PTR _CLSID_MMDeviceEnumerator+8, edx
	mov	eax, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+12
	mov	DWORD PTR _CLSID_MMDeviceEnumerator+12, eax
	pop	ebp
	ret	0
??__ECLSID_MMDeviceEnumerator@@YAXXZ ENDP		; `dynamic initializer for 'CLSID_MMDeviceEnumerator''
text$yc	ENDS
END

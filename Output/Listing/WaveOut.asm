; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\audio\WaveOut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?s_dwInstance@CWaveOut@@1KA			; CWaveOut::s_dwInstance
_BSS	SEGMENT
?s_dwInstance@CWaveOut@@1KA DD 01H DUP (?)		; CWaveOut::s_dwInstance
_BSS	ENDS
CONST	SEGMENT
$SG96945 DB	'AudioOutThreadProc start.', 0aH, 00H
	ORG $+1
$SG96957 DB	'WOM_OPEN ', 0aH, 00H
	ORG $+1
$SG96959 DB	'WOM_CLOSE ', 0aH, 00H
$SG96967 DB	'AudioInThreadProc exit.', 0aH, 00H
	ORG $+3
$SG96983 DB	'CWaveOut::StartThread: Wave out thread has run.', 0aH, 00H
	ORG $+3
$SG96985 DB	'CWaveOut::StartThread: Strat wave out thread fail.', 0aH
	DB	00H
$SG96990 DB	'CWaveOut::StopThread: Wave out thread hasn''t run.', 0aH
	DB	00H
	ORG $+1
$SG97002 DB	'CWaveOut::StopThread: TerminateThread wave out thread.', 0aH
	DB	00H
$SG97007 DB	'CWaveOut::OpenDev: Device has open.', 0aH, 00H
	ORG $+3
$SG97011 DB	'CWaveOut::OpenDev: waveOutOpen error.', 0aH, 00H
	ORG $+1
$SG97014 DB	'CWaveOut::OpenDev: waveOutOpen error.', 0aH, 00H
	ORG $+1
$SG97019 DB	'CWaveOut::CloseDev: Device hasn''t opened.', 0aH, 00H
	ORG $+1
$SG97021 DB	'CWaveOut::CloseDev: Device hasn''t opened.', 0aH, 00H
	ORG $+1
$SG97023 DB	'CWaveOut::CloseDev: waveOutClose error.', 0aH, 00H
	ORG $+3
$SG97063 DB	'CWaveOut::Play: Device hasn''t been open.', 0aH, 00H
	ORG $+2
$SG97071 DB	'CWaveOut::Play: alloc WAVEHDR memoyr error.', 0aH, 00H
	ORG $+3
$SG97075 DB	'CWaveOut::Play: alloc data memoyr error.', 0aH, 00H
	ORG $+2
$SG97079 DB	'CWaveOut::CloseDev: waveOutPrepareHeader error.', 0aH, 00H
	ORG $+3
$SG97082 DB	'CWaveOut::CloseDev: waveOutWrite error.', 0aH, 00H
CONST	ENDS
PUBLIC	?AudioOutThreadProc@CWaveOut@@SGKPAX@Z		; CWaveOut::AudioOutThreadProc
PUBLIC	?Play@CWaveOut@@QAEHPADI@Z			; CWaveOut::Play
PUBLIC	?StartPlay@CWaveOut@@QAEHXZ			; CWaveOut::StartPlay
PUBLIC	?StopPlay@CWaveOut@@QAEHXZ			; CWaveOut::StopPlay
PUBLIC	?GetBufferNum@CWaveOut@@QAEHXZ			; CWaveOut::GetBufferNum
PUBLIC	?BufferSub@CWaveOut@@QAEXXZ			; CWaveOut::BufferSub
PUBLIC	?BufferAdd@CWaveOut@@QAEXXZ			; CWaveOut::BufferAdd
PUBLIC	?GetLastErrorString@CWaveOut@@QAEPADXZ		; CWaveOut::GetLastErrorString
PUBLIC	??0CWaveOut@@QAE@XZ				; CWaveOut::CWaveOut
PUBLIC	??1CWaveOut@@UAE@XZ				; CWaveOut::~CWaveOut
PUBLIC	?OpenDev@CWaveOut@@IAEHXZ			; CWaveOut::OpenDev
PUBLIC	?CloseDev@CWaveOut@@IAEHXZ			; CWaveOut::CloseDev
PUBLIC	?StopThread@CWaveOut@@IAEHXZ			; CWaveOut::StopThread
PUBLIC	?StartThread@CWaveOut@@IAEHXZ			; CWaveOut::StartThread
PUBLIC	??_GCWaveOut@@UAEPAXI@Z				; CWaveOut::`scalar deleting destructor'
PUBLIC	??_7CWaveOut@@6B@				; CWaveOut::`vftable'
PUBLIC	??_R4CWaveOut@@6B@				; CWaveOut::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWaveOut@@@8				; CWaveOut `RTTI Type Descriptor'
PUBLIC	??_R3CWaveOut@@8				; CWaveOut::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWaveOut@@8				; CWaveOut::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWaveOut@@8			; CWaveOut::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__CreateThread@24:PROC
EXTRN	__imp__TerminateThread@8:PROC
EXTRN	__imp__GetExitCodeThread@8:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__PostThreadMessageA@16:PROC
EXTRN	__imp__waveOutGetErrorTextA@12:PROC
EXTRN	__imp__waveOutOpen@24:PROC
EXTRN	__imp__waveOutClose@4:PROC
EXTRN	__imp__waveOutPrepareHeader@12:PROC
EXTRN	__imp__waveOutUnprepareHeader@12:PROC
EXTRN	__imp__waveOutWrite@12:PROC
EXTRN	__imp__waveOutReset@4:PROC
EXTRN	??_ECWaveOut@@UAEPAXI@Z:PROC			; CWaveOut::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CWaveOut@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWaveOut@@8 DD FLAT:??_R0?AVCWaveOut@@@8	; CWaveOut::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWaveOut@@8
rdata$r	ENDS
;	COMDAT ??_R2CWaveOut@@8
rdata$r	SEGMENT
??_R2CWaveOut@@8 DD FLAT:??_R1A@?0A@EA@CWaveOut@@8	; CWaveOut::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWaveOut@@8
rdata$r	SEGMENT
??_R3CWaveOut@@8 DD 00H					; CWaveOut::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWaveOut@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWaveOut@@@8
_DATA	SEGMENT
??_R0?AVCWaveOut@@@8 DD FLAT:??_7type_info@@6B@		; CWaveOut `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWaveOut@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CWaveOut@@6B@
rdata$r	SEGMENT
??_R4CWaveOut@@6B@ DD 00H				; CWaveOut::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWaveOut@@@8
	DD	FLAT:??_R3CWaveOut@@8
rdata$r	ENDS
;	COMDAT ??_7CWaveOut@@6B@
CONST	SEGMENT
??_7CWaveOut@@6B@ DD FLAT:??_R4CWaveOut@@6B@		; CWaveOut::`vftable'
	DD	FLAT:??_ECWaveOut@@UAEPAXI@Z
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCWaveOut@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCWaveOut@@UAEPAXI@Z PROC				; CWaveOut::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CWaveOut@@UAE@XZ			; CWaveOut::~CWaveOut
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCWaveOut@@UAEPAXI@Z ENDP				; CWaveOut::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartThread@CWaveOut@@IAEHXZ PROC			; CWaveOut::StartThread
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	if (m_bThreadStart)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN2@StartThrea

; 71   : 	{
; 72   : 		TRACE("CWaveOut::StartThread: Wave out thread has run.\n");

	mov	esi, esp
	push	OFFSET $SG96983
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 73   : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@StartThrea
$LN2@StartThrea:

; 74   : 	}
; 75   : 
; 76   : 	m_hAudioOut=CreateThread(0,0,AudioOutThreadProc,this,0,&m_dwAudioOutId);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	push	OFFSET ?AudioOutThreadProc@CWaveOut@@SGKPAX@Z ; CWaveOut::AudioOutThreadProc
	push	0
	push	0
	call	DWORD PTR __imp__CreateThread@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 77   : 	if(!m_hAudioOut)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN1@StartThrea

; 78   : 	{
; 79   : 		TRACE("CWaveOut::StartThread: Strat wave out thread fail.\n");

	mov	esi, esp
	push	OFFSET $SG96985
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN3@StartThrea
$LN1@StartThrea:

; 81   : 	}
; 82   : 	m_bThreadStart = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 1

; 83   : 	return TRUE;

	mov	eax, 1
$LN3@StartThrea:

; 84   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartThread@CWaveOut@@IAEHXZ ENDP			; CWaveOut::StartThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_bEnd$1 = -24						; size = 4
_ExitCode$2 = -16					; size = 4
_t$3 = -8						; size = 4
_this$ = -4						; size = 4
?StopThread@CWaveOut@@IAEHXZ PROC			; CWaveOut::StopThread
; _this$ = ecx

; 86   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 	if (!m_bThreadStart)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN7@StopThread

; 88   : 	{
; 89   : 		TRACE("CWaveOut::StopThread: Wave out thread hasn't run.\n");

	mov	esi, esp
	push	OFFSET $SG96990
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 		return FALSE;

	xor	eax, eax
	jmp	$LN8@StopThread
$LN7@StopThread:

; 91   : 	}
; 92   : 
; 93   : 	if(m_hAudioOut)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	$LN6@StopThread

; 94   : 	{
; 95   : 		int t=50;

	mov	DWORD PTR _t$3[ebp], 50			; 00000032H

; 96   : 		DWORD ExitCode;
; 97   : 		BOOL bEnd=FALSE;

	mov	DWORD PTR _bEnd$1[ebp], 0

; 98   : 		PostThreadMessage(m_dwAudioOutId,WM_QUIT,0,0);

	mov	esi, esp
	push	0
	push	0
	push	18					; 00000012H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	DWORD PTR __imp__PostThreadMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@StopThread:

; 99   : 		while(t)

	cmp	DWORD PTR _t$3[ebp], 0
	je	SHORT $LN4@StopThread

; 100  : 		{
; 101  : 			GetExitCodeThread(m_hAudioOut,&ExitCode);

	mov	esi, esp
	lea	ecx, DWORD PTR _ExitCode$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR __imp__GetExitCodeThread@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 102  : 			if(ExitCode!= STILL_ACTIVE)

	cmp	DWORD PTR _ExitCode$2[ebp], 259		; 00000103H
	je	SHORT $LN3@StopThread

; 103  : 			{
; 104  : 				bEnd=TRUE;

	mov	DWORD PTR _bEnd$1[ebp], 1

; 105  : 				break;

	jmp	SHORT $LN4@StopThread

; 106  : 			}
; 107  : 			else

	jmp	SHORT $LN2@StopThread
$LN3@StopThread:

; 108  : 				Sleep(10);

	mov	esi, esp
	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@StopThread:

; 109  : 			t--;

	mov	ecx, DWORD PTR _t$3[ebp]
	sub	ecx, 1
	mov	DWORD PTR _t$3[ebp], ecx

; 110  : 		}

	jmp	SHORT $LN5@StopThread
$LN4@StopThread:

; 111  : 		if(!bEnd)

	cmp	DWORD PTR _bEnd$1[ebp], 0
	jne	SHORT $LN1@StopThread

; 112  : 		{
; 113  : 			TerminateThread(m_hAudioOut,0);

	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR __imp__TerminateThread@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  : 			TRACE("CWaveOut::StopThread: TerminateThread wave out thread.\n");

	mov	esi, esp
	push	OFFSET $SG97002
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@StopThread:

; 115  : 		}
; 116  :     CloseHandle(m_hAudioOut);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 117  : 		m_hAudioOut=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN6@StopThread:

; 118  : 	}
; 119  : 	m_bThreadStart = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 120  : 	return TRUE;

	mov	eax, 1
$LN8@StopThread:

; 121  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@StopThread
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@StopThread:
	DD	1
	DD	$LN11@StopThread
$LN11@StopThread:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN10@StopThread
$LN10@StopThread:
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?StopThread@CWaveOut@@IAEHXZ ENDP			; CWaveOut::StopThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CloseDev@CWaveOut@@IAEHXZ PROC				; CWaveOut::CloseDev
; _this$ = ecx

; 158  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 	if (!m_bDevOpen)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@CloseDev

; 160  : 	{
; 161  : 		TRACE("CWaveOut::CloseDev: Device hasn't opened.\n");

	mov	esi, esp
	push	OFFSET $SG97019
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@CloseDev
$LN3@CloseDev:

; 163  : 	}
; 164  : 
; 165  : 	if(!m_hOut)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN2@CloseDev

; 166  : 	{
; 167  : 		TRACE("CWaveOut::CloseDev: Device hasn't opened.\n");

	mov	esi, esp
	push	OFFSET $SG97021
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 168  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@CloseDev
$LN2@CloseDev:

; 169  : 	}
; 170  : 
; 171  : 	m_mmr=waveOutClose(m_hOut);

	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	DWORD PTR __imp__waveOutClose@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 172  : 	if(m_mmr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@CloseDev

; 173  : 	{
; 174  : 		TRACE("CWaveOut::CloseDev: waveOutClose error.\n");

	mov	esi, esp
	push	OFFSET $SG97023
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 175  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@CloseDev
$LN1@CloseDev:

; 176  : 	}
; 177  : 	m_hOut=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 178  : 	m_bDevOpen = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 179  : 	return TRUE;

	mov	eax, 1
$LN4@CloseDev:

; 180  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CloseDev@CWaveOut@@IAEHXZ ENDP				; CWaveOut::CloseDev
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_wfx$ = -32						; size = 18
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?OpenDev@CWaveOut@@IAEHXZ PROC				; CWaveOut::OpenDev
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	if (m_bDevOpen)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN3@OpenDev

; 126  : 	{
; 127  : 		TRACE("CWaveOut::OpenDev: Device has open.\n");

	mov	esi, esp
	push	OFFSET $SG97007
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 		return FALSE;

	xor	eax, eax
	jmp	$LN4@OpenDev
$LN3@OpenDev:

; 129  : 	}
; 130  : 	WAVEFORMATEX wfx;
; 131  : 	wfx.wFormatTag = WAVE_FORMAT_PCM;

	mov	ecx, 1
	mov	WORD PTR _wfx$[ebp], cx

; 132  : 	wfx.nChannels = 2;

	mov	edx, 2
	mov	WORD PTR _wfx$[ebp+2], dx

; 133  : 	wfx.nSamplesPerSec = m_dwSample;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _wfx$[ebp+4], ecx

; 134  : 	wfx.nBlockAlign = m_wBit * m_wChannel / 8;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	imul	eax, edx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	WORD PTR _wfx$[ebp+12], ax

; 135  : 	wfx.wBitsPerSample = m_wBit;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+12]
	mov	WORD PTR _wfx$[ebp+14], cx

; 136  :   wfx.nAvgBytesPerSec = wfx.nSamplesPerSec  * wfx.nBlockAlign;

	movzx	edx, WORD PTR _wfx$[ebp+12]
	imul	edx, DWORD PTR _wfx$[ebp+4]
	mov	DWORD PTR _wfx$[ebp+8], edx

; 137  : 	wfx.cbSize = 0;

	xor	eax, eax
	mov	WORD PTR _wfx$[ebp+16], ax

; 138  : 
; 139  : 	m_mmr=waveOutOpen (0,WAVE_MAPPER,&wfx,0,0,WAVE_FORMAT_QUERY);

	mov	esi, esp
	push	1
	push	0
	push	0
	lea	ecx, DWORD PTR _wfx$[ebp]
	push	ecx
	push	-1
	push	0
	call	DWORD PTR __imp__waveOutOpen@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 140  : 	if(m_mmr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@OpenDev

; 141  : 	{
; 142  : 		TRACE("CWaveOut::OpenDev: waveOutOpen error.\n");

	mov	esi, esp
	push	OFFSET $SG97011
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@OpenDev
$LN2@OpenDev:

; 144  : 	}
; 145  : 
; 146  : 	m_mmr=waveOutOpen(&m_hOut,WAVE_MAPPER,&wfx,m_dwAudioOutId,s_dwInstance,CALLBACK_THREAD);

	mov	esi, esp
	push	131072					; 00020000H
	mov	ecx, DWORD PTR ?s_dwInstance@CWaveOut@@1KA ; CWaveOut::s_dwInstance
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	lea	ecx, DWORD PTR _wfx$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	call	DWORD PTR __imp__waveOutOpen@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 147  : 	if(m_mmr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@OpenDev

; 148  : 	{
; 149  : 		TRACE("CWaveOut::OpenDev: waveOutOpen error.\n");

	mov	esi, esp
	push	OFFSET $SG97014
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@OpenDev
$LN1@OpenDev:

; 151  : 	}
; 152  : 	m_bDevOpen = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 1

; 153  : 	m_iBufferNum = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 154  : 	return TRUE;

	mov	eax, 1
$LN4@OpenDev:

; 155  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@OpenDev
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@OpenDev:
	DD	1
	DD	$LN7@OpenDev
$LN7@OpenDev:
	DD	-32					; ffffffe0H
	DD	18					; 00000012H
	DD	$LN6@OpenDev
$LN6@OpenDev:
	DB	119					; 00000077H
	DB	102					; 00000066H
	DB	120					; 00000078H
	DB	0
?OpenDev@CWaveOut@@IAEHXZ ENDP				; CWaveOut::OpenDev
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CWaveOut@@UAE@XZ PROC				; CWaveOut::~CWaveOut
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CWaveOut@@6B@

; 65   :   DeleteCriticalSection(&m_csLock);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__DeleteCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CWaveOut@@UAE@XZ ENDP				; CWaveOut::~CWaveOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CWaveOut@@QAE@XZ PROC				; CWaveOut::CWaveOut
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CWaveOut@@6B@
	mov	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 8000			; 00001f40H
	mov	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+12], cx

; 50   : 	m_hOut = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 51   : 
; 52   : 	m_hAudioOut = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 53   : 	m_dwAudioOutId = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 54   : 	m_iBufferNum = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 55   : 
; 56   : 	m_bThreadStart = FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 57   : 	m_bDevOpen = FALSE;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0

; 58   : 
; 59   : 	s_dwInstance ++;

	mov	eax, DWORD PTR ?s_dwInstance@CWaveOut@@1KA ; CWaveOut::s_dwInstance
	add	eax, 1
	mov	DWORD PTR ?s_dwInstance@CWaveOut@@1KA, eax ; CWaveOut::s_dwInstance

; 60   :   InitializeCriticalSection(&m_csLock);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__InitializeCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 61   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CWaveOut@@QAE@XZ ENDP				; CWaveOut::CWaveOut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_buffer$ = -268						; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetLastErrorString@CWaveOut@@QAEPADXZ PROC		; CWaveOut::GetLastErrorString
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	char buffer[256];
; 216  : 	memset(buffer,0,256);

	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 217  : 	waveOutGetErrorText(m_mmr,buffer,256);

	mov	esi, esp
	push	256					; 00000100H
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR __imp__waveOutGetErrorTextA@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 218  : 	return nullptr;

	xor	eax, eax

; 219  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetLastErr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@GetLastErr:
	DD	1
	DD	$LN4@GetLastErr
$LN4@GetLastErr:
	DD	-268					; fffffef4H
	DD	256					; 00000100H
	DD	$LN3@GetLastErr
$LN3@GetLastErr:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?GetLastErrorString@CWaveOut@@QAEPADXZ ENDP		; CWaveOut::GetLastErrorString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
;	COMDAT ?BufferAdd@CWaveOut@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BufferAdd@CWaveOut@@QAEXXZ PROC			; CWaveOut::BufferAdd, COMDAT
; _this$ = ecx

; 293  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 294  : 	EnterCriticalSection(&m_csLock);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 295  : 	++m_iBufferNum;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx

; 296  :   LeaveCriticalSection(&m_csLock);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 297  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BufferAdd@CWaveOut@@QAEXXZ ENDP			; CWaveOut::BufferAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
;	COMDAT ?BufferSub@CWaveOut@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BufferSub@CWaveOut@@QAEXXZ PROC			; CWaveOut::BufferSub, COMDAT
; _this$ = ecx

; 300  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 301  : 	EnterCriticalSection(&m_csLock);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__EnterCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 302  : 	--m_iBufferNum;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], edx

; 303  :   LeaveCriticalSection(&m_csLock);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__LeaveCriticalSection@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 304  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BufferSub@CWaveOut@@QAEXXZ ENDP			; CWaveOut::BufferSub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
;	COMDAT ?GetBufferNum@CWaveOut@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBufferNum@CWaveOut@@QAEHXZ PROC			; CWaveOut::GetBufferNum, COMDAT
; _this$ = ecx

; 307  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 308  : 	//int iTemp;
; 309  : 	//EnterCriticalSection(&m_csLock);
; 310  : 	//iTemp = m_iBufferNum;
; 311  :   //LeaveCriticalSection(&m_csLock);
; 312  : 	return m_iBufferNum;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 313  : 
; 314  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetBufferNum@CWaveOut@@QAEHXZ ENDP			; CWaveOut::GetBufferNum
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StopPlay@CWaveOut@@QAEHXZ PROC				; CWaveOut::StopPlay
; _this$ = ecx

; 202  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 203  : 	StopThread ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopThread@CWaveOut@@IAEHXZ		; CWaveOut::StopThread

; 204  :   CloseDev();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CloseDev@CWaveOut@@IAEHXZ		; CWaveOut::CloseDev

; 205  : 	return TRUE;

	mov	eax, 1

; 206  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StopPlay@CWaveOut@@QAEHXZ ENDP				; CWaveOut::StopPlay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
_bRet$ = -8						; size = 4
_this$ = -4						; size = 4
?StartPlay@CWaveOut@@QAEHXZ PROC			; CWaveOut::StartPlay
; _this$ = ecx

; 183  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 184  : 	BOOL bRet=FALSE;

	mov	DWORD PTR _bRet$[ebp], 0

; 185  : 	if (!StartThread())           

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StartThread@CWaveOut@@IAEHXZ		; CWaveOut::StartThread
	test	eax, eax
	jne	SHORT $LN5@StartPlay

; 186  : 	{
; 187  : 		goto Exit;

	jmp	SHORT $Exit$8
	jmp	SHORT $Exit$8
$LN5@StartPlay:

; 188  : 	};
; 189  : 	if (!OpenDev())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenDev@CWaveOut@@IAEHXZ		; CWaveOut::OpenDev
	test	eax, eax
	jne	SHORT $LN3@StartPlay

; 190  : 	{
; 191  : 		goto Exit1;

	jmp	SHORT $Exit1$9
	jmp	SHORT $Exit1$9
$LN3@StartPlay:

; 192  : 	};
; 193  : 	bRet = TRUE;

	mov	DWORD PTR _bRet$[ebp], 1

; 194  : 	goto Exit;

	jmp	SHORT $Exit$8
	jmp	SHORT $Exit$8
$Exit1$9:

; 195  : Exit1:
; 196  : 	StopThread ();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopThread@CWaveOut@@IAEHXZ		; CWaveOut::StopThread
$Exit$8:

; 197  : Exit:
; 198  : 	return bRet;

	mov	eax, DWORD PTR _bRet$[ebp]

; 199  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartPlay@CWaveOut@@QAEHXZ ENDP			; CWaveOut::StartPlay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_pwh$ = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_uSize$ = 12						; size = 4
?Play@CWaveOut@@QAEHPADI@Z PROC				; CWaveOut::Play
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	if (!m_bDevOpen)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN6@Play

; 245  : 	{
; 246  : 		TRACE("CWaveOut::Play: Device hasn't been open.\n");

	mov	esi, esp
	push	OFFSET $SG97063
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 247  : 		return FALSE;

	xor	eax, eax
	jmp	$LN7@Play
$LN6@Play:

; 248  : 	}
; 249  : 	if (GetBufferNum () > PLAY_DELAY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetBufferNum@CWaveOut@@QAEHXZ		; CWaveOut::GetBufferNum
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN5@Play

; 250  : 	{
; 251  : 	//	TRACE("CWaveOut::Play: Delay too big pass over.\n");
; 252  : 		return TRUE;

	mov	eax, 1
	jmp	$LN7@Play
$LN5@Play:

; 253  : 	}
; 254  : 	char* p;
; 255  : 	LPWAVEHDR pwh=new WAVEHDR();

	mov	DWORD PTR $T3[ebp], 32			; 00000020H
	mov	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN9@Play
	mov	edx, DWORD PTR $T3[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN10@Play
$LN9@Play:
	mov	DWORD PTR tv73[ebp], 0
$LN10@Play:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _pwh$[ebp], edx

; 256  : 	if(!pwh)

	cmp	DWORD PTR _pwh$[ebp], 0
	jne	SHORT $LN4@Play

; 257  : 	{
; 258  : 		TRACE("CWaveOut::Play: alloc WAVEHDR memoyr error.\n");

	mov	esi, esp
	push	OFFSET $SG97071
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  : 		return FALSE;

	xor	eax, eax
	jmp	$LN7@Play
$LN4@Play:

; 260  : 	}
; 261  : 	
; 262  : 	p=new char[uSize];

	mov	eax, DWORD PTR _uSize$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _p$[ebp], ecx

; 263  : 	if(!p)

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@Play

; 264  : 	{
; 265  : 		TRACE("CWaveOut::Play: alloc data memoyr error.\n");

	mov	esi, esp
	push	OFFSET $SG97075
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  : 		return FALSE;

	xor	eax, eax
	jmp	$LN7@Play
$LN3@Play:

; 267  : 	}
; 268  : 
; 269  : 	CopyMemory(p,buf,uSize);

	mov	edx, DWORD PTR _uSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 270  : 	ZeroMemory(pwh,sizeof(WAVEHDR));

	push	32					; 00000020H
	push	0
	mov	edx, DWORD PTR _pwh$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 271  : 	pwh->dwBufferLength=uSize;

	mov	eax, DWORD PTR _pwh$[ebp]
	mov	ecx, DWORD PTR _uSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 272  : 	pwh->lpData=p;

	mov	edx, DWORD PTR _pwh$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax

; 273  :   pwh->dwFlags = 0;

	mov	ecx, DWORD PTR _pwh$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 274  : 
; 275  : 	m_mmr=waveOutPrepareHeader(m_hOut,pwh,sizeof(WAVEHDR));

	mov	esi, esp
	push	32					; 00000020H
	mov	edx, DWORD PTR _pwh$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	DWORD PTR __imp__waveOutPrepareHeader@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax

; 276  :   	if (m_mmr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@Play

; 277  : 	{
; 278  : 		TRACE("CWaveOut::CloseDev: waveOutPrepareHeader error.\n");

	mov	esi, esp
	push	OFFSET $SG97079
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 279  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@Play
$LN2@Play:

; 280  : 	}
; 281  : 
; 282  : 	m_mmr=waveOutWrite(m_hOut,pwh,sizeof(WAVEHDR));

	mov	esi, esp
	push	32					; 00000020H
	mov	ecx, DWORD PTR _pwh$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	DWORD PTR __imp__waveOutWrite@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 283  :   	if (m_mmr)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN1@Play

; 284  : 	{
; 285  : 		TRACE("CWaveOut::CloseDev: waveOutWrite error.\n");

	mov	esi, esp
	push	OFFSET $SG97082
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  : 		return FALSE;

	xor	eax, eax
	jmp	SHORT $LN7@Play
$LN1@Play:

; 287  : 	}
; 288  : 	BufferAdd();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?BufferAdd@CWaveOut@@QAEXXZ		; CWaveOut::BufferAdd

; 289  : 	return TRUE;

	mov	eax, 1
$LN7@Play:

; 290  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Play@CWaveOut@@QAEHPADI@Z ENDP				; CWaveOut::Play
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\waveout.cpp
_TEXT	SEGMENT
tv71 = -56						; size = 4
$T1 = -52						; size = 4
$T2 = -48						; size = 4
_pwh$3 = -44						; size = 4
_msg$ = -36						; size = 28
_pWaveIn$ = -4						; size = 4
_lpParameter$ = 8					; size = 4
?AudioOutThreadProc@CWaveOut@@SGKPAX@Z PROC		; CWaveOut::AudioOutThreadProc

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 16   : 	TRACE("AudioOutThreadProc start.\n");

	mov	esi, esp
	push	OFFSET $SG96945
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 17   : 	CWaveOut *pWaveIn;
; 18   : 	pWaveIn = (CWaveOut *)lpParameter;

	mov	eax, DWORD PTR _lpParameter$[ebp]
	mov	DWORD PTR _pWaveIn$[ebp], eax
$LN7@AudioOutTh:

; 19   : 
; 20   : 	MSG msg;
; 21   : 	while(GetMessage(&msg,0,0,0))

	mov	esi, esp
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetMessageA@16
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN6@AudioOutTh

; 22   : 	{
; 23   : 		switch(msg.message )

	mov	edx, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR tv71[ebp], edx
	cmp	DWORD PTR tv71[ebp], 955		; 000003bbH
	je	SHORT $LN3@AudioOutTh
	cmp	DWORD PTR tv71[ebp], 956		; 000003bcH
	je	SHORT $LN2@AudioOutTh
	cmp	DWORD PTR tv71[ebp], 957		; 000003bdH
	je	SHORT $LN1@AudioOutTh
	jmp	SHORT $LN4@AudioOutTh
$LN3@AudioOutTh:

; 24   : 		{
; 25   : 		case WOM_OPEN:
; 26   : 			TRACE("WOM_OPEN \n");

	mov	esi, esp
	push	OFFSET $SG96957
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 			break;

	jmp	SHORT $LN4@AudioOutTh
$LN2@AudioOutTh:

; 28   : 		case WOM_CLOSE:
; 29   : 			TRACE("WOM_CLOSE \n");

	mov	esi, esp
	push	OFFSET $SG96959
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 			break;

	jmp	SHORT $LN4@AudioOutTh
$LN1@AudioOutTh:

; 31   : 		case WOM_DONE:
; 32   : 			WAVEHDR* pwh=(WAVEHDR*)msg.lParam;

	mov	eax, DWORD PTR _msg$[ebp+12]
	mov	DWORD PTR _pwh$3[ebp], eax

; 33   : 			waveOutUnprepareHeader((HWAVEOUT)msg.wParam,pwh,sizeof(WAVEHDR));

	mov	esi, esp
	push	32					; 00000020H
	mov	ecx, DWORD PTR _pwh$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp+8]
	push	edx
	call	DWORD PTR __imp__waveOutUnprepareHeader@12
	cmp	esi, esp
	call	__RTC_CheckEsp

; 34   : 			pWaveIn->BufferSub ();

	mov	ecx, DWORD PTR _pWaveIn$[ebp]
	call	?BufferSub@CWaveOut@@QAEXXZ		; CWaveOut::BufferSub

; 35   : 			delete []pwh->lpData;//ɾPlayʱڴ

	mov	eax, DWORD PTR _pwh$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 36   : 			delete pwh;

	mov	eax, DWORD PTR _pwh$3[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@AudioOutTh:

; 37   : 			break;
; 38   : 		}
; 39   : 	}

	jmp	$LN7@AudioOutTh
$LN6@AudioOutTh:

; 40   :   waveOutReset(pWaveIn->m_hOut);

	mov	esi, esp
	mov	edx, DWORD PTR _pWaveIn$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	DWORD PTR __imp__waveOutReset@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 41   : 	TRACE("AudioInThreadProc exit.\n");

	mov	esi, esp
	push	OFFSET $SG96967
	call	DWORD PTR __imp__OutputDebugStringA@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 42   : 	return (DWORD)msg.wParam;

	mov	eax, DWORD PTR _msg$[ebp+8]

; 43   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@AudioOutTh
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN12@AudioOutTh:
	DD	1
	DD	$LN11@AudioOutTh
$LN11@AudioOutTh:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN10@AudioOutTh
$LN10@AudioOutTh:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
?AudioOutThreadProc@CWaveOut@@SGKPAX@Z ENDP		; CWaveOut::AudioOutThreadProc
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\emulation\gb\sound_controller.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	_ConcRT_ProviderGuid
PUBLIC	_ConcRTEventGuid
PUBLIC	_SchedulerEventGuid
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_ScheduleGroupEventGuid
PUBLIC	_ContextEventGuid
PUBLIC	_ChoreEventGuid
PUBLIC	_VirtualProcessorEventGuid
PUBLIC	_LockEventGuid
PUBLIC	_ResourceManagerEventGuid
PUBLIC	_PPLParallelInvokeEventGuid
PUBLIC	_PPLParallelForEventGuid
PUBLIC	_PPLParallelForeachEventGuid
PUBLIC	_AgentEventGuid
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT _AgentEventGuid
CONST	SEGMENT
_AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT _PPLParallelForeachEventGuid
CONST	SEGMENT
_PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT _PPLParallelForEventGuid
CONST	SEGMENT
_PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT _PPLParallelInvokeEventGuid
CONST	SEGMENT
_PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT _ResourceManagerEventGuid
CONST	SEGMENT
_ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT _LockEventGuid
CONST	SEGMENT
_LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT _VirtualProcessorEventGuid
CONST	SEGMENT
_VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT _ChoreEventGuid
CONST	SEGMENT
_ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT _ContextEventGuid
CONST	SEGMENT
_ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT _ScheduleGroupEventGuid
CONST	SEGMENT
_ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT _SchedulerEventGuid
CONST	SEGMENT
_SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT _ConcRTEventGuid
CONST	SEGMENT
_ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT _ConcRT_ProviderGuid
CONST	SEGMENT
_ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB DD 08H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB DD 00H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
CONST	SEGMENT
$SG153685 DB	'Code\emulation\gb\sound_controller.cpp', 00H
	ORG $+1
$SG153686 DB	'Code\emulation\gb\sound_controller.cpp', 00H
	ORG $+1
_clockspeed DQ	04150000000000000r		; 4.1943e+006
_dutycycletable DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
PUBLIC	_powf
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?Initialize@Component@gb@emulation@@UAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize
PUBLIC	?ioports@Memory@gb@emulation@@QAEPAEXZ		; emulation::gb::Memory::ioports
PUBLIC	?set_sample_rate@Component@synth@audio@@QAEXI@Z	; audio::synth::Component::set_sample_rate
PUBLIC	?soundlength_ms@SoundLengthWaveDutyRegister@gb@emulation@@QAEMXZ ; emulation::gb::SoundLengthWaveDutyRegister::soundlength_ms
PUBLIC	?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z ; emulation::gb::SoundController::Initialize
PUBLIC	?Deinitialize@SoundController@gb@emulation@@UAEXXZ ; emulation::gb::SoundController::Deinitialize
PUBLIC	?Reset@SoundController@gb@emulation@@UAEXXZ	; emulation::gb::SoundController::Reset
PUBLIC	?Step@SoundController@gb@emulation@@QAEXN@Z	; emulation::gb::SoundController::Step
PUBLIC	?Read@SoundController@gb@emulation@@QAEEG@Z	; emulation::gb::SoundController::Read
PUBLIC	?Write@SoundController@gb@emulation@@QAEXGE@Z	; emulation::gb::SoundController::Write
PUBLIC	?Initialize@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel1>::Initialize
PUBLIC	?SweepTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::SweepTick
PUBLIC	?LengthTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::LengthTick
PUBLIC	?SampleTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::SampleTick
PUBLIC	?Initialize@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel2>::Initialize
PUBLIC	?LengthTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel2>::LengthTick
PUBLIC	?SampleTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel2>::SampleTick
PUBLIC	?Initialize@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel3>::Initialize
PUBLIC	?LengthTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel3>::LengthTick
PUBLIC	?SampleTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel3>::SampleTick
PUBLIC	?Initialize@<unnamed-type-channel4>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel4>::Initialize
PUBLIC	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ	; emulation::gb::Emu::memory
PUBLIC	??$SafeDelete@VInterface@output@audio@@@@YAXPAPAVInterface@output@audio@@@Z ; SafeDelete<audio::output::Interface>
PUBLIC	__real@00000000
PUBLIC	__real@3b800000
PUBLIC	__real@3e800000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40e00000
PUBLIC	__real@40e5888000000000
PUBLIC	__real@41700000
PUBLIC	__real@42800000
PUBLIC	__real@447a0000
PUBLIC	__real@46fffe00
PUBLIC	__real@49000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	_pow:PROC
EXTRN	__imp__rand:PROC
EXTRN	__imp__srand:PROC
EXTRN	??2@YAPAXIHPBDH@Z:PROC				; operator new
EXTRN	??3@YAXPAXHPBDH@Z:PROC				; operator delete
EXTRN	__imp___time64:PROC
EXTRN	??0DirectSound@output@audio@@QAE@XZ:PROC	; audio::output::DirectSound::DirectSound
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?noiseseed@synth@audio@@3IA:DWORD		; audio::synth::noiseseed
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?sweep_tick@?BF@??Step@SoundController@gb@emulation@@QAEXN@Z@4_NA
_BSS	SEGMENT
?sweep_tick@?BF@??Step@SoundController@gb@emulation@@QAEXN@Z@4_NA DB 01H DUP (?) ; `emulation::gb::SoundController::Step'::`21'::sweep_tick
_BSS	ENDS
;	COMDAT ?sbuf@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4PAFA
_BSS	SEGMENT
?sbuf@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4PAFA DW 02274H DUP (?) ; `emulation::gb::SoundController::Step'::`37'::sbuf
_BSS	ENDS
;	COMDAT ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA
_BSS	SEGMENT
?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA DD 01H DUP (?) ; `emulation::gb::SoundController::Step'::`37'::sindex
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@49000000
CONST	SEGMENT
__real@49000000 DD 049000000r			; 524288
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@41700000
CONST	SEGMENT
__real@41700000 DD 041700000r			; 15
CONST	ENDS
;	COMDAT __real@40e5888000000000
CONST	SEGMENT
__real@40e5888000000000 DQ 040e5888000000000r	; 44100
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3b800000
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
xdata$x	SEGMENT
__unwindtable$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z$0
__ehfuncinfo$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6IXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__fastcall*)(emulation::gb::VolumeEnvelope &,float &)
; _this$ = ecx

; 85   :   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?<helper_func_fastcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CIXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_fastcall>
	mov	esp, ebp
	pop	ebp
	ret	0
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6IXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__fastcall*)(emulation::gb::VolumeEnvelope &,float &)
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_counter$ = -8						; size = 4
_envreg$ = -4						; size = 4
?<helper_func_fastcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CIXAATVolumeEnvelope@gb@emulation@@AAM@Z PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_fastcall>
; _envreg$ = ecx
; _counter$ = edx

; 85   :   };

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _counter$[ebp], edx
	mov	DWORD PTR _envreg$[ebp], ecx
	mov	eax, DWORD PTR _counter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _envreg$[ebp]
	push	ecx
	xor	ecx, ecx
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?<helper_func_fastcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CIXAATVolumeEnvelope@gb@emulation@@AAM@Z ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_fastcall>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6GXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__stdcall*)(emulation::gb::VolumeEnvelope &,float &)
; _this$ = ecx

; 85   :   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?<helper_func_stdcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CGXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_stdcall>
	mov	esp, ebp
	pop	ebp
	ret	0
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6GXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__stdcall*)(emulation::gb::VolumeEnvelope &,float &)
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_envreg$ = 8						; size = 4
_counter$ = 12						; size = 4
?<helper_func_stdcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CGXAATVolumeEnvelope@gb@emulation@@AAM@Z PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_stdcall>

; 85   :   };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _counter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _envreg$[ebp]
	push	ecx
	xor	ecx, ecx
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?<helper_func_stdcall>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CGXAATVolumeEnvelope@gb@emulation@@AAM@Z ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_stdcall>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6AXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__cdecl*)(emulation::gb::VolumeEnvelope &,float &)
; _this$ = ecx

; 85   :   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ?<helper_func_cdecl>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CAXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_cdecl>
	mov	esp, ebp
	pop	ebp
	ret	0
??B<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEP6AXAATVolumeEnvelope@gb@emulation@@AAM@ZXZ ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator void (__cdecl*)(emulation::gb::VolumeEnvelope &,float &)
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_envreg$ = 8						; size = 4
_counter$ = 12						; size = 4
?<helper_func_cdecl>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CAXAATVolumeEnvelope@gb@emulation@@AAM@Z PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_cdecl>

; 85   :   };

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _counter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _envreg$[ebp]
	push	ecx
	xor	ecx, ecx
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?<helper_func_cdecl>@<lambda_41a3813a41e43ee16132fa6899cc2399>@@CAXAATVolumeEnvelope@gb@emulation@@AAM@Z ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::<helper_func_cdecl>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_env_step_ms$ = -8					; size = 4
_this$ = -4						; size = 4
_envreg$ = 8						; size = 4
_counter$ = 12						; size = 4
??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z PROC ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()
; _this$ = ecx

; 75   :   auto envelopeTick = [](VolumeEnvelope& envreg,real_t& counter){

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 76   :     float env_step_ms = envreg.env_sweep/64.0f*1000.0f;

	mov	eax, DWORD PTR _envreg$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 7
	movzx	edx, cl
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@42800000
	mulss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR _env_step_ms$[ebp], xmm0

; 77   : 
; 78   :     if (env_step_ms != 0 && counter >= env_step_ms) {

	movss	xmm0, DWORD PTR _env_step_ms$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN3@operator
	mov	eax, DWORD PTR _counter$[ebp]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _env_step_ms$[ebp]
	jb	$LN3@operator

; 79   :         if (envreg.direction && envreg.vol<0xF)

	mov	ecx, DWORD PTR _envreg$[ebp]
	mov	dl, BYTE PTR [ecx]
	shr	dl, 3
	and	dl, 1
	movzx	eax, dl
	test	eax, eax
	je	SHORT $LN2@operator
	mov	ecx, DWORD PTR _envreg$[ebp]
	mov	dl, BYTE PTR [ecx]
	shr	dl, 4
	and	dl, 15					; 0000000fH
	movzx	eax, dl
	cmp	eax, 15					; 0000000fH
	jge	SHORT $LN2@operator

; 80   :           ++envreg.vol;

	mov	ecx, DWORD PTR _envreg$[ebp]
	mov	dl, BYTE PTR [ecx]
	shr	dl, 4
	and	dl, 15					; 0000000fH
	add	dl, 1
	and	dl, 15					; 0000000fH
	shl	dl, 4
	mov	eax, DWORD PTR _envreg$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 15					; 0000000fH
	or	cl, dl
	mov	edx, DWORD PTR _envreg$[ebp]
	mov	BYTE PTR [edx], cl
$LN2@operator:

; 81   :         if (!envreg.direction && envreg.vol>0)

	mov	eax, DWORD PTR _envreg$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	jne	SHORT $LN1@operator
	mov	eax, DWORD PTR _envreg$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 4
	and	cl, 15					; 0000000fH
	movzx	edx, cl
	test	edx, edx
	jle	SHORT $LN1@operator

; 82   :           --envreg.vol;

	mov	eax, DWORD PTR _envreg$[ebp]
	mov	cl, BYTE PTR [eax]
	shr	cl, 4
	and	cl, 15					; 0000000fH
	sub	cl, 1
	and	cl, 15					; 0000000fH
	shl	cl, 4
	mov	edx, DWORD PTR _envreg$[ebp]
	mov	al, BYTE PTR [edx]
	and	al, 15					; 0000000fH
	or	al, cl
	mov	ecx, DWORD PTR _envreg$[ebp]
	mov	BYTE PTR [ecx], al
$LN1@operator:

; 83   :       counter = 0;

	mov	edx, DWORD PTR _counter$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx], xmm0
$LN3@operator:

; 84   :     }
; 85   :   };

	mov	esp, ebp
	pop	ebp
	ret	8
??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ENDP ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeDelete@VInterface@output@audio@@@@YAXPAPAVInterface@output@audio@@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
_ppInterfaceToDelete$ = 8				; size = 4
??$SafeDelete@VInterface@output@audio@@@@YAXPAPAVInterface@output@audio@@@Z PROC ; SafeDelete<audio::output::Interface>, COMDAT

; 37   : inline void SafeDelete(Interface **ppInterfaceToDelete) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 38   :     if (*ppInterfaceToDelete != NULL) {

	mov	eax, DWORD PTR _ppInterfaceToDelete$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SafeDelete

; 39   :         delete (*ppInterfaceToDelete);

	mov	ecx, DWORD PTR _ppInterfaceToDelete$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 40   :         (*ppInterfaceToDelete) = NULL;

	mov	ecx, DWORD PTR _ppInterfaceToDelete$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@SafeDelete:

; 41   :     }
; 42   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$SafeDelete@VInterface@output@audio@@@@YAXPAPAVInterface@output@audio@@@Z ENDP ; SafeDelete<audio::output::Interface>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ PROC	; emulation::gb::Emu::memory, COMDAT
; _this$ = ecx

; 21   :   Memory* memory() { return &memory_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1160				; 00000488H
	mov	esp, ebp
	pop	ebp
	ret	0
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ENDP	; emulation::gb::Emu::memory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?Initialize@<unnamed-type-channel4>@SoundController@gb@emulation@@QAEXPAV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?Initialize@<unnamed-type-channel4>@SoundController@gb@emulation@@QAEXPAV234@@Z PROC ; emulation::gb::SoundController::<unnamed-type-channel4>::Initialize, COMDAT
; _this$ = ecx

; 256  :     void Initialize(SoundController* sc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 257  :       sc_ = sc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sc$[ebp]
	mov	DWORD PTR [eax], ecx

; 258  : 			envelope.raw = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 0

; 259  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@<unnamed-type-channel4>@SoundController@gb@emulation@@QAEXPAV234@@Z ENDP ; emulation::gb::SoundController::<unnamed-type-channel4>::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?SampleTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEEXZ
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv78 = -8						; size = 4
_this$ = -4						; size = 4
?SampleTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEEXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel3>::SampleTick, COMDAT
; _this$ = ecx

; 229  :     uint8_t SampleTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 			if (!enabled) return 0;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+27]
	test	ecx, ecx
	jne	SHORT $LN2@SampleTick
	xor	al, al
	jmp	$LN3@SampleTick
$LN2@SampleTick:

; 231  : 			if ((sc_->nr24_ & 0x80)&&freqcounter-- == 0) {

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+68]
	and	ecx, 128				; 00000080H
	je	SHORT $LN1@SampleTick
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+20]
	mov	DWORD PTR tv78[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+20]
	sub	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+20], dx
	cmp	DWORD PTR tv78[ebp], 0
	jne	SHORT $LN5@SampleTick
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN6@SampleTick
$LN5@SampleTick:
	mov	DWORD PTR tv79[ebp], 0
$LN6@SampleTick:
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN1@SampleTick

; 232  : 				sample = sc_->wavram[playback_counter];

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [edx+ecx+74]
	mov	BYTE PTR [eax+26], cl

; 233  : 				playback_counter = (playback_counter + 1) & 0x1F;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+12]
	add	eax, 1
	and	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+12], al

; 234  : 				freqcounter = freqcounterload;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+22]
	mov	WORD PTR [edx+20], cx
$LN1@SampleTick:

; 235  : 			}
; 236  :       return sample;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+26]
$LN3@SampleTick:

; 237  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?SampleTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEEXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel3>::SampleTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?LengthTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXXZ
_TEXT	SEGMENT
tv76 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?LengthTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel3>::LengthTick, COMDAT
; _this$ = ecx

; 222  : 		void LengthTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 223  : 			if ((sc_->nr34_ & 0x40) && lengthcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+73]
	and	edx, 64					; 00000040H
	je	SHORT $LN2@LengthTick
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+25]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+25], al
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@LengthTick
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@LengthTick
$LN4@LengthTick:
	mov	DWORD PTR tv76[ebp], 0
$LN5@LengthTick:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN2@LengthTick

; 224  : 				sc_->nr34_ &= ~0x80;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+73]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+73], cl

; 225  : 				enabled = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+27], 0
$LN2@LengthTick:

; 226  : 			}
; 227  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?LengthTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel3>::LengthTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?Initialize@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXPAV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?Initialize@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXPAV234@@Z PROC ; emulation::gb::SoundController::<unnamed-type-channel3>::Initialize, COMDAT
; _this$ = ecx

; 208  :     void Initialize(SoundController* sc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 209  :       playback_counter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 210  :       freqcounter=0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+20], cx

; 211  : 			freqcounterload =0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+22], ax

; 212  : 			vol=0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+8], xmm0

; 213  : 			lengthcounter=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+25], 0

; 214  :       sc_ = sc;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sc$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 215  :       wavsample = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+16], xmm0

; 216  :       enabled = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+27], 0

; 217  :       freqcounter = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+20], dx

; 218  :       sample = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+26], 0

; 219  : 			envelope.raw = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx], 0

; 220  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXPAV234@@Z ENDP ; emulation::gb::SoundController::<unnamed-type-channel3>::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?SampleTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEEXZ
_TEXT	SEGMENT
tv76 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?SampleTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEEXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel2>::SampleTick, COMDAT
; _this$ = ecx

; 187  :     uint8_t SampleTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 188  : 			if ((sc_->nr24_ & 0x80)&&freqcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+68]
	and	edx, 128				; 00000080H
	je	SHORT $LN1@SampleTick
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+10]
	sub	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+10], ax
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@SampleTick
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@SampleTick
$LN4@SampleTick:
	mov	DWORD PTR tv76[ebp], 0
$LN5@SampleTick:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN1@SampleTick

; 189  : 				sample = dutycycletable[wavepatternduty|wavepatterncounter];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _dutycycletable[eax]
	mov	BYTE PTR [ecx+14], dl

; 190  : 				wavepatterncounter = (wavepatterncounter +1 ) % 8;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	add	ecx, 1
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@SampleTick
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@SampleTick:
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], cl

; 191  : 				freqcounter = freqcounterload;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+8]
	mov	WORD PTR [eax+10], dx
$LN1@SampleTick:

; 192  : 			}
; 193  :       return sample;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+14]

; 194  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?SampleTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEEXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel2>::SampleTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?LengthTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXXZ
_TEXT	SEGMENT
tv76 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?LengthTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel2>::LengthTick, COMDAT
; _this$ = ecx

; 180  : 		void LengthTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 			if ((sc_->nr24_ & 0x40) && lengthcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+68]
	and	edx, 64					; 00000040H
	je	SHORT $LN2@LengthTick
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+13]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], al
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@LengthTick
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@LengthTick
$LN4@LengthTick:
	mov	DWORD PTR tv76[ebp], 0
$LN5@LengthTick:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN2@LengthTick

; 182  : 				sc_->nr24_ &= ~0x80;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+68]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	BYTE PTR [eax+68], cl
$LN2@LengthTick:

; 183  : 			}
; 184  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?LengthTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel2>::LengthTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?Initialize@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXPAV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?Initialize@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXPAV234@@Z PROC ; emulation::gb::SoundController::<unnamed-type-channel2>::Initialize, COMDAT
; _this$ = ecx

; 171  :     void Initialize(SoundController* sc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 172  :       sc_ = sc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sc$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 173  :       wavepatterncounter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+2], 0

; 174  :       wavepatternduty = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1], 0

; 175  :       freqcounter = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+10], cx

; 176  :       sample = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+14], 0

; 177  : 			envelope.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx], 0

; 178  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXPAV234@@Z ENDP ; emulation::gb::SoundController::<unnamed-type-channel2>::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?SampleTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEEXZ
_TEXT	SEGMENT
tv76 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?SampleTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEEXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel1>::SampleTick, COMDAT
; _this$ = ecx

; 154  :     uint8_t SampleTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 155  : 			if ((sc_->nr14_ & 0x80)&&freqcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+64]
	and	edx, 128				; 00000080H
	je	SHORT $LN1@SampleTick
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+6]
	sub	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+6], ax
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@SampleTick
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@SampleTick
$LN4@SampleTick:
	mov	DWORD PTR tv76[ebp], 0
$LN5@SampleTick:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN1@SampleTick

; 156  : 				sample = dutycycletable[wavepatternduty|wavepatterncounter];

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+11]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+12]
	or	eax, edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _dutycycletable[eax]
	mov	BYTE PTR [ecx+16], dl

; 157  : 				wavepatterncounter = (wavepatterncounter +1 ) % 8;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	add	ecx, 1
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN6@SampleTick
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN6@SampleTick:
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+12], cl

; 158  : 				freqcounter = freqcounterload;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+6], dx
$LN1@SampleTick:

; 159  : 			}
; 160  :       return sample;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+16]

; 161  : 
; 162  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?SampleTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEEXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel1>::SampleTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?LengthTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ
_TEXT	SEGMENT
tv76 = -12						; size = 4
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?LengthTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel1>::LengthTick, COMDAT
; _this$ = ecx

; 147  : 		void LengthTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 			if ((sc_->nr14_ & 0x40) && lengthcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+64]
	and	edx, 64					; 00000040H
	je	SHORT $LN2@LengthTick
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	mov	DWORD PTR tv75[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+14]
	sub	al, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+14], al
	cmp	DWORD PTR tv75[ebp], 0
	jne	SHORT $LN4@LengthTick
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN5@LengthTick
$LN4@LengthTick:
	mov	DWORD PTR tv76[ebp], 0
$LN5@LengthTick:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN2@LengthTick

; 149  : 				sc_->nr14_ &= ~0x80;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+64]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax+64], cl
$LN2@LengthTick:

; 150  : 			}
; 151  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?LengthTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel1>::LengthTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?SweepTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?SweepTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ PROC ; emulation::gb::SoundController::<unnamed-type-channel1>::SweepTick, COMDAT
; _this$ = ecx

; 136  : 		void SweepTick() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 			if (sc_->nr10_.sweep_time != 0 && sweepcounter-- == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+60]
	shr	dl, 4
	and	dl, 7
	movzx	eax, dl
	test	eax, eax
	je	$LN4@SweepTick
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+15]
	mov	DWORD PTR tv77[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+15]
	sub	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+15], cl
	cmp	DWORD PTR tv77[ebp], 0
	jne	SHORT $LN6@SweepTick
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN7@SweepTick
$LN6@SweepTick:
	mov	DWORD PTR tv78[ebp], 0
$LN7@SweepTick:
	cmp	DWORD PTR tv78[ebp], 0
	je	SHORT $LN4@SweepTick

; 138  : 				sweepfreqcounter >>= sc_->nr10_.sweep_shift;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx+60]
	and	dl, 7
	movzx	cx, dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [eax+8]
	shr	dx, cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+8], dx

; 139  : 			  sweepcounter = sc_->nr10_.sweep_time;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	al, BYTE PTR [edx+60]
	shr	al, 4
	and	al, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+15], al

; 140  : 				if (sc_->nr10_.incdec)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	cl, BYTE PTR [eax+60]
	shr	cl, 3
	and	cl, 1
	movzx	edx, cl
	test	edx, edx
	je	SHORT $LN2@SweepTick

; 141  : 					freqcounter += sweepfreqcounter;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+6]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+6], ax

; 142  : 				else

	jmp	SHORT $LN4@SweepTick
$LN2@SweepTick:

; 143  : 					freqcounter -= sweepfreqcounter;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+6]
	sub	edx, eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+6], dx
$LN4@SweepTick:

; 144  : 			}
; 145  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?SweepTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ENDP ; emulation::gb::SoundController::<unnamed-type-channel1>::SweepTick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?Initialize@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXPAV234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sc$ = 8						; size = 4
?Initialize@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXPAV234@@Z PROC ; emulation::gb::SoundController::<unnamed-type-channel1>::Initialize, COMDAT
; _this$ = ecx

; 126  :     void Initialize(SoundController* sc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 127  :       sc_ = sc;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sc$[ebp]
	mov	DWORD PTR [eax], ecx

; 128  :       wavepatterncounter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+12], 0

; 129  :       wavepatternduty = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+11], 0

; 130  :       freqcounter = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+6], cx

; 131  :       sample = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 132  : 			envelope.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+10], 0

; 133  : 			sweepcounter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+15], 0

; 134  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXPAV234@@Z ENDP ; emulation::gb::SoundController::<unnamed-type-channel1>::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
tv522 = -52						; size = 4
tv549 = -48						; size = 4
tv259 = -44						; size = 4
tv246 = -40						; size = 4
tv90 = -36						; size = 4
_s$1 = -32						; size = 4
_r$2 = -28						; size = 4
_x$3 = -24						; size = 4
_x$4 = -20						; size = 4
_x$5 = -16						; size = 4
_x$6 = -12						; size = 4
_index$7 = -8						; size = 4
_this$ = -4						; size = 4
_address$ = 8						; size = 2
_data$ = 12						; size = 1
?Write@SoundController@gb@emulation@@QAEXGE@Z PROC	; emulation::gb::SoundController::Write
; _this$ = ecx

; 250  : void SoundController::Write(uint16_t address, uint8_t data) {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 251  :   ioports[address-0xFF10] = data;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+eax-65296], cl

; 252  :   if (address>=0xFF30 && address<=0xFF3F) {

	movzx	edx, WORD PTR _address$[ebp]
	cmp	edx, 65328				; 0000ff30H
	jl	SHORT $LN35@Write
	movzx	eax, WORD PTR _address$[ebp]
	cmp	eax, 65343				; 0000ff3fH
	jg	SHORT $LN35@Write

; 253  :      int index = (address & 0x0F)<<1;

	movzx	ecx, WORD PTR _address$[ebp]
	and	ecx, 15					; 0000000fH
	shl	ecx, 1
	mov	DWORD PTR _index$7[ebp], ecx

; 254  :      wavram[index] = data>>4;

	movzx	edx, BYTE PTR _data$[ebp]
	sar	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _index$7[ebp]
	mov	BYTE PTR [eax+74], dl

; 255  :      wavram[index+1] = data&0xF;

	movzx	ecx, BYTE PTR _data$[ebp]
	and	ecx, 15					; 0000000fH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _index$7[ebp]
	mov	BYTE PTR [edx+75], cl
$LN35@Write:

; 256  :   }
; 257  : 
; 258  :   switch (address) {

	movzx	eax, WORD PTR _address$[ebp]
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	sub	ecx, 65296				; 0000ff10H
	mov	DWORD PTR tv90[ebp], ecx
	cmp	DWORD PTR tv90[ebp], 22			; 00000016H
	ja	$LN33@Write
	mov	edx, DWORD PTR tv90[ebp]
	jmp	DWORD PTR $LN40@Write[edx*4]
$LN32@Write:

; 259  :     case 0xFF10:
; 260  :       nr10_.raw = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+60], cl

; 261  : 			
; 262  :       break;

	jmp	$LN33@Write
$LN31@Write:

; 263  :     case 0xFF11:
; 264  :       nr11_.raw = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+61], al

; 265  :       channel1.wavepatternduty = (data&0xC0)>>3;

	movzx	ecx, BYTE PTR _data$[ebp]
	and	ecx, 192				; 000000c0H
	sar	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+123], cl

; 266  :       channel1.lengthcounterload = 64 - (data&0x3F);

	movzx	eax, BYTE PTR _data$[ebp]
	and	eax, 63					; 0000003fH
	mov	ecx, 64					; 00000040H
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+125], cl

; 267  :       break;

	jmp	$LN33@Write
$LN30@Write:

; 268  :     case 0xFF12:
; 269  :       nr12_.raw = data;    

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+62], cl

; 270  :       break;

	jmp	$LN33@Write
$LN29@Write:

; 271  :     case 0xFF13:
; 272  :       nr13_ = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+63], al

; 273  :       break;

	jmp	$LN33@Write
$LN28@Write:

; 274  :     case 0xFF14: {
; 275  :       nr14_ = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+64], dl

; 276  :       uint32_t x = nr13_;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	mov	DWORD PTR _x$6[ebp], ecx

; 277  :       x |= (nr14_&0x7)<<8;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+64]
	and	eax, 7
	shl	eax, 8
	or	eax, DWORD PTR _x$6[ebp]
	mov	DWORD PTR _x$6[ebp], eax

; 278  :       channel1.freqcounterload = 2048-x;

	mov	ecx, 2048				; 00000800H
	sub	ecx, DWORD PTR _x$6[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+116], cx

; 279  : 
; 280  :       //channel1freq = 131072.0f/(2048-x);
; 281  :       if (nr14_ & 0x80) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	and	ecx, 128				; 00000080H
	je	SHORT $LN27@Write

; 282  :         nr52_ |= 0x01;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+210]
	or	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+210], al

; 283  :         channel1envcounterms = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+184], xmm0

; 284  : 
; 285  :         channel1.envelope.raw = nr12_.raw;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+62]
	mov	BYTE PTR [eax+122], dl

; 286  : 				channel1.sweepcounter = nr10_.sweep_time;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+60]
	shr	cl, 4
	and	cl, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+127], cl

; 287  : 				channel1.sweepfreqcounter = channel1.freqcounterload;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+116]
	mov	WORD PTR [eax+120], dx

; 288  :         channel1.freqcounter = channel1.freqcounterload;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+116]
	mov	WORD PTR [eax+118], dx

; 289  :         channel1.lengthcounter = channel1.lengthcounterload;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+125]
	mov	BYTE PTR [eax+126], dl
$LN27@Write:

; 290  :       }
; 291  :       break;

	jmp	$LN33@Write
$LN26@Write:

; 292  :     }
; 293  : 
; 294  : 
; 295  :     case 0xFF16:
; 296  :       nr21_.raw = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+65], cl

; 297  :       channel2.wavepatternduty = (data&0xC0)>>3;

	movzx	edx, BYTE PTR _data$[ebp]
	and	edx, 192				; 000000c0H
	sar	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+133], dl

; 298  :       channel2.lengthcounterload = 64 - (data&0x3F);

	movzx	ecx, BYTE PTR _data$[ebp]
	and	ecx, 63					; 0000003fH
	mov	edx, 64					; 00000040H
	sub	edx, ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+144], dl

; 299  :       break;

	jmp	$LN33@Write
$LN25@Write:

; 300  :     case 0xFF17:
; 301  :       nr22_.raw = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+66], dl

; 302  :       break;

	jmp	$LN33@Write
$LN24@Write:

; 303  :     case 0xFF18:
; 304  :       nr23_ = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+67], cl

; 305  :       break;

	jmp	$LN33@Write
$LN23@Write:

; 306  :     case 0xFF19: {
; 307  :       nr24_ = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+68], al

; 308  :       uint32_t x = nr23_;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+67]
	mov	DWORD PTR _x$5[ebp], edx

; 309  :       x |= (nr24_&0x7)<<8;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	and	ecx, 7
	shl	ecx, 8
	or	ecx, DWORD PTR _x$5[ebp]
	mov	DWORD PTR _x$5[ebp], ecx

; 310  : 			channel2.freqcounterload = 2048-x;

	mov	edx, 2048				; 00000800H
	sub	edx, DWORD PTR _x$5[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+140], dx

; 311  :       //channel2freq = 131072.0f/(2048-x);
; 312  :       if (nr24_ & 0x80) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+68]
	and	edx, 128				; 00000080H
	je	SHORT $LN22@Write

; 313  :         nr52_ |= 0x01;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+210]
	or	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+210], cl

; 314  :         channel2envcounterms = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+188], xmm0

; 315  :         channel2.envelope.raw = nr22_.raw;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+66]
	mov	BYTE PTR [ecx+132], al

; 316  : 
; 317  :         channel2.freqcounter = channel2.freqcounterload;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+140]
	mov	WORD PTR [ecx+142], ax

; 318  :         channel2.lengthcounter = channel2.lengthcounterload;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+144]
	mov	BYTE PTR [ecx+145], al
$LN22@Write:

; 319  :       }
; 320  :       break;

	jmp	$LN33@Write
$LN21@Write:

; 321  :     }
; 322  : 
; 323  :     case 0xFF1A:
; 324  :       nr30_ = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+69], dl

; 325  :       channel3.enabled = (nr30_&0x80)==0x80;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+69]
	and	ecx, 128				; 00000080H
	je	SHORT $LN38@Write
	mov	DWORD PTR tv246[ebp], 1
	jmp	SHORT $LN39@Write
$LN38@Write:
	mov	DWORD PTR tv246[ebp], 0
$LN39@Write:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv246[ebp]
	mov	BYTE PTR [edx+175], al

; 326  :       break;

	jmp	$LN33@Write
$LN20@Write:

; 327  :     case 0xFF1B:
; 328  :       nr31_ = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+70], dl

; 329  : 			channel3.lengthcounterload = 256 - data;

	movzx	eax, BYTE PTR _data$[ebp]
	mov	ecx, 256				; 00000100H
	sub	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+172], cl

; 330  :       break;

	jmp	$LN33@Write
$LN19@Write:

; 331  :     case 0xFF1C:
; 332  :       nr32_ = data;  

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+71], cl

; 333  :       switch ((nr32_ & 0x60)>>5) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+71]
	and	eax, 96					; 00000060H
	sar	eax, 5
	mov	DWORD PTR tv259[ebp], eax
	cmp	DWORD PTR tv259[ebp], 3
	ja	SHORT $LN17@Write
	mov	ecx, DWORD PTR tv259[ebp]
	jmp	DWORD PTR $LN41@Write[ecx*4]
$LN16@Write:

; 334  :         case 0x0:channel3.vol = 0; break;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+156], xmm0
	jmp	SHORT $LN17@Write
$LN15@Write:

; 335  :         case 0x1:channel3.vol = 1.0f; break;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+156], xmm0
	jmp	SHORT $LN17@Write
$LN14@Write:

; 336  :         case 0x2:channel3.vol = 0.5f; break;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [ecx+156], xmm0
	jmp	SHORT $LN17@Write
$LN13@Write:

; 337  :         case 0x3:channel3.vol = 0.25f; break;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [edx+156], xmm0
$LN17@Write:

; 338  :       }
; 339  :       break;

	jmp	$LN33@Write
$LN12@Write:

; 340  :     case 0xFF1D:
; 341  :       nr33_ = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+72], cl

; 342  :       break;

	jmp	$LN33@Write
$LN11@Write:

; 343  :     case 0xFF1E: {
; 344  :       nr34_ = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+73], al

; 345  :       uint32_t x = nr33_;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+72]
	mov	DWORD PTR _x$4[ebp], edx

; 346  :       x |= (nr34_&0x7)<<8;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+73]
	and	ecx, 7
	shl	ecx, 8
	or	ecx, DWORD PTR _x$4[ebp]
	mov	DWORD PTR _x$4[ebp], ecx

; 347  : 			channel3.freqcounterload = 2048-x;

	mov	edx, 2048				; 00000800H
	sub	edx, DWORD PTR _x$4[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+170], dx

; 348  :       //if (nr34_&0x40)
; 349  :         //channel3.soundlength_ms = 1000.0f * (256.0f-nr31_)*(1/256.0f);
; 350  :       if ((nr34_&0x80)&&(nr30_&0x80)) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+73]
	and	edx, 128				; 00000080H
	je	SHORT $LN10@Write
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+69]
	and	ecx, 128				; 00000080H
	je	SHORT $LN10@Write

; 351  :         nr52_ |= 0x04;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+210]
	or	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+210], al

; 352  :         channel3.lengthcounter = channel3.lengthcounterload;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+172]
	mov	BYTE PTR [edx+173], cl

; 353  :         channel3.freqcounter = channel3.freqcounterload;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+170]
	mov	WORD PTR [edx+168], cx

; 354  :         channel3.playback_counter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+160], 0

; 355  :         channel3.enabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+175], 1

; 356  :         memset(&ioports[0x30],0,16);

	push	16					; 00000010H
	push	0
	mov	ecx, 1
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN10@Write:

; 357  :       }
; 358  :       break;

	jmp	$LN33@Write
$LN9@Write:

; 359  :     }
; 360  : 
; 361  :     case 0xFF20:
; 362  :       nr41_.raw = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+106], cl

; 363  :       break;

	jmp	$LN33@Write
$LN8@Write:

; 364  :     case 0xFF21:
; 365  :       nr42_.raw = data;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _data$[ebp]
	mov	BYTE PTR [edx+107], al

; 366  :       break;

	jmp	$LN33@Write
$LN7@Write:

; 367  :     case 0xFF22:
; 368  :       nr43_ = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+108], dl

; 369  :       break;

	jmp	$LN33@Write
$LN6@Write:

; 370  :     case 0xFF23: {
; 371  :       nr44_ = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+109], cl

; 372  :       uint32_t x = nr43_;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+108]
	mov	DWORD PTR _x$3[ebp], eax

; 373  :       x |= (nr44_&0x7)<<8;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+109]
	and	edx, 7
	shl	edx, 8
	or	edx, DWORD PTR _x$3[ebp]
	mov	DWORD PTR _x$3[ebp], edx

; 374  :       float r = float(nr43_&0x7);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+108]
	and	ecx, 7
	cvtsi2ss xmm0, ecx
	movss	DWORD PTR _r$2[ebp], xmm0

; 375  :       float s = float((nr43_&0xF0)>>4);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+108]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _s$1[ebp], xmm0

; 376  :       channel4freq = 524288.0f/r/powf(2.0,s+1);

	movss	xmm0, DWORD PTR __real@49000000
	divss	xmm0, DWORD PTR _r$2[ebp]
	movss	xmm1, DWORD PTR _s$1[ebp]
	addss	xmm1, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm1
	push	ecx
	movss	xmm1, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv549[ebp], xmm0
	call	_powf
	add	esp, 8
	fstp	DWORD PTR tv522[ebp]
	movss	xmm0, DWORD PTR tv549[ebp]
	divss	xmm0, DWORD PTR tv522[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+192], xmm0

; 377  :       if (nr24_ & 0x80) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+68]
	and	eax, 128				; 00000080H
	je	SHORT $LN5@Write

; 378  :         nr52_ |= 0x08;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+210]
	or	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+210], dl

; 379  :         channel4envcounterms = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+196], xmm0

; 380  :         channel4polycounterms = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+200], xmm0

; 381  :         channel4soundlengthcounter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+204], xmm0

; 382  :         channel4.envelope.raw = nr42_.raw;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+107]
	mov	BYTE PTR [ecx+180], al
$LN5@Write:

; 383  :       }
; 384  :       break;

	jmp	SHORT $LN33@Write
$LN4@Write:

; 385  :     }
; 386  : 
; 387  :     case 0xFF24:
; 388  :       nr50_.raw = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [ecx+208], dl

; 389  :       break;

	jmp	SHORT $LN33@Write
$LN3@Write:

; 390  :     case 0xFF25:
; 391  :       nr51_.raw = data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _data$[ebp]
	mov	BYTE PTR [eax+209], cl

; 392  :       break;

	jmp	SHORT $LN33@Write
$LN2@Write:

; 393  :     case 0xFF26:
; 394  :       nr52_ = (data&0xF0) | (nr52_&0x0F);

	movzx	edx, BYTE PTR _data$[ebp]
	and	edx, 240				; 000000f0H
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+210]
	and	ecx, 15					; 0000000fH
	or	edx, ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+210], dl

; 395  :       if ((nr52_&0x80)==0)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+210]
	and	edx, 128				; 00000080H
	jne	SHORT $LN1@Write

; 396  :         Reset();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Write:
$LN33@Write:

; 397  :       break;
; 398  :  
; 399  :   }
; 400  : }

	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN40@Write:
	DD	$LN32@Write
	DD	$LN31@Write
	DD	$LN30@Write
	DD	$LN29@Write
	DD	$LN28@Write
	DD	$LN33@Write
	DD	$LN26@Write
	DD	$LN25@Write
	DD	$LN24@Write
	DD	$LN23@Write
	DD	$LN21@Write
	DD	$LN20@Write
	DD	$LN19@Write
	DD	$LN12@Write
	DD	$LN11@Write
	DD	$LN33@Write
	DD	$LN9@Write
	DD	$LN8@Write
	DD	$LN7@Write
	DD	$LN6@Write
	DD	$LN4@Write
	DD	$LN3@Write
	DD	$LN2@Write
$LN41@Write:
	DD	$LN16@Write
	DD	$LN15@Write
	DD	$LN14@Write
	DD	$LN13@Write
?Write@SoundController@gb@emulation@@QAEXGE@Z ENDP	; emulation::gb::SoundController::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_address$ = 8						; size = 2
?Read@SoundController@gb@emulation@@QAEEG@Z PROC	; emulation::gb::SoundController::Read
; _this$ = ecx

; 195  : uint8_t SoundController::Read(uint16_t address) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 196  : 
; 197  :   if (address>=0xFF30 && address<=0xFF3F)

	movzx	eax, WORD PTR _address$[ebp]
	cmp	eax, 65328				; 0000ff30H
	jl	SHORT $LN24@Read
	movzx	ecx, WORD PTR _address$[ebp]
	cmp	ecx, 65343				; 0000ff3fH
	jg	SHORT $LN24@Read

; 198  :     return ioports[address-0xFF10];

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR [ecx+edx-65296]
	jmp	$LN25@Read
$LN24@Read:

; 199  : 
; 200  :   switch (address) {

	movzx	edx, WORD PTR _address$[ebp]
	mov	DWORD PTR tv74[ebp], edx
	mov	eax, DWORD PTR tv74[ebp]
	sub	eax, 65296				; 0000ff10H
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 22			; 00000016H
	ja	$LN22@Read
	mov	ecx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN27@Read[ecx*4]
$LN21@Read:

; 201  :     case 0xFF10:
; 202  :       ioports[address-0xFF10] = nr10_.raw;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+60]
	mov	BYTE PTR [ecx+edx-65296], al
$LN20@Read:

; 203  :     case 0xFF11:
; 204  :       ioports[address-0xFF10] = nr11_.raw;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+61]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN19@Read:

; 205  :     case 0xFF12:
; 206  :       ioports[address-0xFF10] = nr12_.raw;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+62]
	mov	BYTE PTR [edx+eax-65296], cl
$LN18@Read:

; 207  :     case 0xFF13:
; 208  :       ioports[address-0xFF10] = nr13_;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+63]
	mov	BYTE PTR [ecx+edx-65296], al
$LN17@Read:

; 209  :     case 0xFF14:
; 210  :       ioports[address-0xFF10] = nr14_;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+64]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN16@Read:

; 211  :     case 0xFF16:
; 212  :       ioports[address-0xFF10] = nr21_.raw;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+65]
	mov	BYTE PTR [edx+eax-65296], cl
$LN15@Read:

; 213  :     case 0xFF17:
; 214  :       ioports[address-0xFF10] = nr22_.raw;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+66]
	mov	BYTE PTR [ecx+edx-65296], al
$LN14@Read:

; 215  :     case 0xFF18:
; 216  :       ioports[address-0xFF10] = nr23_;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+67]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN13@Read:

; 217  :     case 0xFF19:
; 218  :       ioports[address-0xFF10] = nr24_;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+68]
	mov	BYTE PTR [edx+eax-65296], cl
$LN12@Read:

; 219  : 
; 220  :     case 0xFF1A:
; 221  :       ioports[address-0xFF10] = nr30_;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+69]
	mov	BYTE PTR [ecx+edx-65296], al
$LN11@Read:

; 222  :     case 0xFF1B:
; 223  :       ioports[address-0xFF10] = nr31_;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+70]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN10@Read:

; 224  :     case 0xFF1C:
; 225  :       ioports[address-0xFF10] = nr32_;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+71]
	mov	BYTE PTR [edx+eax-65296], cl
$LN9@Read:

; 226  :     case 0xFF1D:
; 227  :       ioports[address-0xFF10] = nr33_;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+72]
	mov	BYTE PTR [ecx+edx-65296], al
$LN8@Read:

; 228  :     case 0xFF1E:
; 229  :       ioports[address-0xFF10] = nr34_;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+73]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN7@Read:

; 230  : 
; 231  :     case 0xFF20:
; 232  :       ioports[address-0xFF10] = nr41_.raw;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+106]
	mov	BYTE PTR [edx+eax-65296], cl
$LN6@Read:

; 233  :     case 0xFF21:
; 234  :       ioports[address-0xFF10] = nr42_.raw;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+107]
	mov	BYTE PTR [ecx+edx-65296], al
$LN5@Read:

; 235  :     case 0xFF22:
; 236  :       ioports[address-0xFF10] = nr43_;

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+108]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN4@Read:

; 237  :     case 0xFF23:
; 238  :       ioports[address-0xFF10] = nr44_;

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+109]
	mov	BYTE PTR [edx+eax-65296], cl
$LN3@Read:

; 239  : 
; 240  :     case 0xFF24:
; 241  :       ioports[address-0xFF10] = nr50_.raw;

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+208]
	mov	BYTE PTR [ecx+edx-65296], al
$LN2@Read:

; 242  :     case 0xFF25:
; 243  :       ioports[address-0xFF10] = nr51_.raw; 

	movzx	ecx, WORD PTR _address$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [edx+209]
	mov	BYTE PTR [eax+ecx-65296], dl
$LN1@Read:

; 244  :     case 0xFF26:
; 245  :       ioports[address-0xFF10] = nr52_; 

	movzx	eax, WORD PTR _address$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [ecx+210]
	mov	BYTE PTR [edx+eax-65296], cl
$LN22@Read:

; 246  :   }
; 247  : 	return ioports[address-0xFF10];

	movzx	edx, WORD PTR _address$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR [ecx+edx-65296]
$LN25@Read:

; 248  : }

	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN27@Read:
	DD	$LN21@Read
	DD	$LN20@Read
	DD	$LN19@Read
	DD	$LN18@Read
	DD	$LN17@Read
	DD	$LN22@Read
	DD	$LN16@Read
	DD	$LN15@Read
	DD	$LN14@Read
	DD	$LN13@Read
	DD	$LN12@Read
	DD	$LN11@Read
	DD	$LN10@Read
	DD	$LN9@Read
	DD	$LN8@Read
	DD	$LN22@Read
	DD	$LN7@Read
	DD	$LN6@Read
	DD	$LN5@Read
	DD	$LN4@Read
	DD	$LN3@Read
	DD	$LN2@Read
	DD	$LN1@Read
?Read@SoundController@gb@emulation@@QAEEG@Z ENDP	; emulation::gb::SoundController::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
tv401 = -60						; size = 4
tv144 = -56						; size = 4
tv130 = -52						; size = 4
tv129 = -48						; size = 4
$T1 = -41						; size = 1
_sample_right$2 = -40					; size = 4
_sample_left$3 = -36					; size = 4
_channel4_sample$4 = -32				; size = 4
_channel3_sample$5 = -28				; size = 4
_channel2_sample$6 = -24				; size = 4
_channel1_sample$7 = -20				; size = 4
_envelopeTick$ = -9					; size = 1
_this$ = -4						; size = 4
_dt$ = 8						; size = 8
?Step@SoundController@gb@emulation@@QAEXN@Z PROC	; emulation::gb::SoundController::Step
; _this$ = ecx

; 70   : void SoundController::Step(double dt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   :   if ((nr52_&0x80)==0)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+210]
	and	ecx, 128				; 00000080H
	jne	SHORT $LN9@Step

; 72   :     return;

	jmp	$LN10@Step
$LN9@Step:

; 73   : 
; 74   : 
; 75   :   auto envelopeTick = [](VolumeEnvelope& envreg,real_t& counter){
; 76   :     float env_step_ms = envreg.env_sweep/64.0f*1000.0f;
; 77   : 
; 78   :     if (env_step_ms != 0 && counter >= env_step_ms) {
; 79   :         if (envreg.direction && envreg.vol<0xF)
; 80   :           ++envreg.vol;
; 81   :         if (!envreg.direction && envreg.vol>0)
; 82   :           --envreg.vol;
; 83   :       counter = 0;
; 84   :     }
; 85   :   };

	xor	edx, edx
	mov	BYTE PTR $T1[ebp], dl

; 86   : 
; 87   : 
; 88   : 
; 89   :   if ((maincounter & 0x3) == 0) {// its like every 32/8 because 8 samples in duty cycle

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+110]
	and	ecx, 3
	jne	SHORT $LN8@Step

; 90   :       channel1.SampleTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?SampleTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::SampleTick

; 91   : 			channel2.SampleTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	?SampleTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel2>::SampleTick
$LN8@Step:

; 92   :   }
; 93   : 
; 94   : 	if ((maincounter & 0x1) == 0) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+110]
	and	eax, 1
	jne	SHORT $LN7@Step

; 95   :       channel3.SampleTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?SampleTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEEXZ ; emulation::gb::SoundController::<unnamed-type-channel3>::SampleTick
$LN7@Step:

; 96   :   }
; 97   : 
; 98   : 	maincounter = (maincounter+1) & 0x1F;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+110]
	add	edx, 1
	and	edx, 31					; 0000001fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+110], dl

; 99   : 
; 100  :   if (ulencounterclock++ == 16384) { //256hz from original cpu speed

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+111]
	mov	DWORD PTR tv129[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+111]
	add	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+111], cl
	cmp	DWORD PTR tv129[ebp], 16384		; 00004000H
	jne	SHORT $LN12@Step
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN13@Step
$LN12@Step:
	mov	DWORD PTR tv130[ebp], 0
$LN13@Step:
	cmp	DWORD PTR tv130[ebp], 0
	je	SHORT $LN6@Step

; 101  : 		channel1.LengthTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?LengthTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::LengthTick

; 102  : 		channel2.LengthTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	?LengthTick@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel2>::LengthTick

; 103  : 		channel3.LengthTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?LengthTick@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel3>::LengthTick

; 104  : 		static bool sweep_tick = false;
; 105  : 		if (sweep_tick) { //128hz

	movzx	eax, BYTE PTR ?sweep_tick@?BF@??Step@SoundController@gb@emulation@@QAEXN@Z@4_NA
	test	eax, eax
	je	SHORT $LN5@Step

; 106  : 			channel1.SweepTick();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?SweepTick@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXXZ ; emulation::gb::SoundController::<unnamed-type-channel1>::SweepTick
$LN5@Step:

; 107  : 		}
; 108  : 		sweep_tick = !sweep_tick;

	movzx	ecx, BYTE PTR ?sweep_tick@?BF@??Step@SoundController@gb@emulation@@QAEXN@Z@4_NA
	test	ecx, ecx
	jne	SHORT $LN14@Step
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN15@Step
$LN14@Step:
	mov	DWORD PTR tv144[ebp], 0
$LN15@Step:
	mov	dl, BYTE PTR tv144[ebp]
	mov	BYTE PTR ?sweep_tick@?BF@??Step@SoundController@gb@emulation@@QAEXN@Z@4_NA, dl

; 109  : 		ulencounterclock = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+111], 0
$LN6@Step:

; 110  :   }
; 111  : 
; 112  :   //channel1
; 113  :   //if (nr14_ & 0x80)
; 114  :   {
; 115  :     channel1envcounterms += float(dt);

	cvtsd2ss xmm0, QWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+184], xmm0

; 116  :     envelopeTick(channel1.envelope,channel1envcounterms);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 122				; 0000007aH
	push	ecx
	lea	ecx, DWORD PTR _envelopeTick$[ebp]
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()

; 117  :   }
; 118  : 
; 119  :   //channel2
; 120  :   //if (nr24_ & 0x80)
; 121  :   {
; 122  :     channel2envcounterms += float(dt);

	cvtsd2ss xmm0, QWORD PTR _dt$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx+188]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+188], xmm0

; 123  :     envelopeTick(channel2.envelope,channel2envcounterms);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 188				; 000000bcH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	lea	ecx, DWORD PTR _envelopeTick$[ebp]
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()

; 124  :   }
; 125  :   
; 126  :   //channel3
; 127  :   //real_t wavsample = 0;
; 128  :  // static int wavindex = 0;
; 129  :   {
; 130  :     //static real_t wavsamplecount = 0;
; 131  :     //channel3.Tick(float(dt));
; 132  : 
; 133  :   }
; 134  : 
; 135  :   //channel4
; 136  :  // real_t noisesample = 0;
; 137  :   //if (nr44_ & 0x80)
; 138  :   {
; 139  : 
; 140  :     //channel4polycounterms += float(dt);
; 141  :     //static bool alt = false;
; 142  :     //real_t noisetimems = 1000.0f/channel4freq;
; 143  :     //if (channel4polycounterms >= noisetimems) {
; 144  :       //noisesample = (alt*(rand()%255))/255.0f;
; 145  :    //   alt = !alt;
; 146  :    //   channel4polycounterms = 0;
; 147  :    // }
; 148  :     channel4envcounterms += float(dt);

	cvtsd2ss xmm0, QWORD PTR _dt$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [eax+196]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+196], xmm0

; 149  :     envelopeTick(channel4.envelope,channel4envcounterms);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 196				; 000000c4H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 180				; 000000b4H
	push	eax
	lea	ecx, DWORD PTR _envelopeTick$[ebp]
	call	??R<lambda_41a3813a41e43ee16132fa6899cc2399>@@QBEXAATVolumeEnvelope@gb@emulation@@AAM@Z ; <lambda_41a3813a41e43ee16132fa6899cc2399>::operator()

; 150  : 
; 151  :     channel4soundlengthcounter += float(dt);

	cvtsd2ss xmm0, QWORD PTR _dt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+204]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+204], xmm0

; 152  :     if (nr44_ & 0x40) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+109]
	and	ecx, 64					; 00000040H
	je	SHORT $LN3@Step

; 153  :       if (channel4soundlengthcounter >= nr41_.soundlength_ms()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 106				; 0000006aH
	call	?soundlength_ms@SoundLengthWaveDutyRegister@gb@emulation@@QAEMXZ ; emulation::gb::SoundLengthWaveDutyRegister::soundlength_ms
	fstp	DWORD PTR tv401[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+204]
	comiss	xmm0, DWORD PTR tv401[ebp]
	jb	SHORT $LN3@Step

; 154  :         nr44_ &= ~0x80;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+109]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+109], cl
$LN3@Step:

; 155  :       }
; 156  :     }
; 157  :   }
; 158  : 
; 159  :   ++sample_counter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 160  :   if (sample_counter >= sample_ratio)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+20]
	jb	$LN1@Step

; 161  :   {
; 162  : 
; 163  :     //osc1.Tick(osc1.get_increment(channel1freq))* (channel1env.vol / 15.0f);//
; 164  :     auto channel1_sample = ((channel1.sample) * (channel1.envelope.vol / 15.0f));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	cvtsi2ss xmm0, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+122]
	shr	al, 4
	and	al, 15					; 0000000fH
	movzx	ecx, al
	cvtsi2ss xmm1, ecx
	divss	xmm1, DWORD PTR __real@41700000
	mulss	xmm0, xmm1
	movss	DWORD PTR _channel1_sample$7[ebp], xmm0

; 165  :     auto channel2_sample = ((channel2.sample) * (channel2.envelope.vol / 15.0f));//osc2.Tick(osc2.get_increment(channel2freq)) * (channel2env.vol / 15.0f);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+146]
	cvtsi2ss xmm0, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+132]
	shr	dl, 4
	and	dl, 15					; 0000000fH
	movzx	eax, dl
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@41700000
	mulss	xmm0, xmm1
	movss	DWORD PTR _channel2_sample$6[ebp], xmm0

; 166  : 
; 167  :     auto channel3_sample = channel3.sample / 15.0f; 

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+174]
	cvtsi2ss xmm0, edx
	divss	xmm0, DWORD PTR __real@41700000
	movss	DWORD PTR _channel3_sample$5[ebp], xmm0

; 168  : 		channel3_sample = (channel3_sample)*channel3.vol;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _channel3_sample$5[ebp]
	mulss	xmm0, DWORD PTR [eax+156]
	movss	DWORD PTR _channel3_sample$5[ebp], xmm0

; 169  : 
; 170  :     auto channel4_sample = 0;//noise.Tick(osc2.get_increment(channel4freq)) * (channel4env.vol / 15.0f);

	mov	DWORD PTR _channel4_sample$4[ebp], 0

; 171  :     //wavsamplecount = 0;
; 172  :     auto sample_left = ((nr51_.ch1so1 * channel1_sample)+(nr51_.ch2so1 * channel2_sample)+(nr51_.ch3so1 * channel3_sample)+(nr51_.ch4so1 * channel4_sample));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _channel1_sample$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 1
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR _channel2_sample$6[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 2
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR _channel3_sample$5[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 3
	and	dl, 1
	movzx	eax, dl
	imul	eax, DWORD PTR _channel4_sample$4[ebp]
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	movss	DWORD PTR _sample_left$3[ebp], xmm0

; 173  :     auto sample_right = ((nr51_.ch1so2 * channel1_sample)+(nr51_.ch2so2 * channel2_sample)+(nr51_.ch3so2 * channel3_sample)+(nr51_.ch4so2 * channel4_sample));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 4
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _channel1_sample$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 5
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR _channel2_sample$6[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 6
	and	dl, 1
	movzx	eax, dl
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR _channel3_sample$5[ebp]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+209]
	shr	dl, 7
	and	dl, 1
	movzx	eax, dl
	imul	eax, DWORD PTR _channel4_sample$4[ebp]
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	movss	DWORD PTR _sample_right$2[ebp], xmm0

; 174  : 		
; 175  : 		sample_left = ((sample_left*2.0f)-1) * 0.25f * 32767.0f;

	movss	xmm0, DWORD PTR _sample_left$3[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR __real@46fffe00
	movss	DWORD PTR _sample_left$3[ebp], xmm0

; 176  : 		sample_right = ((sample_right*2.0f)-1) * 0.25f * 32767.0f;

	movss	xmm0, DWORD PTR _sample_right$2[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3e800000
	mulss	xmm0, DWORD PTR __real@46fffe00
	movss	DWORD PTR _sample_right$2[ebp], xmm0

; 177  :     sample_left *= nr50_.so1vol / 7.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+208]
	and	dl, 7
	movzx	eax, dl
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40e00000
	mulss	xmm0, DWORD PTR _sample_left$3[ebp]
	movss	DWORD PTR _sample_left$3[ebp], xmm0

; 178  :     sample_right *= nr50_.so2vol / 7.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+208]
	shr	dl, 4
	and	dl, 7
	movzx	eax, dl
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@40e00000
	mulss	xmm0, DWORD PTR _sample_right$2[ebp]
	movss	DWORD PTR _sample_right$2[ebp], xmm0

; 179  : 
; 180  :     static short sbuf[8820]= {0,0};
; 181  :     static int sindex = 0;
; 182  :     sbuf[sindex++] = short(sample_left);

	cvttss2si ecx, DWORD PTR _sample_left$3[ebp]
	mov	edx, DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA
	mov	WORD PTR ?sbuf@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4PAFA[edx*2], cx
	mov	eax, DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA
	add	eax, 1
	mov	DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA, eax

; 183  :     sbuf[sindex++] = short(sample_right); 

	cvttss2si ecx, DWORD PTR _sample_right$2[ebp]
	mov	edx, DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA
	mov	WORD PTR ?sbuf@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4PAFA[edx*2], cx
	mov	eax, DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA
	add	eax, 1
	mov	DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA, eax

; 184  :     sample_counter -= sample_ratio;   

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 185  : 
; 186  :     if (sindex == 8820) {

	cmp	DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA, 8820 ; 00002274H
	jne	SHORT $LN1@Step

; 187  :       output->Write(sbuf,8820<<1);

	mov	esi, esp
	push	17640					; 000044e8H
	push	OFFSET ?sbuf@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4PAFA
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 188  :       sindex = 0;

	mov	DWORD PTR ?sindex@?CF@??Step@SoundController@gb@emulation@@QAEXN@Z@4HA, 0
$LN1@Step:
$LN10@Step:

; 189  :     }
; 190  :   }
; 191  : 
; 192  :   
; 193  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Step
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN18@Step:
	DD	1
	DD	$LN17@Step
$LN17@Step:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN16@Step
$LN16@Step:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?Step@SoundController@gb@emulation@@QAEXN@Z ENDP	; emulation::gb::SoundController::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@SoundController@gb@emulation@@UAEXXZ PROC	; emulation::gb::SoundController::Reset
; _this$ = ecx

; 32   : void SoundController::Reset() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 33   :   channel1envcounterms = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+184], xmm0

; 34   :   channel2envcounterms = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+188], xmm0

; 35   : 
; 36   :   
; 37   :   channel4freq = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+192], xmm0

; 38   :   channel4envcounterms = 0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+196], xmm0

; 39   :   channel4polycounterms = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+200], xmm0

; 40   :   channel4soundlengthcounter = 0;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+204], xmm0

; 41   :  
; 42   :   channel1.Initialize(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	?Initialize@<unnamed-type-channel1>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel1>::Initialize

; 43   : 	channel2.Initialize(this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 132				; 00000084H
	call	?Initialize@<unnamed-type-channel2>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel2>::Initialize

; 44   :   channel3.Initialize(this);

	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?Initialize@<unnamed-type-channel3>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel3>::Initialize

; 45   : 	channel4.Initialize(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	?Initialize@<unnamed-type-channel4>@SoundController@gb@emulation@@QAEXPAV234@@Z ; emulation::gb::SoundController::<unnamed-type-channel4>::Initialize

; 46   :   
; 47   :   nr10_.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+60], 0

; 48   :   nr11_.raw = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+61], 0

; 49   :   nr12_.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+62], 0

; 50   :   nr13_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+63], 0

; 51   :   nr14_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+64], 0

; 52   :   nr21_.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+65], 0

; 53   :   nr22_.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+66], 0

; 54   :   nr23_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+67], 0

; 55   :   nr24_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 0

; 56   :   nr30_ = nr31_ = nr32_ = nr33_ = nr34_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+73], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+72], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+71], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+70], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+69], 0

; 57   :   memset(wavram,0,sizeof(wavram));

	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 74					; 0000004aH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 58   : 
; 59   :   nr41_.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+106], 0

; 60   :   nr42_.raw = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+107], 0

; 61   :   nr43_ = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+108], 0

; 62   :   nr44_ = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+109], 0

; 63   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@SoundController@gb@emulation@@UAEXXZ ENDP	; emulation::gb::SoundController::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deinitialize@SoundController@gb@emulation@@UAEXXZ PROC	; emulation::gb::SoundController::Deinitialize
; _this$ = ecx

; 65   : void SoundController::Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 66   :   output->Deinitialize(); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 67   :   SafeDelete(&output);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$SafeDelete@VInterface@output@audio@@@@YAXPAPAVInterface@output@audio@@@Z ; SafeDelete<audio::output::Interface>
	add	esp, 4

; 68   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@SoundController@gb@emulation@@UAEXXZ ENDP	; emulation::gb::SoundController::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.cpp
_TEXT	SEGMENT
tv201 = -68						; size = 8
tv199 = -60						; size = 4
tv196 = -54						; size = 2
tv194 = -52						; size = 8
tv129 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
_t$ = -28						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_emu$ = 8						; size = 4
?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z PROC ; emulation::gb::SoundController::Initialize
; _this$ = ecx

; 11   : void SoundController::Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 12   :   Component::Initialize(emu);

	mov	eax, DWORD PTR _emu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@Component@gb@emulation@@UAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize

; 13   : 	ioports = emu_->memory()->ioports();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?ioports@Memory@gb@emulation@@QAEPAEXZ	; emulation::gb::Memory::ioports
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 14   :   output = new audio::output::DirectSound();

	push	14					; 0000000eH
	push	OFFSET $SG153685
	push	1
	push	68					; 00000044H
	call	??2@YAPAXIHPBDH@Z			; operator new
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@Initialize
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0DirectSound@output@audio@@QAE@XZ	; audio::output::DirectSound::DirectSound
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN4@Initialize
$LN3@Initialize:
	mov	DWORD PTR tv129[ebp], 0
$LN4@Initialize:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx

; 15   :   output->Initialize(44100,2,16);

	mov	esi, esp
	push	16					; 00000010H
	push	2
	push	44100					; 0000ac44H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 16   :   sample_counter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 17   :   sample_ratio = uint32_t(clockspeed / 44100);

	movsd	xmm0, QWORD PTR _clockspeed
	divsd	xmm0, QWORD PTR __real@40e5888000000000
	movsd	QWORD PTR tv194[ebp], xmm0
	fld	QWORD PTR tv194[ebp]
	fnstcw	WORD PTR tv196[ebp]
	movzx	eax, WORD PTR tv196[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv199[ebp], eax
	fldcw	WORD PTR tv199[ebp]
	fistp	QWORD PTR tv201[ebp]
	fldcw	WORD PTR tv196[ebp]
	mov	ecx, DWORD PTR tv201[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 18   :   noise.set_sample_rate(44100);

	push	44100					; 0000ac44H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?set_sample_rate@Component@synth@audio@@QAEXI@Z ; audio::synth::Component::set_sample_rate

; 19   :   nr50_.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+208], 0

; 20   :   nr51_.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+209], 0

; 21   :   nr52_ = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+210], 0

; 22   :   maincounter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+110], 0

; 23   :   ulencounterclock = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+111], 0

; 24   :   time_t t;
; 25   :   time(&t);

	lea	edx, DWORD PTR _t$[ebp]
	push	edx
	call	_time
	add	esp, 4

; 26   :   srand((int)t);

	mov	eax, DWORD PTR _t$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__srand
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 27   : 
; 28   :   audio::synth::noiseseed = rand();

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ?noiseseed@synth@audio@@3IA, eax ; audio::synth::noiseseed

; 29   :   Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Initialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@Initialize:
	DD	1
	DD	$LN8@Initialize
$LN8@Initialize:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN6@Initialize
$LN6@Initialize:
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z$0:
	push	14					; 0000000eH
	push	OFFSET $SG153686
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXHPBDH@Z			; operator delete
	add	esp, 16					; 00000010H
	ret	0
__ehhandler$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-68]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Initialize@SoundController@gb@emulation@@UAEXPAVEmu@23@@Z ENDP ; emulation::gb::SoundController::Initialize
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\sound_controller.h
;	COMDAT ?soundlength_ms@SoundLengthWaveDutyRegister@gb@emulation@@QAEMXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?soundlength_ms@SoundLengthWaveDutyRegister@gb@emulation@@QAEMXZ PROC ; emulation::gb::SoundLengthWaveDutyRegister::soundlength_ms, COMDAT
; _this$ = ecx

; 34   :  real_t soundlength_ms() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 35   :    return 1000.0f*(64-soundlength)*(1.0f/256.0f) ;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax]
	and	cl, 63					; 0000003fH
	movzx	edx, cl
	mov	eax, 64					; 00000040H
	sub	eax, edx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@447a0000
	mulss	xmm0, DWORD PTR __real@3b800000
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 36   :  }

	mov	esp, ebp
	pop	ebp
	ret	0
?soundlength_ms@SoundLengthWaveDutyRegister@gb@emulation@@QAEMXZ ENDP ; emulation::gb::SoundLengthWaveDutyRegister::soundlength_ms
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?set_sample_rate@Component@synth@audio@@QAEXI@Z
_TEXT	SEGMENT
tv77 = -16						; size = 8
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_sample_rate$ = 8					; size = 4
?set_sample_rate@Component@synth@audio@@QAEXI@Z PROC	; audio::synth::Component::set_sample_rate, COMDAT
; _this$ = ecx

; 73   :   void set_sample_rate(uint32_t sample_rate) { 

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 74   :     sample_rate_ = sample_rate; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _sample_rate$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 75   :     sample_time_ms_ = (1000.0f/sample_rate_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv73[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv73[ebp]
	mov	ecx, DWORD PTR tv73[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv77[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv77[ebp]
	movss	xmm1, DWORD PTR __real@447a0000
	divss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm1

; 76   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?set_sample_rate@Component@synth@audio@@QAEXI@Z ENDP	; audio::synth::Component::set_sample_rate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?ioports@Memory@gb@emulation@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ioports@Memory@gb@emulation@@QAEPAEXZ PROC		; emulation::gb::Memory::ioports, COMDAT
; _this$ = ecx

; 19   :   uint8_t* ioports() { return ioports_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 184				; 000000b8H
	mov	esp, ebp
	pop	ebp
	ret	0
?ioports@Memory@gb@emulation@@QAEPAEXZ ENDP		; emulation::gb::Memory::ioports
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Initialize@Component@gb@emulation@@UAEXPAVEmu@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_emu$ = 8						; size = 4
?Initialize@Component@gb@emulation@@UAEXPAVEmu@23@@Z PROC ; emulation::gb::Component::Initialize, COMDAT
; _this$ = ecx

; 28   :   virtual void Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 29   :     emu_ = emu;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _emu$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 30   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@Component@gb@emulation@@UAEXPAVEmu@23@@Z ENDP ; emulation::gb::Component::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\time.inl
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 132  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 133  :     return _time64(_Time);

	mov	esi, esp
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 120  : 	_Ignore()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _powf
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv77 = -8						; size = 8
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_powf	PROC						; COMDAT

; 428  :         {return ((float)pow((double)_X, (double)_Y)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_pow
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_powf	ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	ConcRT_ProviderGuid
PUBLIC	ConcRTEventGuid
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	SchedulerEventGuid
PUBLIC	ScheduleGroupEventGuid
PUBLIC	ContextEventGuid
PUBLIC	ChoreEventGuid
PUBLIC	VirtualProcessorEventGuid
PUBLIC	LockEventGuid
PUBLIC	ResourceManagerEventGuid
PUBLIC	PPLParallelInvokeEventGuid
PUBLIC	PPLParallelForEventGuid
PUBLIC	PPLParallelForeachEventGuid
PUBLIC	AgentEventGuid
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?value@?$integral_constant@_K$0A@@std@@2_KB	; std::integral_constant<unsigned __int64,0>::value
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB DQ 000000000000000cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000008H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000002H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000001H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000000H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000000H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_K$0A@@std@@2_KB
CONST	SEGMENT
?value@?$integral_constant@_K$0A@@std@@2_KB DQ 0000000000000000H ; std::integral_constant<unsigned __int64,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT AgentEventGuid
CONST	SEGMENT
AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT PPLParallelForeachEventGuid
CONST	SEGMENT
PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT PPLParallelForEventGuid
CONST	SEGMENT
PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT PPLParallelInvokeEventGuid
CONST	SEGMENT
PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT ResourceManagerEventGuid
CONST	SEGMENT
ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT LockEventGuid
CONST	SEGMENT
LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT VirtualProcessorEventGuid
CONST	SEGMENT
VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT ChoreEventGuid
CONST	SEGMENT
ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT ContextEventGuid
CONST	SEGMENT
ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT ScheduleGroupEventGuid
CONST	SEGMENT
ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT SchedulerEventGuid
CONST	SEGMENT
SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ConcRTEventGuid
CONST	SEGMENT
ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT ConcRT_ProviderGuid
CONST	SEGMENT
ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000001H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
CONST	SEGMENT
dmgrom	DB	031H
	DB	0feH
	DB	0ffH
	DB	0afH
	DB	021H
	DB	0ffH
	DB	09fH
	DB	032H
	DB	0cbH
	DB	07cH
	DB	020H
	DB	0fbH
	DB	021H
	DB	026H
	DB	0ffH
	DB	0eH
	DB	011H
	DB	03eH
	DB	080H
	DB	032H
	DB	0e2H
	DB	0cH
	DB	03eH
	DB	0f3H
	DB	0e2H
	DB	032H
	DB	03eH
	DB	077H
	DB	077H
	DB	03eH
	DB	0fcH
	DB	0e0H
	DB	047H
	DB	011H
	DB	04H
	DB	01H
	DB	021H
	DB	010H
	DB	080H
	DB	01aH
	DB	0cdH
	DB	095H
	DB	00H
	DB	0cdH
	DB	096H
	DB	00H
	DB	013H
	DB	07bH
	DB	0feH
	DB	034H
	DB	020H
	DB	0f3H
	DB	011H
	DB	0d8H
	DB	00H
	DB	06H
	DB	08H
	DB	01aH
	DB	013H
	DB	022H
	DB	023H
	DB	05H
	DB	020H
	DB	0f9H
	DB	03eH
	DB	019H
	DB	0eaH
	DB	010H
	DB	099H
	DB	021H
	DB	02fH
	DB	099H
	DB	0eH
	DB	0cH
	DB	03dH
	DB	028H
	DB	08H
	DB	032H
	DB	0dH
	DB	020H
	DB	0f9H
	DB	02eH
	DB	0fH
	DB	018H
	DB	0f3H
	DB	067H
	DB	03eH
	DB	064H
	DB	057H
	DB	0e0H
	DB	042H
	DB	03eH
	DB	091H
	DB	0e0H
	DB	040H
	DB	04H
	DB	01eH
	DB	02H
	DB	0eH
	DB	0cH
	DB	0f0H
	DB	044H
	DB	0feH
	DB	090H
	DB	020H
	DB	0faH
	DB	0dH
	DB	020H
	DB	0f7H
	DB	01dH
	DB	020H
	DB	0f2H
	DB	0eH
	DB	013H
	DB	024H
	DB	07cH
	DB	01eH
	DB	083H
	DB	0feH
	DB	062H
	DB	028H
	DB	06H
	DB	01eH
	DB	0c1H
	DB	0feH
	DB	064H
	DB	020H
	DB	06H
	DB	07bH
	DB	0e2H
	DB	0cH
	DB	03eH
	DB	087H
	DB	0e2H
	DB	0f0H
	DB	042H
	DB	090H
	DB	0e0H
	DB	042H
	DB	015H
	DB	020H
	DB	0d2H
	DB	05H
	DB	020H
	DB	04fH
	DB	016H
	DB	020H
	DB	018H
	DB	0cbH
	DB	04fH
	DB	06H
	DB	04H
	DB	0c5H
	DB	0cbH
	DB	011H
	DB	017H
	DB	0c1H
	DB	0cbH
	DB	011H
	DB	017H
	DB	05H
	DB	020H
	DB	0f5H
	DB	022H
	DB	023H
	DB	022H
	DB	023H
	DB	0c9H
	DB	0ceH
	DB	0edH
	DB	066H
	DB	066H
	DB	0ccH
	DB	0dH
	DB	00H
	DB	0bH
	DB	03H
	DB	073H
	DB	00H
	DB	083H
	DB	00H
	DB	0cH
	DB	00H
	DB	0dH
	DB	00H
	DB	08H
	DB	011H
	DB	01fH
	DB	088H
	DB	089H
	DB	00H
	DB	0eH
	DB	0dcH
	DB	0ccH
	DB	06eH
	DB	0e6H
	DB	0ddH
	DB	0ddH
	DB	0d9H
	DB	099H
	DB	0bbH
	DB	0bbH
	DB	067H
	DB	063H
	DB	06eH
	DB	0eH
	DB	0ecH
	DB	0ccH
	DB	0ddH
	DB	0dcH
	DB	099H
	DB	09fH
	DB	0bbH
	DB	0b9H
	DB	033H
	DB	03eH
	DB	03cH
	DB	042H
	DB	0b9H
	DB	0a5H
	DB	0b9H
	DB	0a5H
	DB	042H
	DB	03cH
	DB	021H
	DB	04H
	DB	01H
	DB	011H
	DB	0a8H
	DB	00H
	DB	01aH
	DB	013H
	DB	0beH
	DB	020H
	DB	0feH
	DB	023H
	DB	07dH
	DB	0feH
	DB	034H
	DB	020H
	DB	0f5H
	DB	06H
	DB	019H
	DB	078H
	DB	086H
	DB	023H
	DB	05H
	DB	020H
	DB	0fbH
	DB	086H
	DB	020H
	DB	0feH
	DB	03eH
	DB	01H
	DB	0e0H
	DB	050H
$SG113690 DB	'Code\emulation\gb\memory.cpp', 00H
	ORG $+3
$SG113693 DB	'Code\emulation\gb\memory.cpp', 00H
	ORG $+3
$SG113696 DB	'Code\emulation\gb\memory.cpp', 00H
	ORG $+3
dutycycletable DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
$SG113786 DB	'%c', 00H
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
PUBLIC	??0_Ignore@std@@QEAA@XZ				; std::_Ignore::_Ignore
PUBLIC	?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Component::Initialize
PUBLIC	?rom@Cartridge@gb@emulation@@QEAAPEBEXZ		; emulation::gb::Cartridge::rom
PUBLIC	??$SafeDeleteArray@E@@YAXPEAPEAE@Z		; SafeDeleteArray<unsigned char>
PUBLIC	?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Memory::Initialize
PUBLIC	?Deinitialize@Memory@gb@emulation@@UEAAXXZ	; emulation::gb::Memory::Deinitialize
PUBLIC	?Reset@Memory@gb@emulation@@UEAAXXZ		; emulation::gb::Memory::Reset
PUBLIC	?Read8@Memory@gb@emulation@@QEAAEG@Z		; emulation::gb::Memory::Read8
PUBLIC	?Write8@Memory@gb@emulation@@QEAAXGE@Z		; emulation::gb::Memory::Write8
PUBLIC	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ	; emulation::gb::Memory::interrupt_flag
PUBLIC	?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z ; emulation::gb::Memory::JoypadPress
PUBLIC	?Tick@Memory@gb@emulation@@QEAAXXZ		; emulation::gb::Memory::Tick
PUBLIC	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
PUBLIC	?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ; emulation::gb::LCDDriver::stat
PUBLIC	?Wake@Cpu@gb@emulation@@QEAAXXZ			; emulation::gb::Cpu::Wake
PUBLIC	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
PUBLIC	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ	; emulation::gb::Emu::cpu
PUBLIC	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
PUBLIC	?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ; emulation::gb::Emu::sc
PUBLIC	?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ	; emulation::gb::Emu::timer
PUBLIC	??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ		; sprintf_s<255>
EXTRN	memset:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__imp_vsprintf_s:PROC
EXTRN	??_U@YAPEAX_KHPEBDH@Z:PROC			; operator new[]
EXTRN	?Read@Cartridge@gb@emulation@@QEAAEG@Z:PROC	; emulation::gb::Cartridge::Read
EXTRN	?Write@Cartridge@gb@emulation@@QEAAXGE@Z:PROC	; emulation::gb::Cartridge::Write
EXTRN	?Read@LCDDriver@gb@emulation@@QEAAEG@Z:PROC	; emulation::gb::LCDDriver::Read
EXTRN	?Write@LCDDriver@gb@emulation@@QEAAXGE@Z:PROC	; emulation::gb::LCDDriver::Write
EXTRN	?Read@SoundController@gb@emulation@@QEAAEG@Z:PROC ; emulation::gb::SoundController::Read
EXTRN	?Write@SoundController@gb@emulation@@QEAAXGE@Z:PROC ; emulation::gb::SoundController::Write
EXTRN	?Read@Timer@gb@emulation@@QEAAEG@Z:PROC		; emulation::gb::Timer::Read
EXTRN	?Write@Timer@gb@emulation@@QEAAXGE@Z:PROC	; emulation::gb::Timer::Write
EXTRN	?Tick@Cpu@gb@emulation@@QEAAXXZ:PROC		; emulation::gb::Cpu::Tick
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
piecewise_construct DB 01H DUP (?)
allocator_arg DB 01H DUP (?)
ignore	DB	01H DUP (?)
_Tuple_alloc DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Epiecewise_construct@std@@YAXXZ DD imagerel ??__Epiecewise_construct@std@@YAXXZ
	DD	imagerel ??__Epiecewise_construct@std@@YAXXZ+43
	DD	imagerel $unwind$??__Epiecewise_construct@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eallocator_arg@std@@YAXXZ DD imagerel ??__Eallocator_arg@std@@YAXXZ
	DD	imagerel ??__Eallocator_arg@std@@YAXXZ+43
	DD	imagerel $unwind$??__Eallocator_arg@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Ignore@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0_Ignore@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eignore@std@@YAXXZ DD imagerel ??__Eignore@std@@YAXXZ
	DD	imagerel ??__Eignore@std@@YAXXZ+39
	DD	imagerel $unwind$??__Eignore@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_Tuple_alloc@std@@YAXXZ DD imagerel ??__E_Tuple_alloc@std@@YAXXZ
	DD	imagerel ??__E_Tuple_alloc@std@@YAXXZ+43
	DD	imagerel $unwind$??__E_Tuple_alloc@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rom@Cartridge@gb@emulation@@QEAAPEBEXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?rom@Cartridge@gb@emulation@@QEAAPEBEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SafeDeleteArray@E@@YAXPEAPEAE@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??$SafeDeleteArray@E@@YAXPEAPEAE@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z DD imagerel $LN3
	DD	imagerel $LN3+318
	DD	imagerel $unwind$?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z
$pdata$?Deinitialize@Memory@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?Deinitialize@Memory@gb@emulation@@UEAAXXZ
$pdata$?Reset@Memory@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?Reset@Memory@gb@emulation@@UEAAXXZ
$pdata$?Read8@Memory@gb@emulation@@QEAAEG@Z DD imagerel $LN40
	DD	imagerel $LN40+1318
	DD	imagerel $unwind$?Read8@Memory@gb@emulation@@QEAAEG@Z
$pdata$?Write8@Memory@gb@emulation@@QEAAXGE@Z DD imagerel $LN41
	DD	imagerel $LN41+1613
	DD	imagerel $unwind$?Write8@Memory@gb@emulation@@QEAAXGE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z
$pdata$?Tick@Memory@gb@emulation@@QEAAXXZ DD imagerel $LN17
	DD	imagerel $LN17+580
	DD	imagerel $unwind$?Tick@Memory@gb@emulation@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Wake@Cpu@gb@emulation@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?Wake@Cpu@gb@emulation@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ
pdata	ENDS
CRT$XCU	SEGMENT
piecewise_construct$initializer$ DQ FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcName$0 DB 05fH ; sprintf_s<255>
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcVarDesc DD 028H ; sprintf_s<255>
	DD	08H
	DQ	FLAT:??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcName$0
	ORG $+48
??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcFrameData DD 01H ; sprintf_s<255>
	DD	00H
	DQ	FLAT:??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Wake@Cpu@gb@emulation@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
	ORG $+1
?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcName$0 DB 073H ; emulation::gb::Memory::Write8
	DB	074H
	DB	072H
	DB	00H
	ORG $+8
?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcVarDesc DD 040H ; emulation::gb::Memory::Write8
	DD	0ffH
	DQ	FLAT:?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcName$0
	ORG $+48
?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcFrameData DD 01H ; emulation::gb::Memory::Write8
	DD	00H
	DQ	FLAT:?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z DD 022301H
	DD	0700b720fH
$unwind$?Deinitialize@Memory@gb@emulation@@UEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?Reset@Memory@gb@emulation@@UEAAXXZ DD 010601H
	DD	07006H
$unwind$?Read8@Memory@gb@emulation@@QEAAEG@Z DD 022301H
	DD	0700b520fH
$unwind$?Write8@Memory@gb@emulation@@QEAAXGE@Z DD 034019H
	DD	02c0117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z DD 022201H
	DD	0700a320eH
$unwind$?Tick@Memory@gb@emulation@@QEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SafeDeleteArray@E@@YAXPEAPEAE@Z DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rom@Cartridge@gb@emulation@@QEAAPEBEXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_Tuple_alloc@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eignore@std@@YAXXZ DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Ignore@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eallocator_arg@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Epiecewise_construct@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
CRT$XCU	SEGMENT
allocator_arg$initializer$ DQ FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
ignore$initializer$ DQ FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_Tuple_alloc$initializer$ DQ FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stdio.h
;	COMDAT ??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ
_TEXT	SEGMENT
_ArgList$ = 40
_Dest$ = 80
_Format$ = 88
??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ PROC		; sprintf_s<255>, COMDAT

; 309  : __DEFINE_CPP_OVERLOAD_SECURE_FUNC_0_1_ARGLIST(int, sprintf_s, vsprintf_s, _Post_z_ char, _Dest, _In_z_ _Printf_format_string_ const char *, _Format)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
	mov	r9, QWORD PTR _ArgList$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR _Dest$[rsp]
	call	QWORD PTR __imp_vsprintf_s
	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ ENDP		; sprintf_s<255>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ
_TEXT	SEGMENT
this$ = 16
?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ PROC	; emulation::gb::Emu::timer, COMDAT

; 24   : 	Timer* timer() { return &timer_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 3096				; 00000c18H
	pop	rdi
	ret	0
?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ ENDP	; emulation::gb::Emu::timer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ
_TEXT	SEGMENT
this$ = 16
?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ PROC ; emulation::gb::Emu::sc, COMDAT

; 23   : 	SoundController* sc() { return &sc_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2808				; 00000af8H
	pop	rdi
	ret	0
?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ENDP ; emulation::gb::Emu::sc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ
_TEXT	SEGMENT
this$ = 16
?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ PROC ; emulation::gb::Emu::lcd_driver, COMDAT

; 22   :   LCDDriver* lcd_driver() { return &lcd_driver_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2712				; 00000a98H
	pop	rdi
	ret	0
?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ENDP ; emulation::gb::Emu::lcd_driver
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ
_TEXT	SEGMENT
this$ = 16
?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ PROC		; emulation::gb::Emu::cpu, COMDAT

; 20   :   Cpu* cpu() { return &cpu_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 104				; 00000068H
	pop	rdi
	ret	0
?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ENDP		; emulation::gb::Emu::cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ
_TEXT	SEGMENT
this$ = 16
?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ PROC ; emulation::gb::Emu::cartridge, COMDAT

; 19   :   Cartridge* cartridge() { return &cartridge_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 64					; 00000040H
	pop	rdi
	ret	0
?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ENDP ; emulation::gb::Emu::cartridge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?Wake@Cpu@gb@emulation@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?Wake@Cpu@gb@emulation@@QEAAXXZ PROC			; emulation::gb::Cpu::Wake, COMDAT

; 74   :   void Wake() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 75   :     cpumode_ = CpuModeNormal;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+32], 0

; 76   :   }

	pop	rdi
	ret	0
?Wake@Cpu@gb@emulation@@QEAAXXZ ENDP			; emulation::gb::Cpu::Wake
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\lcd_driver.h
;	COMDAT ?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ
_TEXT	SEGMENT
this$ = 16
?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ PROC ; emulation::gb::LCDDriver::stat, COMDAT

; 53   : 	const LCDStatusRegister& stat() { return stat_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 41					; 00000029H
	pop	rdi
	ret	0
?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ENDP ; emulation::gb::LCDDriver::stat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\lcd_driver.h
;	COMDAT ?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ
_TEXT	SEGMENT
this$ = 16
?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ PROC ; emulation::gb::LCDDriver::lcdc, COMDAT

; 52   : 	const LCDControlRegister& lcdc() { return lcdc_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 40					; 00000028H
	pop	rdi
	ret	0
?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ENDP ; emulation::gb::LCDDriver::lcdc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
i$1 = 32
i$2 = 36
tv184 = 40
this$ = 64
?Tick@Memory@gb@emulation@@QEAAXXZ PROC			; emulation::gb::Memory::Tick

; 192  : void Memory::Tick() {

$LN17:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 193  :   ioports_[0] |= 0x0F;

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	or	eax, 15
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al

; 194  : 	if ((ioports_[0] & 0x30)==0x20) {

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	and	eax, 48					; 00000030H
	cmp	eax, 32					; 00000020H
	jne	$LN14@Tick

; 195  : 		for (int i=0;i<4;++i) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@Tick
$LN12@Tick:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@Tick:
	cmp	DWORD PTR i$1[rsp], 4
	jge	$LN11@Tick

; 196  : 			if (joypadflags[i]==true)//pressed

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+466]
	cmp	eax, 1
	jne	SHORT $LN10@Tick

; 197  : 				ioports_[0] &= ~(1<<i);

	mov	eax, 1
	imul	rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	not	ecx
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+208]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al

; 198  : 			else

	jmp	SHORT $LN9@Tick
$LN10@Tick:

; 199  : 				ioports_[0] |= (1<<i);

	mov	eax, 1
	imul	rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+208]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
$LN9@Tick:

; 200  : 		}

	jmp	$LN12@Tick
$LN11@Tick:
	jmp	$LN8@Tick
$LN14@Tick:

; 201  : 	} else if ((ioports_[0] & 0x30)==0x10) {

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	and	eax, 48					; 00000030H
	cmp	eax, 16
	jne	$LN7@Tick

; 202  : 		for (int i=0;i<4;++i) {

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN6@Tick
$LN5@Tick:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN6@Tick:
	cmp	DWORD PTR i$2[rsp], 4
	jge	$LN4@Tick

; 203  : 			if (joypadflags[i+4]==true)//pressed

	mov	eax, DWORD PTR i$2[rsp]
	add	eax, 4
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+466]
	cmp	eax, 1
	jne	SHORT $LN3@Tick

; 204  : 				ioports_[0] &= ~(1<<i);

	mov	eax, 1
	imul	rax, 0
	mov	ecx, DWORD PTR i$2[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	not	ecx
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+208]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al

; 205  : 			else

	jmp	SHORT $LN2@Tick
$LN3@Tick:

; 206  : 				ioports_[0] |= (1<<i);

	mov	eax, 1
	imul	rax, 0
	mov	ecx, DWORD PTR i$2[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+208]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
$LN2@Tick:

; 207  : 		}

	jmp	$LN5@Tick
$LN4@Tick:
$LN7@Tick:
$LN8@Tick:

; 208  : 	} 
; 209  : 
; 210  : 	if ((ioports_[0]&0x0F) != 0x0F) 

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN1@Tick

; 211  : 		interrupt_flag() |= 16;

	mov	rcx, QWORD PTR this$[rsp]
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv184[rsp], rax
	mov	rax, QWORD PTR tv184[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 16
	mov	rcx, QWORD PTR tv184[rsp]
	mov	BYTE PTR [rcx], al
$LN1@Tick:

; 212  : 
; 213  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Tick@Memory@gb@emulation@@QEAAXXZ ENDP			; emulation::gb::Memory::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
this$ = 48
key$ = 56
?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z PROC ; emulation::gb::Memory::JoypadPress

; 215  : void Memory::JoypadPress(JoypadKeys key) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 216  : 	joypadflags[key] = true;

	movsxd	rax, DWORD PTR key$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+rax+466], 1

; 217  :   emu_->cpu()->Wake();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Wake@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Wake

; 218  : 	//ioports_[0] &= ~key;
; 219  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?JoypadPress@Memory@gb@emulation@@QEAAXW4JoypadKeys@23@@Z ENDP ; emulation::gb::Memory::JoypadPress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ
_TEXT	SEGMENT
this$ = 16
?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ PROC	; emulation::gb::Memory::interrupt_flag, COMDAT

; 21   :   uint8_t& interrupt_flag() {  return ioports_[0x0F]; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	eax, 1
	imul	rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax+208]
	pop	rdi
	ret	0
?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ENDP	; emulation::gb::Memory::interrupt_flag
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
a$4 = 32
str$5 = 64
__$ArrayPad$ = 336
this$ = 368
address$ = 376
data$ = 384
?Write8@Memory@gb@emulation@@QEAAXGE@Z PROC		; emulation::gb::Memory::Write8

; 139  : void Memory::Write8(uint16_t address, uint8_t data) {

$LN41:
	mov	BYTE PTR [rsp+24], r8b
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 352				; 00000160H
	mov	rdi, rsp
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 140  :   emu_->cpu()->Tick();emu_->cpu()->Tick();emu_->cpu()->Tick();emu_->cpu()->Tick();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 141  : 	if (address >= 0x0000 && address <= 0x3FFF) {

	movzx	eax, WORD PTR address$[rsp]
	test	eax, eax
	jl	SHORT $LN38@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 16383				; 00003fffH
	jg	SHORT $LN38@Write8

; 142  :     emu_->cartridge()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@Cartridge@gb@emulation@@QEAAXGE@Z ; emulation::gb::Cartridge::Write
	jmp	$LN37@Write8
$LN38@Write8:

; 143  : 	} else if (address >= 0x4000 && address <= 0x7FFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 16384				; 00004000H
	jl	SHORT $LN36@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN36@Write8

; 144  : 		emu_->cartridge()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@Cartridge@gb@emulation@@QEAAXGE@Z ; emulation::gb::Cartridge::Write
	jmp	$LN35@Write8
$LN36@Write8:

; 145  : 	} else if (address >= 0x8000 && address <= 0x9FFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 32768				; 00008000H
	jl	$LN34@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 40959				; 00009fffH
	jg	SHORT $LN34@Write8

; 146  : 		if ((emu_->lcd_driver()->stat().mode == 3)&&(emu_->lcd_driver()->lcdc().lcd_enable==1)) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ; emulation::gb::LCDDriver::stat
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN33@Write8
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN33@Write8

; 147  :     } else {

	jmp	SHORT $LN32@Write8
$LN33@Write8:

; 148  : 		 vram_[address&0x1FFF] = data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 8191				; 00001fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN32@Write8:

; 149  :     }

	jmp	$LN31@Write8
$LN34@Write8:

; 150  : 	} else if (address >= 0xA000 && address <= 0xBFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 40960				; 0000a000H
	jl	SHORT $LN30@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 49151				; 0000bfffH
	jg	SHORT $LN30@Write8

; 151  : 		emu_->cartridge()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@Cartridge@gb@emulation@@QEAAXGE@Z ; emulation::gb::Cartridge::Write
	jmp	$LN29@Write8
$LN30@Write8:

; 152  : 	} else if (address >= 0xC000 && address <= 0xCFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 49152				; 0000c000H
	jl	SHORT $LN28@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 53247				; 0000cfffH
	jg	SHORT $LN28@Write8

; 153  : 		wram1_[address&0x0FFF] = data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	jmp	$LN27@Write8
$LN28@Write8:

; 154  : 	} else if (address >= 0xD000 && address <= 0xDFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 53248				; 0000d000H
	jl	SHORT $LN26@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 57343				; 0000dfffH
	jg	SHORT $LN26@Write8

; 155  : 		wram2_[address&0x0FFF] = data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	jmp	$LN25@Write8
$LN26@Write8:

; 156  : 	} else if (address >= 0xE000 && address <= 0xFDFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 57344				; 0000e000H
	jl	$LN24@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65023				; 0000fdffH
	jg	SHORT $LN24@Write8

; 157  : 		if ((address&0xF000)==0xE000)

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 61440				; 0000f000H
	cmp	eax, 57344				; 0000e000H
	jne	SHORT $LN23@Write8

; 158  : 		 wram1_[address&0xFFF] = data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN23@Write8:

; 159  : 		if ((address&0xF000)==0xF000)

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 61440				; 0000f000H
	cmp	eax, 61440				; 0000f000H
	jne	SHORT $LN22@Write8

; 160  : 		 wram2_[address&0xFFF] = data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN22@Write8:

; 161  : 	} else if (address >= 0xFE00 && address <= 0xFE9F) {

	jmp	$LN21@Write8
$LN24@Write8:
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65024				; 0000fe00H
	jl	$LN20@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65183				; 0000fe9fH
	jg	SHORT $LN20@Write8

; 162  : 		if ((emu_->lcd_driver()->stat().mode&0x2)&&(emu_->lcd_driver()->lcdc().lcd_enable==1)) {

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ; emulation::gb::LCDDriver::stat
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	movzx	eax, al
	and	eax, 2
	test	eax, eax
	je	SHORT $LN19@Write8
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN19@Write8

; 163  :     } else {

	jmp	SHORT $LN18@Write8
$LN19@Write8:

; 164  : 		 oam_[address-0xFE00] = data;

	movzx	eax, WORD PTR address$[rsp]
	sub	eax, 65024				; 0000fe00H
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax+48], dl
$LN18@Write8:

; 165  :     }

	jmp	$LN17@Write8
$LN20@Write8:

; 166  : 	} else if (address >= 0xFEA0 && address <= 0xFEFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65184				; 0000fea0H
	jl	SHORT $LN16@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN16@Write8

; 167  : 		//int a = 1;
; 168  :      int a = 1;

	mov	DWORD PTR a$4[rsp], 1
	jmp	$LN15@Write8
$LN16@Write8:

; 169  : 	} else if (address >= 0xFF00 && address <= 0xFF7F) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65280				; 0000ff00H
	jl	$LN14@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65407				; 0000ff7fH
	jg	$LN14@Write8

; 170  :     ioports_[address&0xFF]=data;

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 255				; 000000ffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax+208], dl

; 171  : 		if (address == 0xFF00) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65280				; 0000ff00H
	jne	SHORT $LN13@Write8

; 172  : 			ioports_[0]=data & ~0x0F;

	movzx	eax, BYTE PTR data$[rsp]
	and	eax, -16
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
	jmp	$LN12@Write8
$LN13@Write8:

; 173  : 		} else if (address == 0xFF01) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65281				; 0000ff01H
	jne	SHORT $LN11@Write8

; 174  : 			char str[255];
; 175  : 			sprintf_s(str,"%c",data);

	movzx	eax, BYTE PTR data$[rsp]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:$SG113786
	lea	rcx, QWORD PTR str$5[rsp]
	call	??$sprintf_s@$0PP@@@YAHAEAY0PP@DPEBDZZ	; sprintf_s<255>

; 176  : 			OutputDebugString(str);

	lea	rcx, QWORD PTR str$5[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
	jmp	$LN10@Write8
$LN11@Write8:

; 177  : 		} else if (address >= 0xFF04 && address <= 0xFF07) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65284				; 0000ff04H
	jl	SHORT $LN9@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65287				; 0000ff07H
	jg	SHORT $LN9@Write8

; 178  :       emu_->timer()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ ; emulation::gb::Emu::timer
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@Timer@gb@emulation@@QEAAXGE@Z	; emulation::gb::Timer::Write
	jmp	$LN8@Write8
$LN9@Write8:

; 179  : 		} else if (address >= 0xFF10 && address <= 0xFF3F) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65296				; 0000ff10H
	jl	SHORT $LN7@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65343				; 0000ff3fH
	jg	SHORT $LN7@Write8

; 180  :       emu_->sc()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ; emulation::gb::Emu::sc
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@SoundController@gb@emulation@@QEAAXGE@Z ; emulation::gb::SoundController::Write
	jmp	SHORT $LN6@Write8
$LN7@Write8:

; 181  :     } else if (address >= 0xFF40 && address <= 0xFF4B) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65344				; 0000ff40H
	jl	SHORT $LN5@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65355				; 0000ff4bH
	jg	SHORT $LN5@Write8

; 182  :       emu_->lcd_driver()->Write(address,data);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Write@LCDDriver@gb@emulation@@QEAAXGE@Z ; emulation::gb::LCDDriver::Write
$LN5@Write8:
$LN6@Write8:
$LN8@Write8:
$LN10@Write8:
$LN12@Write8:

; 183  :     }

	jmp	SHORT $LN4@Write8
$LN14@Write8:

; 184  : 	} else if (address >= 0xFF80 && address <= 0xFFFE) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65408				; 0000ff80H
	jl	SHORT $LN3@Write8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65534				; 0000fffeH
	jg	SHORT $LN3@Write8

; 185  : 		hram_[address-0xFF80] = data;

	movzx	eax, WORD PTR address$[rsp]
	sub	eax, 65408				; 0000ff80H
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rcx+rax+336], dl
	jmp	SHORT $LN2@Write8
$LN3@Write8:

; 186  : 	} else if (address == 0xFFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN1@Write8

; 187  : 		interrupt_enable_register_ = data;

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR data$[rsp]
	mov	BYTE PTR [rax+463], cl
$LN1@Write8:
$LN2@Write8:
$LN4@Write8:
$LN15@Write8:
$LN17@Write8:
$LN21@Write8:
$LN25@Write8:
$LN27@Write8:
$LN29@Write8:
$LN31@Write8:
$LN35@Write8:
$LN37@Write8:

; 188  : 	}
; 189  :   
; 190  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?Write8@Memory@gb@emulation@@QEAAXGE@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
?Write8@Memory@gb@emulation@@QEAAXGE@Z ENDP		; emulation::gb::Memory::Write8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
result$ = 32
a$1 = 36
this$ = 64
address$ = 72
?Read8@Memory@gb@emulation@@QEAAEG@Z PROC		; emulation::gb::Memory::Read8

; 85   : uint8_t Memory::Read8(uint16_t address) {

$LN40:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 86   :   uint8_t result = 0;

	mov	BYTE PTR result$[rsp], 0

; 87   :   emu_->cpu()->Tick();emu_->cpu()->Tick();emu_->cpu()->Tick();emu_->cpu()->Tick(); 

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cpu@Emu@gb@emulation@@QEAAPEAVCpu@23@XZ ; emulation::gb::Emu::cpu
	mov	rcx, rax
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 88   : 	if (address >= 0x0000 && address <= 0x3FFF) {

	movzx	eax, WORD PTR address$[rsp]
	test	eax, eax
	jl	SHORT $LN37@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 16383				; 00003fffH
	jg	SHORT $LN37@Read8

; 89   :     if (ioports_[0x50] == 0 && address < 0x100) { 

	mov	eax, 1
	imul	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	test	eax, eax
	jne	SHORT $LN36@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN36@Read8

; 90   : 			result = dmgrom[address&0xFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 255				; 000000ffH
	cdqe
	lea	rcx, OFFSET FLAT:dmgrom
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al

; 91   :     } else {

	jmp	SHORT $LN35@Read8
$LN36@Read8:

; 92   : 	    result = emu_->cartridge()->Read(address);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@Cartridge@gb@emulation@@QEAAEG@Z	; emulation::gb::Cartridge::Read
	mov	BYTE PTR result$[rsp], al
$LN35@Read8:

; 93   :     }

	jmp	$LN34@Read8
$LN37@Read8:

; 94   : 	} else if (address >= 0x4000 && address <= 0x7FFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 16384				; 00004000H
	jl	SHORT $LN33@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 32767				; 00007fffH
	jg	SHORT $LN33@Read8

; 95   : 		result = emu_->cartridge()->Read(address);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@Cartridge@gb@emulation@@QEAAEG@Z	; emulation::gb::Cartridge::Read
	mov	BYTE PTR result$[rsp], al
	jmp	$LN32@Read8
$LN33@Read8:

; 96   : 	} else if (address >= 0x8000 && address <= 0x9FFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 32768				; 00008000H
	jl	SHORT $LN31@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 40959				; 00009fffH
	jg	SHORT $LN31@Read8

; 97   : 
; 98   : 		if ((emu_->lcd_driver()->stat().mode == 3)&&(emu_->lcd_driver()->lcdc().lcd_enable==1))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ; emulation::gb::LCDDriver::stat
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	movzx	eax, al
	cmp	eax, 3
	jne	SHORT $LN30@Read8
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN30@Read8

; 99   : 			result = 0xFF;

	mov	BYTE PTR result$[rsp], 255		; 000000ffH

; 100  :     else

	jmp	SHORT $LN29@Read8
$LN30@Read8:

; 101  : 		  result = vram_[address&0x1FFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 8191				; 00001fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al
$LN29@Read8:
	jmp	$LN28@Read8
$LN31@Read8:

; 102  : 	} else if (address >= 0xA000 && address <= 0xBFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 40960				; 0000a000H
	jl	SHORT $LN27@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 49151				; 0000bfffH
	jg	SHORT $LN27@Read8

; 103  :     result = emu_->cartridge()->Read(address);//emu_->cartridge()->eram()[address&0x1FFF];

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@Cartridge@gb@emulation@@QEAAEG@Z	; emulation::gb::Cartridge::Read
	mov	BYTE PTR result$[rsp], al
	jmp	$LN26@Read8
$LN27@Read8:

; 104  : 	} else if (address >= 0xC000 && address <= 0xCFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 49152				; 0000c000H
	jl	SHORT $LN25@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 53247				; 0000cfffH
	jg	SHORT $LN25@Read8

; 105  : 		result = wram1_[address&0x0FFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al
	jmp	$LN24@Read8
$LN25@Read8:

; 106  : 	} else if (address >= 0xD000 && address <= 0xDFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 53248				; 0000d000H
	jl	SHORT $LN23@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 57343				; 0000dfffH
	jg	SHORT $LN23@Read8

; 107  : 		result = wram2_[address&0x0FFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al
	jmp	$LN22@Read8
$LN23@Read8:

; 108  : 	} else if (address >= 0xE000 && address <= 0xFDFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 57344				; 0000e000H
	jl	SHORT $LN21@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65023				; 0000fdffH
	jg	SHORT $LN21@Read8

; 109  : 	  if ((address&0xF000)==0xE000)

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 61440				; 0000f000H
	cmp	eax, 57344				; 0000e000H
	jne	SHORT $LN20@Read8

; 110  : 		 result = wram1_[address&0xFFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al
	jmp	SHORT $LN19@Read8
$LN20@Read8:

; 111  : 		else if ((address&0xF000)==0xF000)

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 61440				; 0000f000H
	cmp	eax, 61440				; 0000f000H
	jne	SHORT $LN18@Read8

; 112  : 		 result = wram2_[address&0xFFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 4095				; 00000fffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR result$[rsp], al
$LN18@Read8:
$LN19@Read8:

; 113  : 	} else if (address >= 0xFE00 && address <= 0xFE9F) {

	jmp	$LN17@Read8
$LN21@Read8:
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN16@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65183				; 0000fe9fH
	jg	SHORT $LN16@Read8

; 114  : 
; 115  : 		if ((emu_->lcd_driver()->stat().mode&0x2)&&(emu_->lcd_driver()->lcdc().lcd_enable==1))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?stat@LCDDriver@gb@emulation@@QEAAAEBTLCDStatusRegister@23@XZ ; emulation::gb::LCDDriver::stat
	movzx	eax, BYTE PTR [rax]
	and	al, 3
	movzx	eax, al
	and	eax, 2
	test	eax, eax
	je	SHORT $LN15@Read8
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN15@Read8

; 116  : 			result = 0xFF;

	mov	BYTE PTR result$[rsp], 255		; 000000ffH

; 117  :     else

	jmp	SHORT $LN14@Read8
$LN15@Read8:

; 118  : 		  result = oam_[address-0xFE00];

	movzx	eax, WORD PTR address$[rsp]
	sub	eax, 65024				; 0000fe00H
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+48]
	mov	BYTE PTR result$[rsp], al
$LN14@Read8:
	jmp	$LN13@Read8
$LN16@Read8:

; 119  : 	} else if (address >= 0xFEA0 && address <= 0xFEFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65184				; 0000fea0H
	jl	SHORT $LN12@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN12@Read8

; 120  : 		int a = 1;

	mov	DWORD PTR a$1[rsp], 1
	jmp	$LN11@Read8
$LN12@Read8:

; 121  : 	} else if (address >= 0xFF00 && address <= 0xFF7F) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65280				; 0000ff00H
	jl	$LN10@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65407				; 0000ff7fH
	jg	$LN10@Read8

; 122  : 		if (address >= 0xFF10 && address <= 0xFF3F) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65296				; 0000ff10H
	jl	SHORT $LN9@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65343				; 0000ff3fH
	jg	SHORT $LN9@Read8

; 123  :       ioports_[address&0xFF] = emu_->sc()->Read(address);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ; emulation::gb::Emu::sc
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@SoundController@gb@emulation@@QEAAEG@Z ; emulation::gb::SoundController::Read
	movzx	ecx, WORD PTR address$[rsp]
	and	ecx, 255				; 000000ffH
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
	jmp	$LN8@Read8
$LN9@Read8:

; 124  : 		} else if (address >= 0xFF40 && address <= 0xFF4B) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65344				; 0000ff40H
	jl	SHORT $LN7@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65355				; 0000ff4bH
	jg	SHORT $LN7@Read8

; 125  : 			ioports_[address&0xFF] = emu_->lcd_driver()->Read(address);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@LCDDriver@gb@emulation@@QEAAEG@Z	; emulation::gb::LCDDriver::Read
	movzx	ecx, WORD PTR address$[rsp]
	and	ecx, 255				; 000000ffH
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
	jmp	SHORT $LN6@Read8
$LN7@Read8:

; 126  : 		} else if (address >= 0xFF04 && address <= 0xFF07) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65284				; 0000ff04H
	jl	SHORT $LN5@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65287				; 0000ff07H
	jg	SHORT $LN5@Read8

; 127  :       ioports_[address&0xFF] = emu_->timer()->Read(address);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ ; emulation::gb::Emu::timer
	movzx	edx, WORD PTR address$[rsp]
	mov	rcx, rax
	call	?Read@Timer@gb@emulation@@QEAAEG@Z	; emulation::gb::Timer::Read
	movzx	ecx, WORD PTR address$[rsp]
	and	ecx, 255				; 000000ffH
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+208], al
$LN5@Read8:
$LN6@Read8:
$LN8@Read8:

; 128  : 		}
; 129  : 		result = ioports_[address&0xFF];

	movzx	eax, WORD PTR address$[rsp]
	and	eax, 255				; 000000ffH
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+208]
	mov	BYTE PTR result$[rsp], al
	jmp	SHORT $LN4@Read8
$LN10@Read8:

; 130  : 	} else if (address >= 0xFF80 && address <= 0xFFFE) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65408				; 0000ff80H
	jl	SHORT $LN3@Read8
	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65534				; 0000fffeH
	jg	SHORT $LN3@Read8

; 131  : 		result = hram_[address-0xFF80];

	movzx	eax, WORD PTR address$[rsp]
	sub	eax, 65408				; 0000ff80H
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+336]
	mov	BYTE PTR result$[rsp], al
	jmp	SHORT $LN2@Read8
$LN3@Read8:

; 132  : 	} else if (address == 0xFFFF) {

	movzx	eax, WORD PTR address$[rsp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN1@Read8

; 133  : 		result = interrupt_enable_register_;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+463]
	mov	BYTE PTR result$[rsp], al
$LN1@Read8:
$LN2@Read8:
$LN4@Read8:
$LN11@Read8:
$LN13@Read8:
$LN17@Read8:
$LN22@Read8:
$LN24@Read8:
$LN26@Read8:
$LN28@Read8:
$LN32@Read8:
$LN34@Read8:

; 134  : 	}
; 135  : 
; 136  : 	return result;

	movzx	eax, BYTE PTR result$[rsp]

; 137  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Read8@Memory@gb@emulation@@QEAAEG@Z ENDP		; emulation::gb::Memory::Read8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
this$ = 16
?Reset@Memory@gb@emulation@@UEAAXXZ PROC		; emulation::gb::Memory::Reset

; 51   : void Memory::Reset() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 52   :    /*ioports_[0x05] = 0x00; // TIMA
; 53   :    ioports_[0x06] = 0x00; // TMA
; 54   :    ioports_[0x07] = 0x00; // TAC
; 55   :    ioports_[0x10] = 0x80; // NR10
; 56   :    ioports_[0x11] = 0xBF; // NR11
; 57   :    ioports_[0x12] = 0xF3; // NR12
; 58   :    ioports_[0x14] = 0xBF; // NR14
; 59   :    ioports_[0x16] = 0x3F; // NR21
; 60   :    ioports_[0x17] = 0x00; // NR22
; 61   :    ioports_[0x19] = 0xBF; // NR24
; 62   :    ioports_[0x1A] = 0x7F; // NR30
; 63   :    ioports_[0x1B] = 0xFF; // NR31
; 64   :    ioports_[0x1C] = 0x9F; // NR32
; 65   :    ioports_[0x1E] = 0xBF; // NR33
; 66   :    ioports_[0x20] = 0xFF; // NR41
; 67   :    ioports_[0x21] = 0x00; // NR42
; 68   :    ioports_[0x22] = 0x00; // NR43
; 69   :    ioports_[0x23] = 0xBF; // NR30
; 70   :    ioports_[0x24] = 0x77; // NR50
; 71   :    ioports_[0x25] = 0xF3; // NR51
; 72   :    ioports_[0x26] = 0xF1; //NR52
; 73   :    ioports_[0x40] = 0x91; // LCDC
; 74   :    ioports_[0x42] = 0x00; // SCY
; 75   :    ioports_[0x43] = 0x00; // SCX
; 76   :    ioports_[0x45] = 0x00; // LYC
; 77   :    ioports_[0x47] = 0xFC; // BGP
; 78   :    ioports_[0x48] = 0xFF; // OBP0
; 79   :    ioports_[0x49] = 0xFF; // OBP1
; 80   :    ioports_[0x4A] = 0x00; // WY
; 81   :    ioports_[0x4B] = 0x00; // WX
; 82   :    ioports_[0xFF] = 0x00; // IE*/
; 83   : }

	pop	rdi
	ret	0
?Reset@Memory@gb@emulation@@UEAAXXZ ENDP		; emulation::gb::Memory::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
this$ = 48
?Deinitialize@Memory@gb@emulation@@UEAAXXZ PROC		; emulation::gb::Memory::Deinitialize

; 45   : void Memory::Deinitialize() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 46   : 	SafeDeleteArray(&wram2_);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	??$SafeDeleteArray@E@@YAXPEAPEAE@Z	; SafeDeleteArray<unsigned char>

; 47   : 	SafeDeleteArray(&wram1_);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	??$SafeDeleteArray@E@@YAXPEAPEAE@Z	; SafeDeleteArray<unsigned char>

; 48   : 	SafeDeleteArray(&vram_);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 24
	mov	rcx, rax
	call	??$SafeDeleteArray@E@@YAXPEAPEAE@Z	; SafeDeleteArray<unsigned char>

; 49   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Deinitialize@Memory@gb@emulation@@UEAAXXZ ENDP		; emulation::gb::Memory::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
emu$ = 88
?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z PROC ; emulation::gb::Memory::Initialize

; 32   : void Memory::Initialize(Emu* emu) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 33   :   Component::Initialize(emu);

	mov	rdx, QWORD PTR emu$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Component::Initialize

; 34   :   rom_ = emu_->cartridge()->rom();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	mov	rcx, rax
	call	?rom@Cartridge@gb@emulation@@QEAAPEBEXZ	; emulation::gb::Cartridge::rom
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 35   :   vram_ = new uint8_t[0x2000];

	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:$SG113690
	mov	edx, 1
	mov	ecx, 8192				; 00002000H
	call	??_U@YAPEAX_KHPEBDH@Z			; operator new[]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rax+24], rcx

; 36   : 	wram1_ = new uint8_t[0x1000];

	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:$SG113693
	mov	edx, 1
	mov	ecx, 4096				; 00001000H
	call	??_U@YAPEAX_KHPEBDH@Z			; operator new[]
	mov	QWORD PTR $T2[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T2[rsp]
	mov	QWORD PTR [rax+32], rcx

; 37   : 	wram2_ = new uint8_t[0x1000];

	mov	r9d, 37					; 00000025H
	lea	r8, OFFSET FLAT:$SG113696
	mov	edx, 1
	mov	ecx, 4096				; 00001000H
	call	??_U@YAPEAX_KHPEBDH@Z			; operator new[]
	mov	QWORD PTR $T3[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T3[rsp]
	mov	QWORD PTR [rax+40], rcx

; 38   : 	ZeroMemory(ioports_,sizeof(ioports_));

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 208				; 000000d0H
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 39   : 	memset(joypadflags,0,sizeof(joypadflags));

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 466				; 000001d2H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 40   : 	ioports_[0] = 0x0F;

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+rax+208], 15

; 41   :   last_address = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+464], ax

; 42   :   //Reset();
; 43   : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?Initialize@Memory@gb@emulation@@UEAAXPEAVEmu@23@@Z ENDP ; emulation::gb::Memory::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeDeleteArray@E@@YAXPEAPEAE@Z
_TEXT	SEGMENT
$T1 = 32
ppInterfaceToDelete$ = 64
??$SafeDeleteArray@E@@YAXPEAPEAE@Z PROC			; SafeDeleteArray<unsigned char>, COMDAT

; 45   : inline void SafeDeleteArray(Interface **ppInterfaceToDelete) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 46   :     if (*ppInterfaceToDelete != NULL) {

	mov	rax, QWORD PTR ppInterfaceToDelete$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@SafeDelete

; 47   :         delete [] (*ppInterfaceToDelete);

	mov	rax, QWORD PTR ppInterfaceToDelete$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 48   :         (*ppInterfaceToDelete) = NULL;

	mov	rax, QWORD PTR ppInterfaceToDelete$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@SafeDelete:

; 49   :     }
; 50   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$SafeDeleteArray@E@@YAXPEAPEAE@Z ENDP			; SafeDeleteArray<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cartridge.h
;	COMDAT ?rom@Cartridge@gb@emulation@@QEAAPEBEXZ
_TEXT	SEGMENT
this$ = 16
?rom@Cartridge@gb@emulation@@QEAAPEBEXZ PROC		; emulation::gb::Cartridge::rom, COMDAT

; 86   :   const uint8_t* rom() { return rom_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	pop	rdi
	ret	0
?rom@Cartridge@gb@emulation@@QEAAPEBEXZ ENDP		; emulation::gb::Cartridge::rom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z
_TEXT	SEGMENT
this$ = 16
emu$ = 24
?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z PROC ; emulation::gb::Component::Initialize, COMDAT

; 28   :   virtual void Initialize(Emu* emu) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 29   :     emu_ = emu;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR emu$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 30   :   }

	pop	rdi
	ret	0
?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ENDP ; emulation::gb::Component::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:ignore
	call	??0_Ignore@std@@QEAA@XZ			; std::_Ignore::_Ignore
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Ignore@std@@QEAA@XZ PROC				; std::_Ignore::_Ignore, COMDAT

; 120  : 	_Ignore()

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		{	// construct
; 122  : 		}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Ignore@std@@QEAA@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END

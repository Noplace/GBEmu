; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	ConcRT_ProviderGuid
PUBLIC	ConcRTEventGuid
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	SchedulerEventGuid
PUBLIC	ScheduleGroupEventGuid
PUBLIC	ContextEventGuid
PUBLIC	ChoreEventGuid
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	VirtualProcessorEventGuid
PUBLIC	LockEventGuid
PUBLIC	ResourceManagerEventGuid
PUBLIC	PPLParallelInvokeEventGuid
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	PPLParallelForEventGuid
PUBLIC	PPLParallelForeachEventGuid
PUBLIC	AgentEventGuid
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_K$0A@@std@@2_KB	; std::integral_constant<unsigned __int64,0>::value
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
CONST	SEGMENT
dutycycletable DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB DQ 000000000000000cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000008H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000002H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000001H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000000H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000000H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_K$0A@@std@@2_KB
CONST	SEGMENT
?value@?$integral_constant@_K$0A@@std@@2_KB DQ 0000000000000000H ; std::integral_constant<unsigned __int64,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT AgentEventGuid
CONST	SEGMENT
AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT PPLParallelForeachEventGuid
CONST	SEGMENT
PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT PPLParallelForEventGuid
CONST	SEGMENT
PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT PPLParallelInvokeEventGuid
CONST	SEGMENT
PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT ResourceManagerEventGuid
CONST	SEGMENT
ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT LockEventGuid
CONST	SEGMENT
LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT VirtualProcessorEventGuid
CONST	SEGMENT
VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ChoreEventGuid
CONST	SEGMENT
ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT ContextEventGuid
CONST	SEGMENT
ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT ScheduleGroupEventGuid
CONST	SEGMENT
ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT SchedulerEventGuid
CONST	SEGMENT
SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ConcRTEventGuid
CONST	SEGMENT
ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT ConcRT_ProviderGuid
CONST	SEGMENT
ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000001H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
PUBLIC	?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ	; core::windows::Window::handle
PUBLIC	??0Interface@output@audio@@QEAA@XZ		; audio::output::Interface::Interface
PUBLIC	??0DirectSound@output@audio@@QEAA@XZ		; audio::output::DirectSound::DirectSound
PUBLIC	??1DirectSound@output@audio@@QEAA@XZ		; audio::output::DirectSound::~DirectSound
PUBLIC	?Initialize@DirectSound@output@audio@@UEAAHIEE@Z ; audio::output::DirectSound::Initialize
PUBLIC	?Deinitialize@DirectSound@output@audio@@UEAAHXZ	; audio::output::DirectSound::Deinitialize
PUBLIC	?Play@DirectSound@output@audio@@UEAAHXZ		; audio::output::DirectSound::Play
PUBLIC	?Stop@DirectSound@output@audio@@UEAAHXZ		; audio::output::DirectSound::Stop
PUBLIC	?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ ; audio::output::DirectSound::GetBytesBuffered
PUBLIC	?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z ; audio::output::DirectSound::GetCursors
PUBLIC	?Write@DirectSound@output@audio@@UEAAHPEAXI@Z	; audio::output::DirectSound::Write
PUBLIC	?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z ; audio::output::DirectSound::BeginWrite
PUBLIC	?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z	; audio::output::DirectSound::EndWrite
PUBLIC	??0_Ignore@std@@QEAA@XZ				; std::_Ignore::_Ignore
PUBLIC	?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ ; app::Application::display_window
PUBLIC	?Current@Application@app@@SAPEAV12@XZ		; app::Application::Current
PUBLIC	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>
PUBLIC	??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z ; SafeRelease<IDirectSound8>
PUBLIC	??_7Interface@output@audio@@6B@			; audio::output::Interface::`vftable'
PUBLIC	??_7DirectSound@output@audio@@6B@		; audio::output::DirectSound::`vftable'
PUBLIC	??_R4Interface@output@audio@@6B@		; audio::output::Interface::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVInterface@output@audio@@@8		; audio::output::Interface `RTTI Type Descriptor'
PUBLIC	??_R3Interface@output@audio@@8			; audio::output::Interface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Interface@output@audio@@8			; audio::output::Interface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Interface@output@audio@@8		; audio::output::Interface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4DirectSound@output@audio@@6B@		; audio::output::DirectSound::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVDirectSound@output@audio@@@8		; audio::output::DirectSound `RTTI Type Descriptor'
PUBLIC	??_R3DirectSound@output@audio@@8		; audio::output::DirectSound::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DirectSound@output@audio@@8		; audio::output::DirectSound::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DirectSound@output@audio@@8	; audio::output::DirectSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3fd999999999999a
PUBLIC	__real@46feb000
PUBLIC	__real@47000000
PUBLIC	__real@c6feb000
EXTRN	_purecall:PROC
EXTRN	memset:PROC
EXTRN	DirectSoundCreate8:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	DSDEVID_DefaultPlayback:BYTE
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?current_app_@Application@app@@1PEAV12@EA:QWORD	; app::Application::current_app_
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
piecewise_construct DB 01H DUP (?)
allocator_arg DB 01H DUP (?)
ignore	DB	01H DUP (?)
_Tuple_alloc DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Interface@output@audio@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0Interface@output@audio@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0DirectSound@output@audio@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??0DirectSound@output@audio@@QEAA@XZ
$pdata$??1DirectSound@output@audio@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??1DirectSound@output@audio@@QEAA@XZ
$pdata$?Initialize@DirectSound@output@audio@@UEAAHIEE@Z DD imagerel $LN11
	DD	imagerel $LN11+1088
	DD	imagerel $unwind$?Initialize@DirectSound@output@audio@@UEAAHIEE@Z
$pdata$?Deinitialize@DirectSound@output@audio@@UEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?Deinitialize@DirectSound@output@audio@@UEAAHXZ
$pdata$?Play@DirectSound@output@audio@@UEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+176
	DD	imagerel $unwind$?Play@DirectSound@output@audio@@UEAAHXZ
$pdata$?Stop@DirectSound@output@audio@@UEAAHXZ DD imagerel $LN7
	DD	imagerel $LN7+152
	DD	imagerel $unwind$?Stop@DirectSound@output@audio@@UEAAHXZ
$pdata$?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ DD imagerel $LN6
	DD	imagerel $LN6+182
	DD	imagerel $unwind$?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ
$pdata$?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z
$pdata$?Write@DirectSound@output@audio@@UEAAHPEAXI@Z DD imagerel $LN24
	DD	imagerel $LN24+888
	DD	imagerel $unwind$?Write@DirectSound@output@audio@@UEAAHPEAXI@Z
$pdata$?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z DD imagerel $LN12
	DD	imagerel $LN12+462
	DD	imagerel $unwind$?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z
$pdata$?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z DD imagerel $LN7
	DD	imagerel $LN7+258
	DD	imagerel $unwind$?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Epiecewise_construct@std@@YAXXZ DD imagerel ??__Epiecewise_construct@std@@YAXXZ
	DD	imagerel ??__Epiecewise_construct@std@@YAXXZ+43
	DD	imagerel $unwind$??__Epiecewise_construct@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eallocator_arg@std@@YAXXZ DD imagerel ??__Eallocator_arg@std@@YAXXZ
	DD	imagerel ??__Eallocator_arg@std@@YAXXZ+43
	DD	imagerel $unwind$??__Eallocator_arg@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Ignore@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0_Ignore@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eignore@std@@YAXXZ DD imagerel ??__Eignore@std@@YAXXZ
	DD	imagerel ??__Eignore@std@@YAXXZ+39
	DD	imagerel $unwind$??__Eignore@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_Tuple_alloc@std@@YAXXZ DD imagerel ??__E_Tuple_alloc@std@@YAXXZ
	DD	imagerel ??__E_Tuple_alloc@std@@YAXXZ+43
	DD	imagerel $unwind$??__E_Tuple_alloc@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Current@Application@app@@SAPEAV12@XZ DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$?Current@Application@app@@SAPEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?clamp@output@audio@@YAXPEAXPEBMH@Z DD imagerel ?clamp@output@audio@@YAXPEAXPEBMH@Z
	DD	imagerel ?clamp@output@audio@@YAXPEAXPEBMH@Z+193
	DD	imagerel $unwind$?clamp@output@audio@@YAXPEAXPEBMH@Z
pdata	ENDS
CRT$XCU	SEGMENT
piecewise_construct$initializer$ DQ FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@c6feb000
CONST	SEGMENT
__real@c6feb000 DD 0c6feb000r			; -32600
CONST	ENDS
;	COMDAT __real@47000000
CONST	SEGMENT
__real@47000000 DD 047000000r			; 32768
CONST	ENDS
;	COMDAT __real@46feb000
CONST	SEGMENT
__real@46feb000 DD 046feb000r			; 32600
CONST	ENDS
;	COMDAT __real@3fd999999999999a
CONST	SEGMENT
__real@3fd999999999999a DQ 03fd999999999999ar	; 0.4
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DirectSound@output@audio@@8 DD imagerel ??_R0?AVDirectSound@output@audio@@@8 ; audio::output::DirectSound::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3DirectSound@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R2DirectSound@output@audio@@8 DD imagerel ??_R1A@?0A@EA@DirectSound@output@audio@@8 ; audio::output::DirectSound::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Interface@output@audio@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3DirectSound@output@audio@@8
rdata$r	SEGMENT
??_R3DirectSound@output@audio@@8 DD 00H			; audio::output::DirectSound::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2DirectSound@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDirectSound@output@audio@@@8
_DATA	SEGMENT
??_R0?AVDirectSound@output@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::output::DirectSound `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVDirectSound@output@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4DirectSound@output@audio@@6B@
rdata$r	SEGMENT
??_R4DirectSound@output@audio@@6B@ DD 01H		; audio::output::DirectSound::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVDirectSound@output@audio@@@8
	DD	imagerel ??_R3DirectSound@output@audio@@8
	DD	imagerel ??_R4DirectSound@output@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Interface@output@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Interface@output@audio@@8 DD imagerel ??_R0?AVInterface@output@audio@@@8 ; audio::output::Interface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2Interface@output@audio@@8
rdata$r	SEGMENT
??_R2Interface@output@audio@@8 DD imagerel ??_R1A@?0A@EA@Interface@output@audio@@8 ; audio::output::Interface::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Interface@output@audio@@8
rdata$r	SEGMENT
??_R3Interface@output@audio@@8 DD 00H			; audio::output::Interface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Interface@output@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVInterface@output@audio@@@8
_DATA	SEGMENT
??_R0?AVInterface@output@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::output::Interface `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVInterface@output@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Interface@output@audio@@6B@
rdata$r	SEGMENT
??_R4Interface@output@audio@@6B@ DD 01H			; audio::output::Interface::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVInterface@output@audio@@@8
	DD	imagerel ??_R3Interface@output@audio@@8
	DD	imagerel ??_R4Interface@output@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_7DirectSound@output@audio@@6B@
CONST	SEGMENT
??_7DirectSound@output@audio@@6B@ DQ FLAT:??_R4DirectSound@output@audio@@6B@ ; audio::output::DirectSound::`vftable'
	DQ	FLAT:?Initialize@DirectSound@output@audio@@UEAAHIEE@Z
	DQ	FLAT:?Deinitialize@DirectSound@output@audio@@UEAAHXZ
	DQ	FLAT:?Play@DirectSound@output@audio@@UEAAHXZ
	DQ	FLAT:?Stop@DirectSound@output@audio@@UEAAHXZ
	DQ	FLAT:?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ
	DQ	FLAT:?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z
	DQ	FLAT:?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z
	DQ	FLAT:?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z
CONST	ENDS
;	COMDAT ??_7Interface@output@audio@@6B@
CONST	SEGMENT
??_7Interface@output@audio@@6B@ DQ FLAT:??_R4Interface@output@audio@@6B@ ; audio::output::Interface::`vftable'
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Current@Application@app@@SAPEAV12@XZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_Tuple_alloc@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eignore@std@@YAXXZ DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Ignore@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eallocator_arg@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Epiecewise_construct@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
CONST	SEGMENT
?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcName$0 DB 064H ; audio::output::DirectSound::Initialize
	DB	073H
	DB	062H
	DB	064H
	DB	00H
	ORG $+11
?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcVarDesc DD 038H ; audio::output::DirectSound::Initialize
	DD	028H
	DQ	FLAT:?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcName$0
	ORG $+48
?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcFrameData DD 01H ; audio::output::DirectSound::Initialize
	DD	00H
	DQ	FLAT:?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcVarDesc
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcName$0 DB 063H ; audio::output::DirectSound::GetBytesBuffered
	DB	070H
	DB	06cH
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcName$1 DB 063H ; audio::output::DirectSound::GetBytesBuffered
	DB	077H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcVarDesc DD 044H ; audio::output::DirectSound::GetBytesBuffered
	DD	04H
	DQ	FLAT:?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcName$0
	ORG $+96
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcFrameData DD 02H ; audio::output::DirectSound::GetBytesBuffered
	DD	00H
	DQ	FLAT:?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcVarDesc
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$0 DB 062H ; audio::output::DirectSound::Write
	DB	075H
	DB	066H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	031H
	DB	00H
	ORG $+3
?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcName$0 DB 063H ; audio::output::DirectSound::BeginWrite
	DB	075H
	DB	072H
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$1 DB 062H ; audio::output::DirectSound::Write
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	031H
	DB	00H
	ORG $+6
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$2 DB 062H ; audio::output::DirectSound::Write
	DB	075H
	DB	066H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	032H
	DB	00H
	ORG $+7
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$3 DB 062H ; audio::output::DirectSound::Write
	DB	075H
	DB	066H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	032H
	DB	00H
	ORG $+6
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$4 DB 070H ; audio::output::DirectSound::Write
	DB	06cH
	DB	061H
	DB	079H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+4
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$5 DB 077H ; audio::output::DirectSound::Write
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+11
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcVarDesc DD 0a4H ; audio::output::DirectSound::Write
	DD	04H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$5
	DD	084H
	DD	04H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$4
	DD	0e4H
	DD	04H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$2
	DD	0c4H
	DD	04H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$0
	ORG $+288
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcFrameData DD 06H ; audio::output::DirectSound::Write
	DD	00H
	DQ	FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcVarDesc
?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcVarDesc DD 044H ; audio::output::DirectSound::BeginWrite
	DD	04H
	DQ	FLAT:?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcName$0
	ORG $+48
?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcFrameData DD 01H ; audio::output::DirectSound::BeginWrite
	DD	00H
	DQ	FLAT:?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$??0DirectSound@output@audio@@QEAA@XZ DD 021e01H
	DD	07006320aH
$unwind$??1DirectSound@output@audio@@QEAA@XZ DD 021e01H
	DD	07006320aH
$unwind$?Initialize@DirectSound@output@audio@@UEAAHIEE@Z DD 034419H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?Deinitialize@DirectSound@output@audio@@UEAAHXZ DD 021e01H
	DD	07006320aH
$unwind$?Play@DirectSound@output@audio@@UEAAHXZ DD 021e01H
	DD	07006520aH
$unwind$?Stop@DirectSound@output@audio@@UEAAHXZ DD 021e01H
	DD	07006520aH
$unwind$?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ DD 021e01H
	DD	07006b20aH
$unwind$?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z DD 022801H
	DD	070103214H
$unwind$?Write@DirectSound@output@audio@@UEAAHPEAXI@Z DD 032e01H
	DD	0240117H
	DD	07010H
$unwind$?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z DD 022601H
	DD	0700bd20fH
$unwind$?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z DD 022301H
	DD	0700b720fH
$unwind$?clamp@output@audio@@YAXPEAXPEBMH@Z DD 022801H
	DD	070101214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Interface@output@audio@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ DD 010601H
	DD	07006H
xdata	ENDS
CRT$XCU	SEGMENT
allocator_arg$initializer$ DQ FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
ignore$initializer$ DQ FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_Tuple_alloc$initializer$ DQ FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
dests$ = 0
i$1 = 8
v$2 = 12
dest$ = 32
src$ = 40
nsamples$ = 48
?clamp@output@audio@@YAXPEAXPEBMH@Z PROC		; audio::output::clamp

; 267  : {

	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 268  :   int16_t *dests = (int16_t *)dest;

	mov	rax, QWORD PTR dest$[rsp]
	mov	QWORD PTR dests$[rsp], rax

; 269  : 
; 270  :   for (int32_t i=0; i < nsamples; i++)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN5@clamp
$LN4@clamp:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN5@clamp:
	mov	eax, DWORD PTR nsamples$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@clamp

; 271  :   {
; 272  :     float v = src[i] * 32768.0f;

	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@47000000
	movss	DWORD PTR v$2[rsp], xmm0

; 273  :     if (v >  32600.0f) v =  32600.0f;

	movss	xmm0, DWORD PTR v$2[rsp]
	comiss	xmm0, DWORD PTR __real@46feb000
	jbe	SHORT $LN2@clamp
	movss	xmm0, DWORD PTR __real@46feb000
	movss	DWORD PTR v$2[rsp], xmm0
$LN2@clamp:

; 274  :     if (v < -32600.0f) v = -32600.0f;

	movss	xmm0, DWORD PTR __real@c6feb000
	comiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN1@clamp
	movss	xmm0, DWORD PTR __real@c6feb000
	movss	DWORD PTR v$2[rsp], xmm0
$LN1@clamp:

; 275  :     dests[i] = (int16_t)v;

	cvttss2si eax, DWORD PTR v$2[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR dests$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax

; 276  :   }

	jmp	SHORT $LN4@clamp
$LN3@clamp:

; 277  : }

	add	rsp, 16
	pop	rdi
	ret	0
?clamp@output@audio@@YAXPEAXPEBMH@Z ENDP		; audio::output::clamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z
_TEXT	SEGMENT
ppInterfaceToRelease$ = 48
??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z PROC ; SafeRelease<IDirectSound8>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+16]

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@SafeReleas:

; 33   :     }
; 34   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z ENDP ; SafeRelease<IDirectSound8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\types.h
;	COMDAT ??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z
_TEXT	SEGMENT
ppInterfaceToRelease$ = 48
??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z PROC ; SafeRelease<IDirectSoundBuffer>, COMDAT

; 29   : inline void SafeRelease(Interface **ppInterfaceToRelease) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 30   :     if (*ppInterfaceToRelease != NULL) {

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN1@SafeReleas

; 31   :         (*ppInterfaceToRelease)->Release();

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+16]

; 32   :         (*ppInterfaceToRelease) = NULL;

	mov	rax, QWORD PTR ppInterfaceToRelease$[rsp]
	mov	QWORD PTR [rax], 0
$LN1@SafeReleas:

; 33   :     }
; 34   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z ENDP ; SafeRelease<IDirectSoundBuffer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\application.h
;	COMDAT ?Current@Application@app@@SAPEAV12@XZ
_TEXT	SEGMENT
?Current@Application@app@@SAPEAV12@XZ PROC		; app::Application::Current, COMDAT

; 34   :     static Application* Current() {

$LN3:
	push	rdi

; 35   :       return current_app_;

	mov	rax, QWORD PTR ?current_app_@Application@app@@1PEAV12@EA ; app::Application::current_app_

; 36   :     }

	pop	rdi
	ret	0
?Current@Application@app@@SAPEAV12@XZ ENDP		; app::Application::Current
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\application.h
;	COMDAT ?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ
_TEXT	SEGMENT
this$ = 16
?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ PROC ; app::Application::display_window, COMDAT

; 31   :     DisplayWindow& display_window() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 32   :       return display_window_;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 16

; 33   :     }

	pop	rdi
	ret	0
?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ ENDP ; app::Application::display_window
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:ignore
	call	??0_Ignore@std@@QEAA@XZ			; std::_Ignore::_Ignore
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Ignore@std@@QEAA@XZ PROC				; std::_Ignore::_Ignore, COMDAT

; 120  : 	_Ignore()

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		{	// construct
; 122  : 		}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Ignore@std@@QEAA@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
tv75 = 48
this$ = 80
data_pointer$ = 88
?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z PROC	; audio::output::DirectSound::EndWrite

; 280  : int DirectSound::EndWrite(void* data_pointer) {

$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 281  : 
; 282  :   /*auto dest_buf=(uint8_t*)buf1;
; 283  :   auto dw=len1;
; 284  : 
; 285  :   auto src_buf=(float*)data_pointer;
; 286  :   while (dw) { 
; 287  :     float v = *src_buf++;
; 288  :     v *= 32768.0f; // * vol;
; 289  :     if (v >  32600.0f) v =  32600.0f;
; 290  :     if (v < -32600.0f) v = -32600.0f;
; 291  :     *dest_buf++ = (short)v;
; 292  :     dw--;
; 293  :   }
; 294  : 
; 295  :   if(buf2)  {
; 296  :     dest_buf=(uint8_t*)buf2;
; 297  :     dw=len2;
; 298  :     while(dw) {
; 299  :       float v = *src_buf++;
; 300  :       v *= 32768.0f; // * vol;
; 301  :       if (v >  32600.0f) v =  32600.0f;
; 302  :       if (v < -32600.0f) v = -32600.0f;
; 303  :       *dest_buf++ = (short)v;
; 304  :     dw--;
; 305  :     }
; 306  :   }*/
; 307  : 
; 308  :     if (buf1)

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN4@EndWrite

; 309  :       clamp(buf1, (float*)data_pointer, len1/2);

	xor	edx, edx
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+88]
	mov	ecx, 2
	div	ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR data_pointer$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	?clamp@output@audio@@YAXPEAXPEBMH@Z	; audio::output::clamp
$LN4@EndWrite:

; 310  :     if (buf2)

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN3@EndWrite

; 311  :       clamp(buf2, (float*)data_pointer + len1/2, len2/2);

	xor	edx, edx
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+92]
	mov	ecx, 2
	div	ecx
	mov	DWORD PTR tv75[rsp], eax
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rcx+88]
	mov	ecx, 2
	div	ecx
	mov	eax, eax
	mov	rcx, QWORD PTR data_pointer$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR tv75[rsp]
	mov	r8d, ecx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	?clamp@output@audio@@YAXPEAXPEBMH@Z	; audio::output::clamp
$LN3@EndWrite:

; 312  : 
; 313  :   if (secondary_buffer->Unlock(buf1, len1, buf2, len2)==DS_OK)

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rdx+92]
	mov	DWORD PTR [rsp+32], edx
	mov	rdx, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rdx+80]
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rdx+88]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+72]
	call	QWORD PTR [rax+152]
	test	eax, eax
	jne	SHORT $LN2@EndWrite

; 314  :     return S_OK;

	xor	eax, eax
	jmp	SHORT $LN5@EndWrite

; 315  :   else

	jmp	SHORT $LN1@EndWrite
$LN2@EndWrite:

; 316  :     return S_FALSE;

	mov	eax, 1
$LN1@EndWrite:
$LN5@EndWrite:

; 317  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?EndWrite@DirectSound@output@audio@@UEAAHPEAX@Z ENDP	; audio::output::DirectSound::EndWrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
curpos$ = 68
nwrite$ = 84
hr$4 = 88
tv151 = 96
this$ = 128
samples$ = 136
?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z PROC	; audio::output::DirectSound::BeginWrite

; 231  : int DirectSound::BeginWrite(uint32_t& samples) {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rdi, rsp
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 232  :    DWORD curpos;
; 233  :   int32_t nwrite = 0;

	mov	DWORD PTR nwrite$[rsp], 0
$LN9@BeginWrite:

; 234  :   for (;;) {
; 235  :     HRESULT hr = secondary_buffer->GetCurrentPosition(&curpos, 0);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	lea	rdx, QWORD PTR curpos$[rsp]
	call	QWORD PTR [rax+32]
	mov	DWORD PTR hr$4[rsp], eax

; 236  :     if (hr == S_OK)

	cmp	DWORD PTR hr$4[rsp], 0
	jne	$LN7@BeginWrite

; 237  :     {
; 238  :       // find out how many bytes to write
; 239  :       curpos &= ~31u;

	mov	eax, DWORD PTR curpos$[rsp]
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR curpos$[rsp], eax

; 240  :       if (curpos == last_cursor_pos)

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR curpos$[rsp], eax
	jne	SHORT $LN6@BeginWrite

; 241  :         return S_FALSE;

	mov	eax, 1
	jmp	$LN10@BeginWrite
$LN6@BeginWrite:

; 242  : 
; 243  :       nwrite = curpos - last_cursor_pos;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+96]
	mov	ecx, DWORD PTR curpos$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nwrite$[rsp], eax

; 244  :       if (nwrite < 0)

	cmp	DWORD PTR nwrite$[rsp], 0
	jge	SHORT $LN5@BeginWrite

; 245  :         nwrite += buffer_size_;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	ecx, DWORD PTR nwrite$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nwrite$[rsp], eax
$LN5@BeginWrite:

; 246  : 
; 247  :       hr = secondary_buffer->Lock(last_cursor_pos, nwrite, &buf1, &len1, &buf2, &len2, 0);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 92					; 0000005cH
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, 80					; 00000050H
	mov	rdx, QWORD PTR this$[rsp]
	add	rdx, 88					; 00000058H
	mov	r8, QWORD PTR this$[rsp]
	add	r8, 72					; 00000048H
	mov	r9, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [r9+64]
	mov	r10, QWORD PTR this$[rsp]
	mov	r10, QWORD PTR [r10+64]
	mov	r9, QWORD PTR [r9]
	mov	QWORD PTR tv151[rsp], r9
	mov	DWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, r8
	mov	r8d, DWORD PTR nwrite$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+96]
	mov	rcx, r10
	mov	rax, QWORD PTR tv151[rsp]
	call	QWORD PTR [rax+88]
	mov	DWORD PTR hr$4[rsp], eax
$LN7@BeginWrite:

; 248  :     }
; 249  : 
; 250  :     if (hr == S_OK)

	cmp	DWORD PTR hr$4[rsp], 0
	jne	SHORT $LN4@BeginWrite

; 251  :       break;

	jmp	SHORT $LN8@BeginWrite
	jmp	SHORT $LN3@BeginWrite
$LN4@BeginWrite:

; 252  :     else if (hr == DSERR_BUFFERLOST)

	cmp	DWORD PTR hr$4[rsp], -2005401450	; ffffffff88780096H
	jne	SHORT $LN2@BeginWrite

; 253  :       secondary_buffer->Restore();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+160]

; 254  :     else

	jmp	SHORT $LN1@BeginWrite
$LN2@BeginWrite:

; 255  :       return S_FALSE;

	mov	eax, 1
	jmp	SHORT $LN10@BeginWrite
$LN1@BeginWrite:
$LN3@BeginWrite:

; 256  :   }

	jmp	$LN9@BeginWrite
$LN8@BeginWrite:

; 257  : 
; 258  :   // we got the lock
; 259  :   last_cursor_pos = curpos;

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR curpos$[rsp]
	mov	DWORD PTR [rax+96], ecx

; 260  :   //g_dsound.bufcnt += nwrite;
; 261  :   samples = nwrite / 4;

	mov	eax, DWORD PTR nwrite$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	mov	rcx, QWORD PTR samples$[rsp]
	mov	DWORD PTR [rcx], eax

; 262  :   return S_OK;

	xor	eax, eax
$LN10@BeginWrite:

; 263  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?BeginWrite@DirectSound@output@audio@@UEAAHAEAI@Z ENDP	; audio::output::DirectSound::BeginWrite
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
buf_ptr1$ = 72
buf_ptr2$ = 104
hr$ = 116
play_cursor$ = 132
write_cursor$ = 164
buf_size1$ = 196
buf_size2$ = 228
dest_buf$ = 248
len$ = 256
src_buf$ = 264
$T9 = 272
$T10 = 273
$T11 = 274
$T12 = 275
this$ = 304
data_pointer$ = 312
size_bytes$ = 320
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z PROC	; audio::output::DirectSound::Write

; 143  : int DirectSound::Write(void* data_pointer, uint32_t size_bytes) {

$LN24:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 288				; 00000120H
	mov	rdi, rsp
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]
	mov	BYTE PTR $T9[rsp], 0
	mov	BYTE PTR $T11[rsp], 0
	mov	BYTE PTR $T10[rsp], 0
	mov	BYTE PTR $T12[rsp], 0
$LN12@Write:

; 144  :   LPVOID buf_ptr1, buf_ptr2;
; 145  :   HRESULT hr;
; 146  :   DWORD play_cursor,write_cursor;
; 147  :   DWORD buf_size1,buf_size2; 
; 148  : 
; 149  :   for (;;) {
; 150  :     hr = secondary_buffer->GetCurrentPosition(&play_cursor,&write_cursor);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR write_cursor$[rsp]
	lea	rdx, QWORD PTR play_cursor$[rsp]
	call	QWORD PTR [rax+32]
	mov	DWORD PTR hr$[rsp], eax

; 151  :     if (hr == S_OK)

	cmp	DWORD PTR hr$[rsp], 0
	jne	$LN10@Write

; 152  :     {
; 153  :       hr = secondary_buffer->Lock(write_cursor,size_bytes,&buf_ptr1,&buf_size1,&buf_ptr2,&buf_size2,0);

	mov	BYTE PTR $T9[rsp], 1
	mov	BYTE PTR $T10[rsp], 1
	mov	BYTE PTR $T11[rsp], 1
	mov	BYTE PTR $T12[rsp], 1
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rsp+56], 0
	lea	rdx, QWORD PTR buf_size2$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	lea	rdx, QWORD PTR buf_ptr2$[rsp]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, QWORD PTR buf_size1$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	lea	r9, QWORD PTR buf_ptr1$[rsp]
	mov	r8d, DWORD PTR size_bytes$[rsp]
	mov	edx, DWORD PTR write_cursor$[rsp]
	call	QWORD PTR [rax+88]
	mov	DWORD PTR hr$[rsp], eax
$LN10@Write:

; 154  :     }
; 155  : 
; 156  :     if (hr == S_OK)

	cmp	DWORD PTR hr$[rsp], 0
	jne	SHORT $LN9@Write

; 157  :       break;

	jmp	SHORT $LN11@Write
	jmp	SHORT $LN8@Write
$LN9@Write:

; 158  :     else if (hr == DSERR_BUFFERLOST)

	cmp	DWORD PTR hr$[rsp], -2005401450		; ffffffff88780096H
	jne	SHORT $LN7@Write

; 159  :       secondary_buffer->Restore();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+160]

; 160  :     else

	jmp	SHORT $LN6@Write
$LN7@Write:

; 161  :       return S_FALSE;

	mov	eax, 1
	jmp	$LN13@Write
$LN6@Write:
$LN8@Write:

; 162  :   }  

	jmp	$LN12@Write
$LN11@Write:

; 163  : 
; 164  :   auto dest_buf=(uint8_t*)buf_ptr1;

	cmp	BYTE PTR $T12[rsp], 0
	jne	SHORT $LN15@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$0
	call	_RTC_UninitUse
$LN15@Write:
	mov	rax, QWORD PTR buf_ptr1$[rsp]
	mov	QWORD PTR dest_buf$[rsp], rax

; 165  :   auto len=buf_size1;

	cmp	BYTE PTR $T11[rsp], 0
	jne	SHORT $LN16@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$1
	call	_RTC_UninitUse
$LN16@Write:
	mov	eax, DWORD PTR buf_size1$[rsp]
	mov	DWORD PTR len$[rsp], eax

; 166  : 
; 167  :   auto src_buf=(uint8_t*)data_pointer;

	mov	rax, QWORD PTR data_pointer$[rsp]
	mov	QWORD PTR src_buf$[rsp], rax
$LN5@Write:

; 168  :   while(len) {*dest_buf++=*src_buf++;len--;}

	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN4@Write
	mov	rax, QWORD PTR dest_buf$[rsp]
	mov	rcx, QWORD PTR src_buf$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR dest_buf$[rsp]
	inc	rax
	mov	QWORD PTR dest_buf$[rsp], rax
	mov	rax, QWORD PTR src_buf$[rsp]
	inc	rax
	mov	QWORD PTR src_buf$[rsp], rax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	jmp	SHORT $LN5@Write
$LN4@Write:

; 169  : 
; 170  :   if(buf_ptr2)  {

	cmp	BYTE PTR $T10[rsp], 0
	jne	SHORT $LN17@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$2
	call	_RTC_UninitUse
$LN17@Write:
	cmp	QWORD PTR buf_ptr2$[rsp], 0
	je	$LN3@Write

; 171  :     dest_buf=(uint8_t*)buf_ptr2;

	cmp	BYTE PTR $T10[rsp], 0
	jne	SHORT $LN18@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$2
	call	_RTC_UninitUse
$LN18@Write:
	mov	rax, QWORD PTR buf_ptr2$[rsp]
	mov	QWORD PTR dest_buf$[rsp], rax

; 172  :     len=buf_size2;

	cmp	BYTE PTR $T9[rsp], 0
	jne	SHORT $LN19@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$3
	call	_RTC_UninitUse
$LN19@Write:
	mov	eax, DWORD PTR buf_size2$[rsp]
	mov	DWORD PTR len$[rsp], eax
$LN2@Write:

; 173  :     while(len) {*dest_buf++=*src_buf++;len--;}

	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN1@Write
	mov	rax, QWORD PTR dest_buf$[rsp]
	mov	rcx, QWORD PTR src_buf$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR dest_buf$[rsp]
	inc	rax
	mov	QWORD PTR dest_buf$[rsp], rax
	mov	rax, QWORD PTR src_buf$[rsp]
	inc	rax
	mov	QWORD PTR src_buf$[rsp], rax
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	jmp	SHORT $LN2@Write
$LN1@Write:
$LN3@Write:

; 174  :   }
; 175  : 
; 176  :   secondary_buffer->Unlock(buf_ptr1,buf_size1,buf_ptr2,buf_size2);

	cmp	BYTE PTR $T9[rsp], 0
	jne	SHORT $LN20@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$3
	call	_RTC_UninitUse
$LN20@Write:
	cmp	BYTE PTR $T10[rsp], 0
	jne	SHORT $LN21@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$2
	call	_RTC_UninitUse
$LN21@Write:
	cmp	BYTE PTR $T11[rsp], 0
	jne	SHORT $LN22@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$1
	call	_RTC_UninitUse
$LN22@Write:
	cmp	BYTE PTR $T12[rsp], 0
	jne	SHORT $LN23@Write
	lea	rcx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcName$0
	call	_RTC_UninitUse
$LN23@Write:
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	mov	edx, DWORD PTR buf_size2$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR buf_ptr2$[rsp]
	mov	r8d, DWORD PTR buf_size1$[rsp]
	mov	rdx, QWORD PTR buf_ptr1$[rsp]
	call	QWORD PTR [rax+152]

; 177  :   return S_OK;

	xor	eax, eax
$LN13@Write:

; 178  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?Write@DirectSound@output@audio@@UEAAHPEAXI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
?Write@DirectSound@output@audio@@UEAAHPEAXI@Z ENDP	; audio::output::DirectSound::Write
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
this$ = 48
play$ = 56
write$ = 64
?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z PROC	; audio::output::DirectSound::GetCursors

; 138  : void DirectSound::GetCursors(uint32_t& play, uint32_t& write) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 139  :   secondary_buffer->GetCurrentPosition((LPDWORD)&play,(LPDWORD)&write);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	mov	r8, QWORD PTR write$[rsp]
	mov	rdx, QWORD PTR play$[rsp]
	call	QWORD PTR [rax+32]

; 140  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?GetCursors@DirectSound@output@audio@@UEAAXAEAI0@Z ENDP	; audio::output::DirectSound::GetCursors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
cplay$ = 36
cwrite$ = 68
this$ = 112
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ PROC ; audio::output::DirectSound::GetBytesBuffered

; 125  : uint32_t DirectSound::GetBytesBuffered() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 126  :  unsigned long cplay,cwrite;
; 127  : 
; 128  :  if(last_write_cursor==0xffffffff) return 0;

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+100], -1			; ffffffffH
	jne	SHORT $LN3@GetBytesBu
	xor	eax, eax
	jmp	SHORT $LN4@GetBytesBu
$LN3@GetBytesBu:

; 129  : 
; 130  :  secondary_buffer->GetCurrentPosition(&cplay,&cwrite);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR cwrite$[rsp]
	lea	rdx, QWORD PTR cplay$[rsp]
	call	QWORD PTR [rax+32]

; 131  : 
; 132  :  if(cplay>buffer_size_) return buffer_size_;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	cmp	DWORD PTR cplay$[rsp], eax
	jbe	SHORT $LN2@GetBytesBu
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	jmp	SHORT $LN4@GetBytesBu
$LN2@GetBytesBu:

; 133  : 
; 134  :  if(cplay<last_write_cursor) return last_write_cursor-cplay;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+100]
	cmp	DWORD PTR cplay$[rsp], eax
	jae	SHORT $LN1@GetBytesBu
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR cplay$[rsp]
	mov	eax, DWORD PTR [rax+100]
	sub	eax, ecx
	jmp	SHORT $LN4@GetBytesBu
$LN1@GetBytesBu:

; 135  :  return (buffer_size_-cplay)+last_write_cursor;

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR cplay$[rsp]
	mov	eax, DWORD PTR [rax+40]
	sub	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	add	eax, DWORD PTR [rcx+100]
$LN4@GetBytesBu:

; 136  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?GetBytesBuffered@DirectSound@output@audio@@UEAAIXZ ENDP ; audio::output::DirectSound::GetBytesBuffered
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
hr$1 = 32
hr$2 = 36
this$ = 64
?Stop@DirectSound@output@audio@@UEAAHXZ PROC		; audio::output::DirectSound::Stop

; 113  : int DirectSound::Stop() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 114  :   if (secondary_buffer != nullptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN4@Stop

; 115  :     auto hr = secondary_buffer->Stop();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+144]
	mov	DWORD PTR hr$1[rsp], eax

; 116  :     if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$1[rsp], 0
	jge	SHORT $LN3@Stop
	mov	eax, 1
	jmp	SHORT $LN5@Stop
$LN3@Stop:
$LN4@Stop:

; 117  :   }
; 118  :   if (primary_buffer != nullptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN2@Stop

; 119  :     auto hr = primary_buffer->Stop();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rax, QWORD PTR [rax]
	call	QWORD PTR [rax+144]
	mov	DWORD PTR hr$2[rsp], eax

; 120  :     if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$2[rsp], 0
	jge	SHORT $LN1@Stop
	mov	eax, 1
	jmp	SHORT $LN5@Stop
$LN1@Stop:
$LN2@Stop:

; 121  :   }
; 122  :   return S_OK;

	xor	eax, eax
$LN5@Stop:

; 123  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Stop@DirectSound@output@audio@@UEAAHXZ ENDP		; audio::output::DirectSound::Stop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
hr$ = 32
this$ = 64
?Play@DirectSound@output@audio@@UEAAHXZ PROC		; audio::output::DirectSound::Play

; 104  : int DirectSound::Play() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 105  :   auto hr = primary_buffer->Play(0,0,DSBPLAY_LOOPING);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	call	QWORD PTR [rax+96]
	mov	DWORD PTR hr$[rsp], eax

; 106  :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN2@Play
	mov	eax, 1
	jmp	SHORT $LN3@Play
$LN2@Play:

; 107  :   hr = secondary_buffer->Play(0,0,DSBPLAY_LOOPING);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	call	QWORD PTR [rax+96]
	mov	DWORD PTR hr$[rsp], eax

; 108  :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN1@Play
	mov	eax, 1
	jmp	SHORT $LN3@Play
$LN1@Play:

; 109  :   hr = secondary_buffer->SetCurrentPosition(0);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	rax, QWORD PTR [rax]
	xor	edx, edx
	call	QWORD PTR [rax+104]
	mov	DWORD PTR hr$[rsp], eax

; 110  :   return hr;

	mov	eax, DWORD PTR hr$[rsp]
$LN3@Play:

; 111  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Play@DirectSound@output@audio@@UEAAHXZ ENDP		; audio::output::DirectSound::Play
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
this$ = 48
?Deinitialize@DirectSound@output@audio@@UEAAHXZ PROC	; audio::output::DirectSound::Deinitialize

; 96   : int DirectSound::Deinitialize() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 97   :   Stop();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+24]

; 98   :   SafeRelease(&secondary_buffer);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, rax
	call	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>

; 99   :   SafeRelease(&primary_buffer);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, rax
	call	??$SafeRelease@UIDirectSoundBuffer@@@@YAXPEAPEAUIDirectSoundBuffer@@@Z ; SafeRelease<IDirectSoundBuffer>

; 100  :   SafeRelease(&ds8);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 48					; 00000030H
	mov	rcx, rax
	call	??$SafeRelease@UIDirectSound8@@@@YAXPEAPEAUIDirectSound8@@@Z ; SafeRelease<IDirectSound8>

; 101  :   return S_OK;

	xor	eax, eax

; 102  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Deinitialize@DirectSound@output@audio@@UEAAHXZ ENDP	; audio::output::DirectSound::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
hr$ = 32
dsbd$ = 56
tv181 = 112
tv357 = 120
tv277 = 128
tv356 = 136
tv337 = 144
tv355 = 152
__$ArrayPad$ = 160
this$ = 192
sample_rate$ = 200
channels$ = 208
bits$ = 216
?Initialize@DirectSound@output@audio@@UEAAHIEE@Z PROC	; audio::output::DirectSound::Initialize

; 36   : int DirectSound::Initialize(uint32_t sample_rate, uint8_t channels, uint8_t bits) {

$LN11:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rdi, rsp
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 37   :   last_write_cursor=0xffffffff;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+100], -1			; ffffffffH

; 38   :   HRESULT hr = DirectSoundCreate8(&DSDEVID_DefaultPlayback,&ds8,nullptr);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 48					; 00000030H
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:DSDEVID_DefaultPlayback
	call	DirectSoundCreate8
	mov	DWORD PTR hr$[rsp], eax

; 39   :   if (FAILED(hr)) {

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN8@Initialize

; 40   :     Deinitialize();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+8]

; 41   :     return S_FALSE;

	mov	eax, 1
	jmp	$LN9@Initialize
$LN8@Initialize:

; 42   :   }
; 43   : 
; 44   :   if (window_handle_==nullptr)

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN7@Initialize

; 45   :     window_handle_ = app::Application::Current()->display_window().handle();

	call	?Current@Application@app@@SAPEAV12@XZ	; app::Application::Current
	mov	rcx, rax
	call	?display_window@Application@app@@QEAAAEAVDisplayWindow@2@XZ ; app::Application::display_window
	mov	rcx, rax
	call	?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ ; core::windows::Window::handle
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax
$LN7@Initialize:

; 46   :   hr = ds8->SetCooperativeLevel((HWND)window_handle_,DSSCL_PRIORITY);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rax]
	mov	r8d, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+32]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR hr$[rsp], eax

; 47   :   if (FAILED(hr)) {

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN6@Initialize

; 48   :     hr = ds8->SetCooperativeLevel((HWND)window_handle_,DSSCL_NORMAL);  

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+32]
	call	QWORD PTR [rax+48]
	mov	DWORD PTR hr$[rsp], eax

; 49   :     if (FAILED(hr)) {

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN5@Initialize

; 50   :       return S_FALSE;

	mov	eax, 1
	jmp	$LN9@Initialize
$LN5@Initialize:
$LN6@Initialize:

; 51   :     }
; 52   :   }
; 53   : 
; 54   :   DSBUFFERDESC dsbd;
; 55   : 	ZeroMemory(&dsbd,sizeof(DSBUFFERDESC));

	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR dsbd$[rsp]
	call	memset

; 56   : 	dsbd.dwSize        = sizeof(DSBUFFERDESC);

	mov	DWORD PTR dsbd$[rsp], 40		; 00000028H

; 57   : 	dsbd.dwFlags       = DSBCAPS_PRIMARYBUFFER;

	mov	DWORD PTR dsbd$[rsp+4], 1

; 58   : 	dsbd.dwBufferBytes = 0;

	mov	DWORD PTR dsbd$[rsp+8], 0

; 59   : 	dsbd.lpwfxFormat   = NULL;

	mov	QWORD PTR dsbd$[rsp+16], 0

; 60   : 
; 61   : 
; 62   : 	hr = ds8->CreateSoundBuffer(&dsbd,&primary_buffer,nullptr) ;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+48]
	mov	QWORD PTR tv181[rsp], rdx
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv357[rsp], rcx
	xor	r9d, r9d
	mov	r8, rax
	lea	rdx, QWORD PTR dsbd$[rsp]
	mov	rax, QWORD PTR tv181[rsp]
	mov	rcx, rax
	mov	rax, QWORD PTR tv357[rsp]
	call	QWORD PTR [rax+24]
	mov	DWORD PTR hr$[rsp], eax

; 63   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN4@Initialize
	mov	eax, 1
	jmp	$LN9@Initialize
$LN4@Initialize:

; 64   : 
; 65   : 	ZeroMemory( &wave_format_, sizeof(WAVEFORMATEX) ); 

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	r8d, 18
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 66   : 	wave_format_.wFormatTag      = (WORD) WAVE_FORMAT_PCM; 

	mov	eax, 1
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+8], ax

; 67   : 	wave_format_.nChannels       =  channels; 

	movzx	eax, BYTE PTR channels$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+10], ax

; 68   : 	wave_format_.nSamplesPerSec  = sample_rate; 

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR sample_rate$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 69   : 	wave_format_.wBitsPerSample  = (WORD) bits; 

	movzx	eax, BYTE PTR bits$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+22], ax

; 70   : 	wave_format_.nBlockAlign     = (WORD) ((wave_format_.wBitsPerSample >> 3) * wave_format_.nChannels);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+22]
	sar	eax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+10]
	imul	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+20], ax

; 71   : 	wave_format_.nAvgBytesPerSec = (DWORD) (wave_format_.nSamplesPerSec * wave_format_.nBlockAlign);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	imul	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 72   :   wave_format_.cbSize = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+24], ax

; 73   : 	hr = primary_buffer->SetFormat(&wave_format_);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+56]
	mov	QWORD PTR tv277[rsp], rdx
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv356[rsp], rcx
	mov	rdx, rax
	mov	rax, QWORD PTR tv277[rsp]
	mov	rcx, rax
	mov	rax, QWORD PTR tv356[rsp]
	call	QWORD PTR [rax+112]
	mov	DWORD PTR hr$[rsp], eax

; 74   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN3@Initialize
	mov	eax, 1
	jmp	$LN9@Initialize
$LN3@Initialize:

; 75   : 
; 76   : 
; 77   :   if (buffer_size_ == 0)

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN2@Initialize

; 78   :     buffer_size_ = uint32_t(wave_format_.nBlockAlign * wave_format_.nSamplesPerSec * 0.4); //400ms

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+20]
	mov	rcx, QWORD PTR this$[rsp]
	imul	eax, DWORD PTR [rcx+12]
	mov	eax, eax
	cvtsi2sd xmm0, rax
	mulsd	xmm0, QWORD PTR __real@3fd999999999999a
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+40], eax
$LN2@Initialize:

; 79   : 
; 80   : 
; 81   : 	ZeroMemory( &dsbd, sizeof(DSBUFFERDESC) );

	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR dsbd$[rsp]
	call	memset

; 82   : 	dsbd.dwSize        = sizeof(DSBUFFERDESC);

	mov	DWORD PTR dsbd$[rsp], 40		; 00000028H

; 83   : 	dsbd.dwFlags       = DSBCAPS_GLOBALFOCUS | DSBCAPS_GETCURRENTPOSITION2;

	mov	DWORD PTR dsbd$[rsp+4], 98304		; 00018000H

; 84   : 	dsbd.dwBufferBytes = buffer_size_;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR dsbd$[rsp+8], eax

; 85   : 	dsbd.lpwfxFormat   = &wave_format_;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	QWORD PTR dsbd$[rsp+16], rax

; 86   :   // Create a temporary sound buffer with the specific buffer settings.
; 87   : 	hr = ds8->CreateSoundBuffer(&dsbd, &secondary_buffer, NULL);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rdx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rdx+48]
	mov	QWORD PTR tv337[rsp], rdx
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv355[rsp], rcx
	xor	r9d, r9d
	mov	r8, rax
	lea	rdx, QWORD PTR dsbd$[rsp]
	mov	rax, QWORD PTR tv337[rsp]
	mov	rcx, rax
	mov	rax, QWORD PTR tv355[rsp]
	call	QWORD PTR [rax+24]
	mov	DWORD PTR hr$[rsp], eax

; 88   :   if (FAILED(hr)) return S_FALSE;

	cmp	DWORD PTR hr$[rsp], 0
	jge	SHORT $LN1@Initialize
	mov	eax, 1
	jmp	SHORT $LN9@Initialize
$LN1@Initialize:

; 89   : 
; 90   :     //hr = secondary_buffer->SetVolume(DSBVOLUME_MAX);
; 91   :   //if (FAILED(hr)) return S_FALSE;
; 92   : 
; 93   :   return Play();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+16]
$LN9@Initialize:

; 94   : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?Initialize@DirectSound@output@audio@@UEAAHIEE@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?Initialize@DirectSound@output@audio@@UEAAHIEE@Z ENDP	; audio::output::DirectSound::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
this$ = 48
??1DirectSound@output@audio@@QEAA@XZ PROC		; audio::output::DirectSound::~DirectSound

; 32   : DirectSound::~DirectSound() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7DirectSound@output@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 33   :   Deinitialize();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Deinitialize@DirectSound@output@audio@@UEAAHXZ ; audio::output::DirectSound::Deinitialize

; 34   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1DirectSound@output@audio@@QEAA@XZ ENDP		; audio::output::DirectSound::~DirectSound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\directsound.cpp
_TEXT	SEGMENT
this$ = 48
??0DirectSound@output@audio@@QEAA@XZ PROC		; audio::output::DirectSound::DirectSound

; 27   : DirectSound::DirectSound() : last_write_cursor(0),last_cursor_pos(0) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0Interface@output@audio@@QEAA@XZ
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7DirectSound@output@audio@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+96], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+100], 0

; 28   :   window_handle_ = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 29   :   buffer_size_ = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+40], 0

; 30   : }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0DirectSound@output@audio@@QEAA@XZ ENDP		; audio::output::DirectSound::DirectSound
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Interface@output@audio@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0Interface@output@audio@@QEAA@XZ PROC			; audio::output::Interface::Interface, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Interface@output@audio@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0Interface@output@audio@@QEAA@XZ ENDP			; audio::output::Interface::Interface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\wincore\windows\window.h
;	COMDAT ?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ
_TEXT	SEGMENT
this$ = 16
?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ PROC	; core::windows::Window::handle, COMDAT

; 42   :   HWND handle() { return handle_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+616]
	pop	rdi
	ret	0
?handle@Window@windows@core@@QEAAPEAUHWND__@@XZ ENDP	; core::windows::Window::handle
_TEXT	ENDS
END

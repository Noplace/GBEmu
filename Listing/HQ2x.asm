; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?yuvTable@@3PEAIEA				; yuvTable
PUBLIC	?rotate@@3PAEA					; rotate
_BSS	SEGMENT
?yuvTable@@3PEAIEA DQ 01H DUP (?)			; yuvTable
?rotate@@3PAEA DB 0100H DUP (?)				; rotate
_BSS	ENDS
CONST	SEGMENT
hqTable	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	0fH
	DB	0cH
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	0cH
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	05H
	DB	03H
	DB	010H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	013H
	DB	0cH
	DB	0cH
	DB	05H
	DB	013H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	013H
	DB	01H
	DB	0cH
	DB	05H
	DB	013H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	013H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	0fH
	DB	0cH
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	05H
	DB	03H
	DB	010H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0dH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
CONST	ENDS
PUBLIC	?hq2x_filter_size@@YAXII@Z			; hq2x_filter_size
PUBLIC	?hq2x_filter_render@@YAXPEAIIPEBIIII@Z		; hq2x_filter_render
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd52aaaaaaaaaab
PUBLIC	__real@3ff1249249249249
PUBLIC	__real@3ff4000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4060000000000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__ImageBase:BYTE
EXTRN	_fltused:DWORD
;	COMDAT ?initialized@?1??initialize@@YAXXZ@4_NA
_BSS	SEGMENT
?initialized@?1??initialize@@YAXXZ@4_NA DB 01H DUP (?)	; `initialize'::`2'::initialized
_BSS	ENDS
pdata	SEGMENT
$pdata$?rgb15@@YAII@Z DD imagerel ?rgb15@@YAII@Z
	DD	imagerel ?rgb15@@YAII@Z+11
	DD	imagerel $unwind$?rgb15@@YAII@Z
$pdata$?rgb30@@YAIG@Z DD imagerel ?rgb30@@YAIG@Z
	DD	imagerel ?rgb30@@YAIG@Z+13
	DD	imagerel $unwind$?rgb30@@YAIG@Z
$pdata$?initialize@@YAXXZ DD imagerel ?initialize@@YAXXZ
	DD	imagerel ?initialize@@YAXXZ+537
	DD	imagerel $unwind$?initialize@@YAXXZ
$pdata$?same@@YA_NGI@Z DD imagerel ?same@@YA_NGI@Z
	DD	imagerel ?same@@YA_NGI@Z+106
	DD	imagerel $unwind$?same@@YA_NGI@Z
$pdata$?diff@@YA_NII@Z DD imagerel ?diff@@YA_NII@Z
	DD	imagerel ?diff@@YA_NII@Z+89
	DD	imagerel $unwind$?diff@@YA_NII@Z
$pdata$?grow@@YAXAEAI@Z DD imagerel ?grow@@YAXAEAI@Z
	DD	imagerel ?grow@@YAXAEAI@Z+55
	DD	imagerel $unwind$?grow@@YAXAEAI@Z
$pdata$?pack@@YAGI@Z DD imagerel ?pack@@YAGI@Z
	DD	imagerel ?pack@@YAGI@Z+35
	DD	imagerel $unwind$?pack@@YAGI@Z
$pdata$?blend1@@YAGII@Z DD imagerel ?blend1@@YAGII@Z
	DD	imagerel ?blend1@@YAGII@Z+79
	DD	imagerel $unwind$?blend1@@YAGII@Z
$pdata$?blend2@@YAGIII@Z DD imagerel ?blend2@@YAGIII@Z
	DD	imagerel ?blend2@@YAGIII@Z+98
	DD	imagerel $unwind$?blend2@@YAGIII@Z
$pdata$?blend3@@YAGIII@Z DD imagerel ?blend3@@YAGIII@Z
	DD	imagerel ?blend3@@YAGIII@Z+105
	DD	imagerel $unwind$?blend3@@YAGIII@Z
$pdata$?blend4@@YAGIII@Z DD imagerel ?blend4@@YAGIII@Z
	DD	imagerel ?blend4@@YAGIII@Z+98
	DD	imagerel $unwind$?blend4@@YAGIII@Z
$pdata$?blend5@@YAGIII@Z DD imagerel ?blend5@@YAGIII@Z
	DD	imagerel ?blend5@@YAGIII@Z+105
	DD	imagerel $unwind$?blend5@@YAGIII@Z
$pdata$?blend6@@YAGIII@Z DD imagerel ?blend6@@YAGIII@Z
	DD	imagerel ?blend6@@YAGIII@Z+98
	DD	imagerel $unwind$?blend6@@YAGIII@Z
$pdata$?blend@@YAGIGGGGGG@Z DD imagerel ?blend@@YAGIGGGGGG@Z
	DD	imagerel ?blend@@YAGIGGGGGG@Z+1584
	DD	imagerel $unwind$?blend@@YAGIGGGGGG@Z
$pdata$?hq2x_filter_size@@YAXII@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?hq2x_filter_size@@YAXII@Z
$pdata$?hq2x_filter_render@@YAXPEAIIPEBIIII@Z DD imagerel $LN13
	DD	imagerel $LN13+1694
	DD	imagerel $unwind$?hq2x_filter_render@@YAXPEAIIPEBIIII@Z
pdata	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff4000000000000
CONST	SEGMENT
__real@3ff4000000000000 DQ 03ff4000000000000r	; 1.25
CONST	ENDS
;	COMDAT __real@3ff1249249249249
CONST	SEGMENT
__real@3ff1249249249249 DQ 03ff1249249249249r	; 1.07143
CONST	ENDS
;	COMDAT __real@3fd52aaaaaaaaaab
CONST	SEGMENT
__real@3fd52aaaaaaaaaab DQ 03fd52aaaaaaaaaabr	; 0.330729
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?rgb15@@YAII@Z DD 010501H
	DD	07005H
$unwind$?rgb30@@YAIG@Z DD 010601H
	DD	07006H
$unwind$?initialize@@YAXXZ DD 021501H
	DD	07002d206H
$unwind$?same@@YA_NGI@Z DD 022201H
	DD	0700a120eH
$unwind$?diff@@YA_NII@Z DD 022001H
	DD	07009120dH
$unwind$?grow@@YAXAEAI@Z DD 010601H
	DD	07006H
$unwind$?pack@@YAGI@Z DD 010501H
	DD	07005H
$unwind$?blend1@@YAGII@Z DD 022001H
	DD	07009320dH
$unwind$?blend2@@YAGIII@Z DD 022501H
	DD	0700e3212H
$unwind$?blend3@@YAGIII@Z DD 022501H
	DD	0700e3212H
$unwind$?blend4@@YAGIII@Z DD 022501H
	DD	0700e3212H
$unwind$?blend5@@YAGIII@Z DD 022501H
	DD	0700e3212H
$unwind$?blend6@@YAGIII@Z DD 022501H
	DD	0700e3212H
$unwind$?blend@@YAGIGGGGGG@Z DD 033301H
	DD	012011dH
	DD	07016H
$unwind$?hq2x_filter_size@@YAXII@Z DD 022001H
	DD	07009320dH
$unwind$?hq2x_filter_render@@YAXPEAIIPEBIIII@Z DD 033201H
	DD	014011bH
	DD	07014H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
y$1 = 64
in$2 = 72
out0$3 = 80
out1$4 = 88
prevline$5 = 96
nextline$6 = 100
x$7 = 104
A$8 = 108
B$9 = 112
C$10 = 116
D$11 = 120
E$12 = 124
F$13 = 128
G$14 = 132
H$15 = 136
I$16 = 140
e$17 = 144
pattern$18 = 148
tv86 = 152
tv89 = 156
output$ = 176
outputPitch$ = 184
input$ = 192
inputPitch$ = 200
width$ = 208
height$ = 216
?hq2x_filter_render@@YAXPEAIIPEBIIII@Z PROC		; hq2x_filter_render

; 159  : ) {

$LN13:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rdi, rsp
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 160  :   initialize();

	call	?initialize@@YAXXZ			; initialize

; 161  :   outputPitch >>= 2, inputPitch >>= 2;

	mov	eax, DWORD PTR outputPitch$[rsp]
	shr	eax, 2
	mov	DWORD PTR outputPitch$[rsp], eax
	mov	eax, DWORD PTR inputPitch$[rsp]
	shr	eax, 2
	mov	DWORD PTR inputPitch$[rsp], eax

; 162  : 
; 163  :   for(unsigned y = 0; y < height; y++) {

	mov	DWORD PTR y$1[rsp], 0
	jmp	SHORT $LN6@hq2x_filte
$LN5@hq2x_filte:
	mov	eax, DWORD PTR y$1[rsp]
	inc	eax
	mov	DWORD PTR y$1[rsp], eax
$LN6@hq2x_filte:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$1[rsp], eax
	jae	$LN4@hq2x_filte

; 164  :     const uint32_t *in = input + y * inputPitch;

	mov	eax, DWORD PTR y$1[rsp]
	imul	eax, DWORD PTR inputPitch$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR input$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR in$2[rsp], rax

; 165  :     uint32_t *out0 = output + y * outputPitch * 2;

	mov	eax, DWORD PTR y$1[rsp]
	imul	eax, DWORD PTR outputPitch$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	rcx, QWORD PTR output$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR out0$3[rsp], rax

; 166  :     uint32_t *out1 = output + y * outputPitch * 2 + outputPitch;

	mov	eax, DWORD PTR y$1[rsp]
	imul	eax, DWORD PTR outputPitch$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	rcx, QWORD PTR output$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR outputPitch$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR out1$4[rsp], rax

; 167  : 
; 168  :     int prevline = (y == 0 ? 0 : inputPitch);

	cmp	DWORD PTR y$1[rsp], 0
	jne	SHORT $LN9@hq2x_filte
	mov	DWORD PTR tv86[rsp], 0
	jmp	SHORT $LN10@hq2x_filte
$LN9@hq2x_filte:
	mov	eax, DWORD PTR inputPitch$[rsp]
	mov	DWORD PTR tv86[rsp], eax
$LN10@hq2x_filte:
	mov	eax, DWORD PTR tv86[rsp]
	mov	DWORD PTR prevline$5[rsp], eax

; 169  :     int nextline = (y == height - 1 ? 0 : inputPitch);

	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	cmp	DWORD PTR y$1[rsp], eax
	jne	SHORT $LN11@hq2x_filte
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN12@hq2x_filte
$LN11@hq2x_filte:
	mov	eax, DWORD PTR inputPitch$[rsp]
	mov	DWORD PTR tv89[rsp], eax
$LN12@hq2x_filte:
	mov	eax, DWORD PTR tv89[rsp]
	mov	DWORD PTR nextline$6[rsp], eax

; 170  : 
; 171  :     in++;

	mov	rax, QWORD PTR in$2[rsp]
	add	rax, 4
	mov	QWORD PTR in$2[rsp], rax

; 172  :     *out0++ = 0; *out0++ = 0;

	mov	rax, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out0$3[rsp]
	add	rax, 4
	mov	QWORD PTR out0$3[rsp], rax
	mov	rax, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out0$3[rsp]
	add	rax, 4
	mov	QWORD PTR out0$3[rsp], rax

; 173  :     *out1++ = 0; *out1++ = 0;

	mov	rax, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out1$4[rsp]
	add	rax, 4
	mov	QWORD PTR out1$4[rsp], rax
	mov	rax, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out1$4[rsp]
	add	rax, 4
	mov	QWORD PTR out1$4[rsp], rax

; 174  : 
; 175  :     for(unsigned x = 1; x < width - 1; x++) {

	mov	DWORD PTR x$7[rsp], 1
	jmp	SHORT $LN3@hq2x_filte
$LN2@hq2x_filte:
	mov	eax, DWORD PTR x$7[rsp]
	inc	eax
	mov	DWORD PTR x$7[rsp], eax
$LN3@hq2x_filte:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	cmp	DWORD PTR x$7[rsp], eax
	jae	$LN1@hq2x_filte

; 176  :       uint32_t A = rgb15(*(in - prevline - 1));

	movsxd	rax, DWORD PTR prevline$5[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR in$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR [rax-4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR A$8[rsp], eax

; 177  :       uint32_t B = rgb15(*(in - prevline + 0));

	movsxd	rax, DWORD PTR prevline$5[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR in$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR [rax]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR B$9[rsp], eax

; 178  :       uint32_t C = rgb15(*(in - prevline + 1));

	movsxd	rax, DWORD PTR prevline$5[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR in$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR [rax+4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR C$10[rsp], eax

; 179  :       uint32_t D = rgb15(*(in - 1));

	mov	rax, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rax-4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR D$11[rsp], eax

; 180  :       uint32_t E = rgb15(*(in + 0));

	mov	rax, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR E$12[rsp], eax

; 181  :       uint32_t F = rgb15(*(in + 1));

	mov	rax, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR F$13[rsp], eax

; 182  :       uint32_t G = rgb15(*(in + nextline - 1));

	movsxd	rax, DWORD PTR nextline$6[rsp]
	mov	rcx, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rcx+rax*4-4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR G$14[rsp], eax

; 183  :       uint32_t H = rgb15(*(in + nextline + 0));

	movsxd	rax, DWORD PTR nextline$6[rsp]
	mov	rcx, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rcx+rax*4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR H$15[rsp], eax

; 184  :       uint32_t I = rgb15(*(in + nextline + 1));

	movsxd	rax, DWORD PTR nextline$6[rsp]
	mov	rcx, QWORD PTR in$2[rsp]
	mov	ecx, DWORD PTR [rcx+rax*4+4]
	call	?rgb15@@YAII@Z				; rgb15
	mov	DWORD PTR I$16[rsp], eax

; 185  :       uint32_t e = yuvTable[E] + diff_offset;

	mov	eax, DWORD PTR E$12[rsp]
	mov	rcx, QWORD PTR ?yuvTable@@3PEAIEA	; yuvTable
	mov	eax, DWORD PTR [rcx+rax*4]
	add	eax, -2012201977			; 88103c07H
	mov	DWORD PTR e$17[rsp], eax

; 186  : 
; 187  :       uint8_t pattern;
; 188  :       pattern  = diff(e, A) << 0;

	mov	edx, DWORD PTR A$8[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	mov	BYTE PTR pattern$18[rsp], al

; 189  :       pattern |= diff(e, B) << 1;

	mov	edx, DWORD PTR B$9[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 1
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 190  :       pattern |= diff(e, C) << 2;

	mov	edx, DWORD PTR C$10[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 2
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 191  :       pattern |= diff(e, D) << 3;

	mov	edx, DWORD PTR D$11[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 3
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 192  :       pattern |= diff(e, F) << 4;

	mov	edx, DWORD PTR F$13[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 4
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 193  :       pattern |= diff(e, G) << 5;

	mov	edx, DWORD PTR G$14[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 5
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 194  :       pattern |= diff(e, H) << 6;

	mov	edx, DWORD PTR H$15[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 6
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 195  :       pattern |= diff(e, I) << 7;

	mov	edx, DWORD PTR I$16[rsp]
	mov	ecx, DWORD PTR e$17[rsp]
	call	?diff@@YA_NII@Z				; diff
	movzx	eax, al
	shl	eax, 7
	movzx	ecx, BYTE PTR pattern$18[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR pattern$18[rsp], al

; 196  : 
; 197  :       *(out0 + 0) = rgb30(blend(hqTable[pattern], E, A, B, D, F, H)); pattern = rotate[pattern];

	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:hqTable
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, WORD PTR H$15[rsp]
	mov	WORD PTR [rsp+48], cx
	movzx	ecx, WORD PTR F$13[rsp]
	mov	WORD PTR [rsp+40], cx
	movzx	ecx, WORD PTR D$11[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	r9d, WORD PTR B$9[rsp]
	movzx	r8d, WORD PTR A$8[rsp]
	movzx	edx, WORD PTR E$12[rsp]
	mov	ecx, eax
	call	?blend@@YAGIGGGGGG@Z			; blend
	movzx	ecx, ax
	call	?rgb30@@YAIG@Z				; rgb30
	mov	rcx, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rcx], eax
	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:?rotate@@3PAEA		; rotate
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR pattern$18[rsp], al

; 198  :       *(out0 + 1) = rgb30(blend(hqTable[pattern], E, C, F, B, H, D)); pattern = rotate[pattern];

	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:hqTable
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, WORD PTR D$11[rsp]
	mov	WORD PTR [rsp+48], cx
	movzx	ecx, WORD PTR H$15[rsp]
	mov	WORD PTR [rsp+40], cx
	movzx	ecx, WORD PTR B$9[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	r9d, WORD PTR F$13[rsp]
	movzx	r8d, WORD PTR C$10[rsp]
	movzx	edx, WORD PTR E$12[rsp]
	mov	ecx, eax
	call	?blend@@YAGIGGGGGG@Z			; blend
	movzx	ecx, ax
	call	?rgb30@@YAIG@Z				; rgb30
	mov	rcx, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rcx+4], eax
	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:?rotate@@3PAEA		; rotate
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR pattern$18[rsp], al

; 199  :       *(out1 + 1) = rgb30(blend(hqTable[pattern], E, I, H, F, D, B)); pattern = rotate[pattern];

	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:hqTable
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, WORD PTR B$9[rsp]
	mov	WORD PTR [rsp+48], cx
	movzx	ecx, WORD PTR D$11[rsp]
	mov	WORD PTR [rsp+40], cx
	movzx	ecx, WORD PTR F$13[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	r9d, WORD PTR H$15[rsp]
	movzx	r8d, WORD PTR I$16[rsp]
	movzx	edx, WORD PTR E$12[rsp]
	mov	ecx, eax
	call	?blend@@YAGIGGGGGG@Z			; blend
	movzx	ecx, ax
	call	?rgb30@@YAIG@Z				; rgb30
	mov	rcx, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rcx+4], eax
	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:?rotate@@3PAEA		; rotate
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR pattern$18[rsp], al

; 200  :       *(out1 + 0) = rgb30(blend(hqTable[pattern], E, G, D, H, B, F));

	movzx	eax, BYTE PTR pattern$18[rsp]
	lea	rcx, OFFSET FLAT:hqTable
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, WORD PTR F$13[rsp]
	mov	WORD PTR [rsp+48], cx
	movzx	ecx, WORD PTR B$9[rsp]
	mov	WORD PTR [rsp+40], cx
	movzx	ecx, WORD PTR H$15[rsp]
	mov	WORD PTR [rsp+32], cx
	movzx	r9d, WORD PTR D$11[rsp]
	movzx	r8d, WORD PTR G$14[rsp]
	movzx	edx, WORD PTR E$12[rsp]
	mov	ecx, eax
	call	?blend@@YAGIGGGGGG@Z			; blend
	movzx	ecx, ax
	call	?rgb30@@YAIG@Z				; rgb30
	mov	rcx, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rcx], eax

; 201  : 
; 202  :       in++;

	mov	rax, QWORD PTR in$2[rsp]
	add	rax, 4
	mov	QWORD PTR in$2[rsp], rax

; 203  :       out0 += 2;

	mov	rax, QWORD PTR out0$3[rsp]
	add	rax, 8
	mov	QWORD PTR out0$3[rsp], rax

; 204  :       out1 += 2;

	mov	rax, QWORD PTR out1$4[rsp]
	add	rax, 8
	mov	QWORD PTR out1$4[rsp], rax

; 205  :     }

	jmp	$LN2@hq2x_filte
$LN1@hq2x_filte:

; 206  : 
; 207  :     in++;

	mov	rax, QWORD PTR in$2[rsp]
	add	rax, 4
	mov	QWORD PTR in$2[rsp], rax

; 208  :     *out0++ = 0; *out0++ = 0;

	mov	rax, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out0$3[rsp]
	add	rax, 4
	mov	QWORD PTR out0$3[rsp], rax
	mov	rax, QWORD PTR out0$3[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out0$3[rsp]
	add	rax, 4
	mov	QWORD PTR out0$3[rsp], rax

; 209  :     *out1++ = 0; *out1++ = 0;

	mov	rax, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out1$4[rsp]
	add	rax, 4
	mov	QWORD PTR out1$4[rsp], rax
	mov	rax, QWORD PTR out1$4[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR out1$4[rsp]
	add	rax, 4
	mov	QWORD PTR out1$4[rsp], rax

; 210  :   }

	jmp	$LN5@hq2x_filte
$LN4@hq2x_filte:

; 211  : }

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?hq2x_filter_render@@YAXPEAIIPEBIIII@Z ENDP		; hq2x_filter_render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
width$ = 48
height$ = 56
?hq2x_filter_size@@YAXII@Z PROC				; hq2x_filter_size

; 149  : void hq2x_filter_size(unsigned width, unsigned height) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 150  :   initialize();

	call	?initialize@@YAXXZ			; initialize

; 151  :   width  *= 2;

	mov	eax, DWORD PTR width$[rsp]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax

; 152  :   height *= 2;

	mov	eax, DWORD PTR height$[rsp]
	shl	eax, 1
	mov	DWORD PTR height$[rsp], eax

; 153  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?hq2x_filter_size@@YAXII@Z ENDP				; hq2x_filter_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv64 = 32
tv85 = 36
tv92 = 40
tv131 = 44
tv138 = 48
tv145 = 52
tv152 = 56
tv159 = 60
tv166 = 64
tv177 = 68
tv181 = 72
tv191 = 76
tv195 = 80
tv205 = 84
tv209 = 88
tv219 = 92
tv228 = 96
tv238 = 100
tv247 = 104
tv257 = 108
tv266 = 112
tv276 = 116
tv285 = 120
tv295 = 124
tv304 = 128
rule$ = 160
E$ = 168
A$ = 176
B$ = 184
D$ = 192
F$ = 200
H$ = 208
?blend@@YAGIGGGGGG@Z PROC				; blend

; 124  : static uint16_t blend(unsigned rule, uint16_t E, uint16_t A, uint16_t B, uint16_t D, uint16_t F, uint16_t H) {

	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 144				; 00000090H
	mov	rdi, rsp
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+160]

; 125  :   switch(rule) { default:

	mov	eax, DWORD PTR rule$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	mov	eax, DWORD PTR tv64[rsp]
	dec	eax
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 18
	ja	SHORT $LN20@blend
	mov	eax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN41@blend[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN20@blend:

; 126  :     case  0: return E;

	movzx	eax, WORD PTR E$[rsp]
	jmp	$LN23@blend
$LN19@blend:

; 127  :     case  1: return blend1(E, A);

	movzx	eax, WORD PTR A$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	jmp	$LN23@blend
$LN18@blend:

; 128  :     case  2: return blend1(E, D);

	movzx	eax, WORD PTR D$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	jmp	$LN23@blend
$LN17@blend:

; 129  :     case  3: return blend1(E, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	jmp	$LN23@blend
$LN16@blend:

; 130  :     case  4: return blend2(E, D, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv85[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, eax
	call	?blend2@@YAGIII@Z			; blend2
	jmp	$LN23@blend
$LN15@blend:

; 131  :     case  5: return blend2(E, A, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR A$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv92[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, eax
	call	?blend2@@YAGIII@Z			; blend2
	jmp	$LN23@blend
$LN14@blend:

; 132  :     case  6: return blend2(E, A, D);

	movzx	eax, WORD PTR D$[rsp]
	movzx	ecx, WORD PTR A$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv131[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv131[rsp]
	mov	ecx, eax
	call	?blend2@@YAGIII@Z			; blend2
	jmp	$LN23@blend
$LN13@blend:

; 133  :     case  7: return blend3(E, B, D);

	movzx	eax, WORD PTR D$[rsp]
	movzx	ecx, WORD PTR B$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv138[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, eax
	call	?blend3@@YAGIII@Z			; blend3
	jmp	$LN23@blend
$LN12@blend:

; 134  :     case  8: return blend3(E, D, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv145[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv145[rsp]
	mov	ecx, eax
	call	?blend3@@YAGIII@Z			; blend3
	jmp	$LN23@blend
$LN11@blend:

; 135  :     case  9: return blend4(E, D, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv152[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, eax
	call	?blend4@@YAGIII@Z			; blend4
	jmp	$LN23@blend
$LN10@blend:

; 136  :     case 10: return blend5(E, D, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv159[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv159[rsp]
	mov	ecx, eax
	call	?blend5@@YAGIII@Z			; blend5
	jmp	$LN23@blend
$LN9@blend:

; 137  :     case 11: return blend6(E, D, B);

	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv166[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, eax
	call	?blend6@@YAGIII@Z			; blend6
	jmp	$LN23@blend
$LN8@blend:

; 138  :     case 12: return same(B, D) ? blend2(E, D, B) : E;

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv177[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, eax
	call	?blend2@@YAGIII@Z			; blend2
	mov	WORD PTR tv181[rsp], ax
	jmp	SHORT $LN26@blend
$LN25@blend:
	movzx	eax, WORD PTR E$[rsp]
	mov	WORD PTR tv181[rsp], ax
$LN26@blend:
	movzx	eax, WORD PTR tv181[rsp]
	jmp	$LN23@blend
$LN7@blend:

; 139  :     case 13: return same(B, D) ? blend5(E, D, B) : E;

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv191[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv191[rsp]
	mov	ecx, eax
	call	?blend5@@YAGIII@Z			; blend5
	mov	WORD PTR tv195[rsp], ax
	jmp	SHORT $LN28@blend
$LN27@blend:
	movzx	eax, WORD PTR E$[rsp]
	mov	WORD PTR tv195[rsp], ax
$LN28@blend:
	movzx	eax, WORD PTR tv195[rsp]
	jmp	$LN23@blend
$LN6@blend:

; 140  :     case 14: return same(B, D) ? blend6(E, D, B) : E;

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv205[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv205[rsp]
	mov	ecx, eax
	call	?blend6@@YAGIII@Z			; blend6
	mov	WORD PTR tv209[rsp], ax
	jmp	SHORT $LN30@blend
$LN29@blend:
	movzx	eax, WORD PTR E$[rsp]
	mov	WORD PTR tv209[rsp], ax
$LN30@blend:
	movzx	eax, WORD PTR tv209[rsp]
	jmp	$LN23@blend
$LN5@blend:

; 141  :     case 15: return same(B, D) ? blend2(E, D, B) : blend1(E, A);

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv219[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv219[rsp]
	mov	ecx, eax
	call	?blend2@@YAGIII@Z			; blend2
	mov	WORD PTR tv228[rsp], ax
	jmp	SHORT $LN32@blend
$LN31@blend:
	movzx	eax, WORD PTR A$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	mov	WORD PTR tv228[rsp], ax
$LN32@blend:
	movzx	eax, WORD PTR tv228[rsp]
	jmp	$LN23@blend
$LN4@blend:

; 142  :     case 16: return same(B, D) ? blend4(E, D, B) : blend1(E, A);

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv238[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv238[rsp]
	mov	ecx, eax
	call	?blend4@@YAGIII@Z			; blend4
	mov	WORD PTR tv247[rsp], ax
	jmp	SHORT $LN34@blend
$LN33@blend:
	movzx	eax, WORD PTR A$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	mov	WORD PTR tv247[rsp], ax
$LN34@blend:
	movzx	eax, WORD PTR tv247[rsp]
	jmp	$LN23@blend
$LN3@blend:

; 143  :     case 17: return same(B, D) ? blend5(E, D, B) : blend1(E, A);

	movzx	eax, WORD PTR D$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv257[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv257[rsp]
	mov	ecx, eax
	call	?blend5@@YAGIII@Z			; blend5
	mov	WORD PTR tv266[rsp], ax
	jmp	SHORT $LN36@blend
$LN35@blend:
	movzx	eax, WORD PTR A$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	mov	WORD PTR tv266[rsp], ax
$LN36@blend:
	movzx	eax, WORD PTR tv266[rsp]
	jmp	$LN23@blend
$LN2@blend:

; 144  :     case 18: return same(B, F) ? blend3(E, B, D) : blend1(E, D);

	movzx	eax, WORD PTR F$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR B$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@blend
	movzx	eax, WORD PTR D$[rsp]
	movzx	ecx, WORD PTR B$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv276[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv276[rsp]
	mov	ecx, eax
	call	?blend3@@YAGIII@Z			; blend3
	mov	WORD PTR tv285[rsp], ax
	jmp	SHORT $LN38@blend
$LN37@blend:
	movzx	eax, WORD PTR D$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	mov	WORD PTR tv285[rsp], ax
$LN38@blend:
	movzx	eax, WORD PTR tv285[rsp]
	jmp	SHORT $LN23@blend
$LN1@blend:

; 145  :     case 19: return same(D, H) ? blend3(E, D, B) : blend1(E, B);

	movzx	eax, WORD PTR H$[rsp]
	mov	edx, eax
	movzx	ecx, WORD PTR D$[rsp]
	call	?same@@YA_NGI@Z				; same
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@blend
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR D$[rsp]
	movzx	edx, WORD PTR E$[rsp]
	mov	DWORD PTR tv295[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv295[rsp]
	mov	ecx, eax
	call	?blend3@@YAGIII@Z			; blend3
	mov	WORD PTR tv304[rsp], ax
	jmp	SHORT $LN40@blend
$LN39@blend:
	movzx	eax, WORD PTR B$[rsp]
	movzx	ecx, WORD PTR E$[rsp]
	mov	edx, eax
	call	?blend1@@YAGII@Z			; blend1
	mov	WORD PTR tv304[rsp], ax
$LN40@blend:
	movzx	eax, WORD PTR tv304[rsp]
$LN23@blend:

; 146  :   }
; 147  : }

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
$LN41@blend:
	DD	$LN19@blend
	DD	$LN18@blend
	DD	$LN17@blend
	DD	$LN16@blend
	DD	$LN15@blend
	DD	$LN14@blend
	DD	$LN13@blend
	DD	$LN12@blend
	DD	$LN11@blend
	DD	$LN10@blend
	DD	$LN9@blend
	DD	$LN8@blend
	DD	$LN7@blend
	DD	$LN6@blend
	DD	$LN5@blend
	DD	$LN4@blend
	DD	$LN3@blend
	DD	$LN2@blend
	DD	$LN1@blend
?blend@@YAGIGGGGGG@Z ENDP				; blend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
C$ = 64
?blend6@@YAGIII@Z PROC					; blend6

; 119  : static uint16_t blend6(uint32_t A, uint32_t B, uint32_t C) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 120  :   grow(A); grow(B); grow(C);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR C$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 121  :   return pack((A * 14 + B + C) >> 4);

	mov	eax, DWORD PTR A$[rsp]
	imul	eax, 14
	add	eax, DWORD PTR B$[rsp]
	add	eax, DWORD PTR C$[rsp]
	shr	eax, 4
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 122  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend6@@YAGIII@Z ENDP					; blend6
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
C$ = 64
?blend5@@YAGIII@Z PROC					; blend5

; 114  : static uint16_t blend5(uint32_t A, uint32_t B, uint32_t C) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 115  :   grow(A); grow(B); grow(C);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR C$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 116  :   return pack((A * 2 + (B + C) * 3) >> 3);

	mov	eax, DWORD PTR C$[rsp]
	mov	ecx, DWORD PTR B$[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, 3
	mov	ecx, DWORD PTR A$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	shr	eax, 3
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 117  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend5@@YAGIII@Z ENDP					; blend5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
C$ = 64
?blend4@@YAGIII@Z PROC					; blend4

; 109  : static uint16_t blend4(uint32_t A, uint32_t B, uint32_t C) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 110  :   grow(A); grow(B); grow(C);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR C$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 111  :   return pack((A * 6 + B + C) >> 3);

	mov	eax, DWORD PTR A$[rsp]
	imul	eax, 6
	add	eax, DWORD PTR B$[rsp]
	add	eax, DWORD PTR C$[rsp]
	shr	eax, 3
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 112  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend4@@YAGIII@Z ENDP					; blend4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
C$ = 64
?blend3@@YAGIII@Z PROC					; blend3

; 104  : static uint16_t blend3(uint32_t A, uint32_t B, uint32_t C) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 105  :   grow(A); grow(B); grow(C);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR C$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 106  :   return pack((A * 5 + B * 2 + C) >> 3);

	mov	eax, DWORD PTR A$[rsp]
	imul	eax, 5
	mov	ecx, DWORD PTR C$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR B$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	shr	eax, 3
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 107  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend3@@YAGIII@Z ENDP					; blend3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
C$ = 64
?blend2@@YAGIII@Z PROC					; blend2

; 99   : static uint16_t blend2(uint32_t A, uint32_t B, uint32_t C) {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 100  :   grow(A); grow(B); grow(C);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR C$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 101  :   return pack((A * 2 + B + C) >> 2);

	mov	eax, DWORD PTR B$[rsp]
	mov	ecx, DWORD PTR A$[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	add	eax, DWORD PTR C$[rsp]
	shr	eax, 2
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 102  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend2@@YAGIII@Z ENDP					; blend2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
A$ = 48
B$ = 56
?blend1@@YAGII@Z PROC					; blend1

; 94   : static uint16_t blend1(uint32_t A, uint32_t B) {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 95   :   grow(A); grow(B);

	lea	rcx, QWORD PTR A$[rsp]
	call	?grow@@YAXAEAI@Z			; grow
	lea	rcx, QWORD PTR B$[rsp]
	call	?grow@@YAXAEAI@Z			; grow

; 96   :   return pack((A * 3 + B) >> 2);

	mov	eax, DWORD PTR A$[rsp]
	imul	eax, 3
	add	eax, DWORD PTR B$[rsp]
	shr	eax, 2
	mov	ecx, eax
	call	?pack@@YAGI@Z				; pack

; 97   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?blend1@@YAGII@Z ENDP					; blend1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
n$ = 16
?pack@@YAGI@Z PROC					; pack

; 92   : static uint16_t pack(uint32_t n) { n &= 0x03e07c1f; return n | (n >> 16); }

	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65043487				; 03e07c1fH
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR n$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR n$[rsp]
	or	ecx, eax
	mov	eax, ecx
	pop	rdi
	ret	0
?pack@@YAGI@Z ENDP					; pack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
n$ = 16
?grow@@YAXAEAI@Z PROC					; grow

; 91   : static void grow(uint32_t &n) { n |= n << 16; n &= 0x03e07c1f; }

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 16
	mov	rcx, QWORD PTR n$[rsp]
	mov	ecx, DWORD PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR n$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 65043487				; 03e07c1fH
	mov	rcx, QWORD PTR n$[rsp]
	mov	DWORD PTR [rcx], eax
	pop	rdi
	ret	0
?grow@@YAXAEAI@Z ENDP					; grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv70 = 0
x$ = 32
y$ = 40
?diff@@YA_NII@Z PROC					; diff

; 87   : static bool diff(uint32_t x, uint32_t y) {

	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+32]

; 88   :   return ((x - yuvTable[y]) & diff_mask) != 0;

	mov	eax, DWORD PTR y$[rsp]
	mov	rcx, QWORD PTR ?yuvTable@@3PEAIEA	; yuvTable
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	and	eax, 1880065008				; 700f83f0H
	test	eax, eax
	je	SHORT $LN3@diff
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@diff
$LN3@diff:
	mov	DWORD PTR tv70[rsp], 0
$LN4@diff:
	movzx	eax, BYTE PTR tv70[rsp]

; 89   : }

	add	rsp, 16
	pop	rdi
	ret	0
?diff@@YA_NII@Z ENDP					; diff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv74 = 0
x$ = 32
y$ = 40
?same@@YA_NGI@Z PROC					; same

; 83   : static bool same(uint16_t x, uint32_t y) {

	mov	DWORD PTR [rsp+16], edx
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+32]

; 84   :   return !((yuvTable[x] - yuvTable[y] + diff_offset) & diff_mask);

	movzx	eax, WORD PTR x$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	rdx, QWORD PTR ?yuvTable@@3PEAIEA	; yuvTable
	mov	r8, QWORD PTR ?yuvTable@@3PEAIEA	; yuvTable
	mov	ecx, DWORD PTR [r8+rcx*4]
	mov	eax, DWORD PTR [rdx+rax*4]
	sub	eax, ecx
	add	eax, -2012201977			; 88103c07H
	and	eax, 1880065008				; 700f83f0H
	test	eax, eax
	jne	SHORT $LN3@same
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@same
$LN3@same:
	mov	DWORD PTR tv74[rsp], 0
$LN4@same:
	movzx	eax, BYTE PTR tv74[rsp]

; 85   : }

	add	rsp, 16
	pop	rdi
	ret	0
?same@@YA_NGI@Z ENDP					; same
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
i$1 = 32
R$2 = 36
G$3 = 37
B$4 = 38
r$5 = 40
g$6 = 48
b$7 = 56
y$8 = 64
u$9 = 72
v$10 = 80
n$11 = 88
$T12 = 96
?initialize@@YAXXZ PROC					; initialize

; 45   : static void initialize() {

	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rdi, rsp
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 46   :   static bool initialized = false;
; 47   :   if(initialized == true) return;

	movzx	eax, BYTE PTR ?initialized@?1??initialize@@YAXXZ@4_NA
	cmp	eax, 1
	jne	SHORT $LN7@initialize
	jmp	$LN8@initialize
$LN7@initialize:

; 48   :   initialized = true;

	mov	BYTE PTR ?initialized@?1??initialize@@YAXXZ@4_NA, 1

; 49   : 
; 50   :   yuvTable = new uint32_t[32768];

	mov	ecx, 131072				; 00020000H
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T12[rsp], rax
	mov	rax, QWORD PTR $T12[rsp]
	mov	QWORD PTR ?yuvTable@@3PEAIEA, rax	; yuvTable

; 51   : 
; 52   :   for(unsigned i = 0; i < 32768; i++) {

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@initialize
$LN5@initialize:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN6@initialize:
	cmp	DWORD PTR i$1[rsp], 32768		; 00008000H
	jae	$LN4@initialize

; 53   :     uint8_t R = (i >> 10) & 31;

	mov	eax, DWORD PTR i$1[rsp]
	shr	eax, 10
	and	eax, 31
	mov	BYTE PTR R$2[rsp], al

; 54   :     uint8_t G = (i >>  5) & 31;

	mov	eax, DWORD PTR i$1[rsp]
	shr	eax, 5
	and	eax, 31
	mov	BYTE PTR G$3[rsp], al

; 55   :     uint8_t B = (i >>  0) & 31;

	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 31
	mov	BYTE PTR B$4[rsp], al

; 56   : 
; 57   :     double r = (R << 3) | (R >> 2);

	movzx	eax, BYTE PTR R$2[rsp]
	shl	eax, 3
	movzx	ecx, BYTE PTR R$2[rsp]
	sar	ecx, 2
	or	eax, ecx
	cvtsi2sd xmm0, eax
	movsdx	QWORD PTR r$5[rsp], xmm0

; 58   :     double g = (G << 3) | (G >> 2);

	movzx	eax, BYTE PTR G$3[rsp]
	shl	eax, 3
	movzx	ecx, BYTE PTR G$3[rsp]
	sar	ecx, 2
	or	eax, ecx
	cvtsi2sd xmm0, eax
	movsdx	QWORD PTR g$6[rsp], xmm0

; 59   :     double b = (B << 3) | (B >> 2);

	movzx	eax, BYTE PTR B$4[rsp]
	shl	eax, 3
	movzx	ecx, BYTE PTR B$4[rsp]
	sar	ecx, 2
	or	eax, ecx
	cvtsi2sd xmm0, eax
	movsdx	QWORD PTR b$7[rsp], xmm0

; 60   : 
; 61   :     double y = (r + g + b) * (0.25 * (63.5f / 48.0));

	movsdx	xmm0, QWORD PTR r$5[rsp]
	addsd	xmm0, QWORD PTR g$6[rsp]
	addsd	xmm0, QWORD PTR b$7[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd52aaaaaaaaaab
	movsdx	QWORD PTR y$8[rsp], xmm0

; 62   :     double u = ((r - b) * 0.25 + 128.0) * (7.5f / 7.0);

	movsdx	xmm0, QWORD PTR r$5[rsp]
	subsd	xmm0, QWORD PTR b$7[rsp]
	mulsd	xmm0, QWORD PTR __real@3fd0000000000000
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ff1249249249249
	movsdx	QWORD PTR u$9[rsp], xmm0

; 63   :     double v = ((g * 2.0 - r - b) * 0.125 + 128.0) * (7.5 / 6.0);

	movsdx	xmm0, QWORD PTR g$6[rsp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	subsd	xmm0, QWORD PTR r$5[rsp]
	subsd	xmm0, QWORD PTR b$7[rsp]
	mulsd	xmm0, QWORD PTR __real@3fc0000000000000
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ff4000000000000
	movsdx	QWORD PTR v$10[rsp], xmm0

; 64   : 
; 65   :     yuvTable[i] = ((unsigned)y << 21) + ((unsigned)u << 11) + ((unsigned)v);

	cvttsd2si rax, QWORD PTR y$8[rsp]
	shl	eax, 21
	cvttsd2si rcx, QWORD PTR u$9[rsp]
	shl	ecx, 11
	add	eax, ecx
	cvttsd2si rcx, QWORD PTR v$10[rsp]
	add	eax, ecx
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR ?yuvTable@@3PEAIEA	; yuvTable
	mov	DWORD PTR [rdx+rcx*4], eax

; 66   :   }

	jmp	$LN5@initialize
$LN4@initialize:

; 67   : 
; 68   :   //counter-clockwise rotation table; one revolution:
; 69   :   //123    369  12346789
; 70   :   //4.6 -> 2.8  =
; 71   :   //789    147  36928147
; 72   :   for(unsigned n = 0; n < 256; n++) {

	mov	DWORD PTR n$11[rsp], 0
	jmp	SHORT $LN3@initialize
$LN2@initialize:
	mov	eax, DWORD PTR n$11[rsp]
	inc	eax
	mov	DWORD PTR n$11[rsp], eax
$LN3@initialize:
	cmp	DWORD PTR n$11[rsp], 256		; 00000100H
	jae	SHORT $LN1@initialize

; 73   :     rotate[n] = ((n >> 2) & 0x11) | ((n << 2) & 0x88)
; 74   :               | ((n & 0x01) << 5) | ((n & 0x08) << 3)
; 75   :               | ((n & 0x10) >> 3) | ((n & 0x80) >> 5);

	mov	eax, DWORD PTR n$11[rsp]
	shr	eax, 2
	and	eax, 17
	mov	ecx, DWORD PTR n$11[rsp]
	shl	ecx, 2
	and	ecx, 136				; 00000088H
	or	eax, ecx
	mov	ecx, DWORD PTR n$11[rsp]
	and	ecx, 1
	shl	ecx, 5
	or	eax, ecx
	mov	ecx, DWORD PTR n$11[rsp]
	and	ecx, 8
	shl	ecx, 3
	or	eax, ecx
	mov	ecx, DWORD PTR n$11[rsp]
	and	ecx, 16
	shr	ecx, 3
	or	eax, ecx
	mov	ecx, DWORD PTR n$11[rsp]
	and	ecx, 128				; 00000080H
	shr	ecx, 5
	or	eax, ecx
	mov	ecx, DWORD PTR n$11[rsp]
	lea	rdx, OFFSET FLAT:?rotate@@3PAEA		; rotate
	mov	BYTE PTR [rdx+rcx], al

; 76   :   }

	jmp	SHORT $LN2@initialize
$LN1@initialize:
$LN8@initialize:

; 77   : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?initialize@@YAXXZ ENDP					; initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
C$ = 16
?rgb30@@YAIG@Z PROC					; rgb30

; 38   : static uint32_t rgb30(uint16_t C) {

	mov	WORD PTR [rsp+8], cx
	push	rdi

; 39   :   return C;

	movzx	eax, WORD PTR C$[rsp]

; 40   :  /* return ((C & 0x7c00) << 15) + ((C & 0x7c00) << 10)
; 41   :        + ((C & 0x03e0) << 10) + ((C & 0x03e0) <<  5)
; 42   :        + ((C & 0x001f) <<  5) + ((C & 0x001f) <<  0);*/
; 43   : }

	pop	rdi
	ret	0
?rgb30@@YAIG@Z ENDP					; rgb30
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
C$ = 16
?rgb15@@YAII@Z PROC					; rgb15

; 34   : static uint32_t rgb15(uint32_t C) {

	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 35   :   return C;//((C >> 15) & 0x7c00) + ((C >> 10) & 0x03e0) + ((C >> 5) & 0x001f);

	mov	eax, DWORD PTR C$[rsp]

; 36   : }

	pop	rdi
	ret	0
?rgb15@@YAII@Z ENDP					; rgb15
_TEXT	ENDS
END

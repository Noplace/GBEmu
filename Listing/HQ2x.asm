; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\graphics\HQ2x.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?yuvTable@@3PAIA				; yuvTable
PUBLIC	?rotate@@3PAEA					; rotate
_BSS	SEGMENT
?yuvTable@@3PAIA DD 01H DUP (?)				; yuvTable
?rotate@@3PAEA DB 0100H DUP (?)				; rotate
_BSS	ENDS
CONST	SEGMENT
_hqTable DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	0fH
	DB	0cH
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	0cH
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	05H
	DB	03H
	DB	010H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	013H
	DB	0cH
	DB	0cH
	DB	05H
	DB	013H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	013H
	DB	01H
	DB	0cH
	DB	05H
	DB	013H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	012H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	013H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	0fH
	DB	0cH
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	011H
	DB	0dH
	DB	05H
	DB	03H
	DB	010H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0dH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	010H
	DB	0dH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	010H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	04H
	DB	04H
	DB	06H
	DB	02H
	DB	05H
	DB	03H
	DB	01H
	DB	0cH
	DB	05H
	DB	03H
	DB	01H
	DB	0eH
CONST	ENDS
PUBLIC	?hq2x_filter_size@@YAXII@Z			; hq2x_filter_size
PUBLIC	?hq2x_filter_render@@YAXPAIIPBIIII@Z		; hq2x_filter_render
PUBLIC	__real@3fc0000000000000
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fd52aaaaaaaaaab
PUBLIC	__real@3ff1249249249249
PUBLIC	__real@3ff4000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4060000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT ?initialized@?1??initialize@@YAXXZ@4_NA
_BSS	SEGMENT
?initialized@?1??initialize@@YAXXZ@4_NA DB 01H DUP (?)	; `initialize'::`2'::initialized
_BSS	ENDS
;	COMDAT __real@4060000000000000
CONST	SEGMENT
__real@4060000000000000 DQ 04060000000000000r	; 128
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff4000000000000
CONST	SEGMENT
__real@3ff4000000000000 DQ 03ff4000000000000r	; 1.25
CONST	ENDS
;	COMDAT __real@3ff1249249249249
CONST	SEGMENT
__real@3ff1249249249249 DQ 03ff1249249249249r	; 1.07143
CONST	ENDS
;	COMDAT __real@3fd52aaaaaaaaaab
CONST	SEGMENT
__real@3fd52aaaaaaaaaab DQ 03fd52aaaaaaaaaabr	; 0.330729
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fc0000000000000
CONST	SEGMENT
__real@3fc0000000000000 DQ 03fc0000000000000r	; 0.125
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv85 = -80						; size = 4
tv82 = -76						; size = 4
_pattern$1 = -69					; size = 1
_e$2 = -68						; size = 4
_I$3 = -64						; size = 4
_H$4 = -60						; size = 4
_G$5 = -56						; size = 4
_F$6 = -52						; size = 4
_E$7 = -48						; size = 4
_D$8 = -44						; size = 4
_C$9 = -40						; size = 4
_B$10 = -36						; size = 4
_A$11 = -32						; size = 4
_x$12 = -28						; size = 4
_nextline$13 = -24					; size = 4
_prevline$14 = -20					; size = 4
_out1$15 = -16						; size = 4
_out0$16 = -12						; size = 4
_in$17 = -8						; size = 4
_y$18 = -4						; size = 4
_output$ = 8						; size = 4
_outputPitch$ = 12					; size = 4
_input$ = 16						; size = 4
_inputPitch$ = 20					; size = 4
_width$ = 24						; size = 4
_height$ = 28						; size = 4
?hq2x_filter_render@@YAXPAIIPBIIII@Z PROC		; hq2x_filter_render

; 159  : ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 160  :   initialize();

	call	?initialize@@YAXXZ			; initialize

; 161  :   outputPitch >>= 2, inputPitch >>= 2;

	mov	eax, DWORD PTR _outputPitch$[ebp]
	shr	eax, 2
	mov	DWORD PTR _outputPitch$[ebp], eax
	mov	ecx, DWORD PTR _inputPitch$[ebp]
	shr	ecx, 2
	mov	DWORD PTR _inputPitch$[ebp], ecx

; 162  : 
; 163  :   for(unsigned y = 0; y < height; y++) {

	mov	DWORD PTR _y$18[ebp], 0
	jmp	SHORT $LN6@hq2x_filte
$LN5@hq2x_filte:
	mov	edx, DWORD PTR _y$18[ebp]
	add	edx, 1
	mov	DWORD PTR _y$18[ebp], edx
$LN6@hq2x_filte:
	mov	eax, DWORD PTR _y$18[ebp]
	cmp	eax, DWORD PTR _height$[ebp]
	jae	$LN7@hq2x_filte

; 164  :     const uint32_t *in = input + y * inputPitch;

	mov	ecx, DWORD PTR _y$18[ebp]
	imul	ecx, DWORD PTR _inputPitch$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _in$17[ebp], eax

; 165  :     uint32_t *out0 = output + y * outputPitch * 2;

	mov	ecx, DWORD PTR _y$18[ebp]
	imul	ecx, DWORD PTR _outputPitch$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _output$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _out0$16[ebp], eax

; 166  :     uint32_t *out1 = output + y * outputPitch * 2 + outputPitch;

	mov	ecx, DWORD PTR _y$18[ebp]
	imul	ecx, DWORD PTR _outputPitch$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _output$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _outputPitch$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _out1$15[ebp], edx

; 167  : 
; 168  :     int prevline = (y == 0 ? 0 : inputPitch);

	cmp	DWORD PTR _y$18[ebp], 0
	jne	SHORT $LN9@hq2x_filte
	mov	DWORD PTR tv82[ebp], 0
	jmp	SHORT $LN10@hq2x_filte
$LN9@hq2x_filte:
	mov	eax, DWORD PTR _inputPitch$[ebp]
	mov	DWORD PTR tv82[ebp], eax
$LN10@hq2x_filte:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _prevline$14[ebp], ecx

; 169  :     int nextline = (y == height - 1 ? 0 : inputPitch);

	mov	edx, DWORD PTR _height$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _y$18[ebp], edx
	jne	SHORT $LN11@hq2x_filte
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN12@hq2x_filte
$LN11@hq2x_filte:
	mov	eax, DWORD PTR _inputPitch$[ebp]
	mov	DWORD PTR tv85[ebp], eax
$LN12@hq2x_filte:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _nextline$13[ebp], ecx

; 170  : 
; 171  :     in++;

	mov	edx, DWORD PTR _in$17[ebp]
	add	edx, 4
	mov	DWORD PTR _in$17[ebp], edx

; 172  :     *out0++ = 0; *out0++ = 0;

	mov	eax, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _out0$16[ebp]
	add	ecx, 4
	mov	DWORD PTR _out0$16[ebp], ecx
	mov	edx, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _out0$16[ebp]
	add	eax, 4
	mov	DWORD PTR _out0$16[ebp], eax

; 173  :     *out1++ = 0; *out1++ = 0;

	mov	ecx, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _out1$15[ebp]
	add	edx, 4
	mov	DWORD PTR _out1$15[ebp], edx
	mov	eax, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _out1$15[ebp]
	add	ecx, 4
	mov	DWORD PTR _out1$15[ebp], ecx

; 174  : 
; 175  :     for(unsigned x = 1; x < width - 1; x++) {

	mov	DWORD PTR _x$12[ebp], 1
	jmp	SHORT $LN3@hq2x_filte
$LN2@hq2x_filte:
	mov	edx, DWORD PTR _x$12[ebp]
	add	edx, 1
	mov	DWORD PTR _x$12[ebp], edx
$LN3@hq2x_filte:
	mov	eax, DWORD PTR _width$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _x$12[ebp], eax
	jae	$LN1@hq2x_filte

; 176  :       uint32_t A = rgb15(*(in - prevline - 1));

	mov	ecx, DWORD PTR _prevline$14[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _in$17[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR [edx-4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _A$11[ebp], eax

; 177  :       uint32_t B = rgb15(*(in - prevline + 0));

	mov	ecx, DWORD PTR _prevline$14[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _in$17[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _B$10[ebp], eax

; 178  :       uint32_t C = rgb15(*(in - prevline + 1));

	mov	ecx, DWORD PTR _prevline$14[ebp]
	shl	ecx, 2
	mov	edx, DWORD PTR _in$17[ebp]
	sub	edx, ecx
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _C$9[ebp], eax

; 179  :       uint32_t D = rgb15(*(in - 1));

	mov	ecx, DWORD PTR _in$17[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _D$8[ebp], eax

; 180  :       uint32_t E = rgb15(*(in + 0));

	mov	eax, DWORD PTR _in$17[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _E$7[ebp], eax

; 181  :       uint32_t F = rgb15(*(in + 1));

	mov	edx, DWORD PTR _in$17[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _F$6[ebp], eax

; 182  :       uint32_t G = rgb15(*(in + nextline - 1));

	mov	ecx, DWORD PTR _nextline$13[ebp]
	mov	edx, DWORD PTR _in$17[ebp]
	mov	eax, DWORD PTR [edx+ecx*4-4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _G$5[ebp], eax

; 183  :       uint32_t H = rgb15(*(in + nextline + 0));

	mov	ecx, DWORD PTR _nextline$13[ebp]
	mov	edx, DWORD PTR _in$17[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _H$4[ebp], eax

; 184  :       uint32_t I = rgb15(*(in + nextline + 1));

	mov	ecx, DWORD PTR _nextline$13[ebp]
	mov	edx, DWORD PTR _in$17[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	?rgb15@@YAII@Z				; rgb15
	add	esp, 4
	mov	DWORD PTR _I$3[ebp], eax

; 185  :       uint32_t e = yuvTable[E] + diff_offset;

	mov	ecx, DWORD PTR _E$7[ebp]
	mov	edx, DWORD PTR ?yuvTable@@3PAIA		; yuvTable
	mov	eax, DWORD PTR [edx+ecx*4]
	sub	eax, 2012201977				; 77efc3f9H
	mov	DWORD PTR _e$2[ebp], eax

; 186  : 
; 187  :       uint8_t pattern;
; 188  :       pattern  = diff(e, A) << 0;

	mov	ecx, DWORD PTR _A$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$2[ebp]
	push	edx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	mov	BYTE PTR _pattern$1[ebp], al

; 189  :       pattern |= diff(e, B) << 1;

	mov	eax, DWORD PTR _B$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$2[ebp]
	push	ecx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	edx, al
	shl	edx, 1
	movzx	eax, BYTE PTR _pattern$1[ebp]
	or	eax, edx
	mov	BYTE PTR _pattern$1[ebp], al

; 190  :       pattern |= diff(e, C) << 2;

	mov	ecx, DWORD PTR _C$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$2[ebp]
	push	edx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	eax, al
	shl	eax, 2
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	or	ecx, eax
	mov	BYTE PTR _pattern$1[ebp], cl

; 191  :       pattern |= diff(e, D) << 3;

	mov	edx, DWORD PTR _D$8[ebp]
	push	edx
	mov	eax, DWORD PTR _e$2[ebp]
	push	eax
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	ecx, al
	shl	ecx, 3
	movzx	edx, BYTE PTR _pattern$1[ebp]
	or	edx, ecx
	mov	BYTE PTR _pattern$1[ebp], dl

; 192  :       pattern |= diff(e, F) << 4;

	mov	eax, DWORD PTR _F$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$2[ebp]
	push	ecx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	edx, al
	shl	edx, 4
	movzx	eax, BYTE PTR _pattern$1[ebp]
	or	eax, edx
	mov	BYTE PTR _pattern$1[ebp], al

; 193  :       pattern |= diff(e, G) << 5;

	mov	ecx, DWORD PTR _G$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _e$2[ebp]
	push	edx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	eax, al
	shl	eax, 5
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	or	ecx, eax
	mov	BYTE PTR _pattern$1[ebp], cl

; 194  :       pattern |= diff(e, H) << 6;

	mov	edx, DWORD PTR _H$4[ebp]
	push	edx
	mov	eax, DWORD PTR _e$2[ebp]
	push	eax
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	ecx, al
	shl	ecx, 6
	movzx	edx, BYTE PTR _pattern$1[ebp]
	or	edx, ecx
	mov	BYTE PTR _pattern$1[ebp], dl

; 195  :       pattern |= diff(e, I) << 7;

	mov	eax, DWORD PTR _I$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _e$2[ebp]
	push	ecx
	call	?diff@@YA_NII@Z				; diff
	add	esp, 8
	movzx	edx, al
	shl	edx, 7
	movzx	eax, BYTE PTR _pattern$1[ebp]
	or	eax, edx
	mov	BYTE PTR _pattern$1[ebp], al

; 196  : 
; 197  :       *(out0 + 0) = rgb30(blend(hqTable[pattern], E, A, B, D, F, H)); pattern = rotate[pattern];

	movzx	ecx, WORD PTR _H$4[ebp]
	push	ecx
	movzx	edx, WORD PTR _F$6[ebp]
	push	edx
	movzx	eax, WORD PTR _D$8[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$10[ebp]
	push	ecx
	movzx	edx, WORD PTR _A$11[ebp]
	push	edx
	movzx	eax, WORD PTR _E$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	movzx	edx, BYTE PTR _hqTable[ecx]
	push	edx
	call	?blend@@YAGIGGGGGG@Z			; blend
	add	esp, 28					; 0000001cH
	movzx	eax, ax
	push	eax
	call	?rgb30@@YAIG@Z				; rgb30
	add	esp, 4
	mov	ecx, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [ecx], eax
	movzx	edx, BYTE PTR _pattern$1[ebp]
	mov	al, BYTE PTR ?rotate@@3PAEA[edx]
	mov	BYTE PTR _pattern$1[ebp], al

; 198  :       *(out0 + 1) = rgb30(blend(hqTable[pattern], E, C, F, B, H, D)); pattern = rotate[pattern];

	movzx	ecx, WORD PTR _D$8[ebp]
	push	ecx
	movzx	edx, WORD PTR _H$4[ebp]
	push	edx
	movzx	eax, WORD PTR _B$10[ebp]
	push	eax
	movzx	ecx, WORD PTR _F$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _C$9[ebp]
	push	edx
	movzx	eax, WORD PTR _E$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	movzx	edx, BYTE PTR _hqTable[ecx]
	push	edx
	call	?blend@@YAGIGGGGGG@Z			; blend
	add	esp, 28					; 0000001cH
	movzx	eax, ax
	push	eax
	call	?rgb30@@YAIG@Z				; rgb30
	add	esp, 4
	mov	ecx, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [ecx+4], eax
	movzx	edx, BYTE PTR _pattern$1[ebp]
	mov	al, BYTE PTR ?rotate@@3PAEA[edx]
	mov	BYTE PTR _pattern$1[ebp], al

; 199  :       *(out1 + 1) = rgb30(blend(hqTable[pattern], E, I, H, F, D, B)); pattern = rotate[pattern];

	movzx	ecx, WORD PTR _B$10[ebp]
	push	ecx
	movzx	edx, WORD PTR _D$8[ebp]
	push	edx
	movzx	eax, WORD PTR _F$6[ebp]
	push	eax
	movzx	ecx, WORD PTR _H$4[ebp]
	push	ecx
	movzx	edx, WORD PTR _I$3[ebp]
	push	edx
	movzx	eax, WORD PTR _E$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	movzx	edx, BYTE PTR _hqTable[ecx]
	push	edx
	call	?blend@@YAGIGGGGGG@Z			; blend
	add	esp, 28					; 0000001cH
	movzx	eax, ax
	push	eax
	call	?rgb30@@YAIG@Z				; rgb30
	add	esp, 4
	mov	ecx, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [ecx+4], eax
	movzx	edx, BYTE PTR _pattern$1[ebp]
	mov	al, BYTE PTR ?rotate@@3PAEA[edx]
	mov	BYTE PTR _pattern$1[ebp], al

; 200  :       *(out1 + 0) = rgb30(blend(hqTable[pattern], E, G, D, H, B, F));

	movzx	ecx, WORD PTR _F$6[ebp]
	push	ecx
	movzx	edx, WORD PTR _B$10[ebp]
	push	edx
	movzx	eax, WORD PTR _H$4[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$8[ebp]
	push	ecx
	movzx	edx, WORD PTR _G$5[ebp]
	push	edx
	movzx	eax, WORD PTR _E$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR _pattern$1[ebp]
	movzx	edx, BYTE PTR _hqTable[ecx]
	push	edx
	call	?blend@@YAGIGGGGGG@Z			; blend
	add	esp, 28					; 0000001cH
	movzx	eax, ax
	push	eax
	call	?rgb30@@YAIG@Z				; rgb30
	add	esp, 4
	mov	ecx, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [ecx], eax

; 201  : 
; 202  :       in++;

	mov	edx, DWORD PTR _in$17[ebp]
	add	edx, 4
	mov	DWORD PTR _in$17[ebp], edx

; 203  :       out0 += 2;

	mov	eax, DWORD PTR _out0$16[ebp]
	add	eax, 8
	mov	DWORD PTR _out0$16[ebp], eax

; 204  :       out1 += 2;

	mov	ecx, DWORD PTR _out1$15[ebp]
	add	ecx, 8
	mov	DWORD PTR _out1$15[ebp], ecx

; 205  :     }

	jmp	$LN2@hq2x_filte
$LN1@hq2x_filte:

; 206  : 
; 207  :     in++;

	mov	edx, DWORD PTR _in$17[ebp]
	add	edx, 4
	mov	DWORD PTR _in$17[ebp], edx

; 208  :     *out0++ = 0; *out0++ = 0;

	mov	eax, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _out0$16[ebp]
	add	ecx, 4
	mov	DWORD PTR _out0$16[ebp], ecx
	mov	edx, DWORD PTR _out0$16[ebp]
	mov	DWORD PTR [edx], 0
	mov	eax, DWORD PTR _out0$16[ebp]
	add	eax, 4
	mov	DWORD PTR _out0$16[ebp], eax

; 209  :     *out1++ = 0; *out1++ = 0;

	mov	ecx, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _out1$15[ebp]
	add	edx, 4
	mov	DWORD PTR _out1$15[ebp], edx
	mov	eax, DWORD PTR _out1$15[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _out1$15[ebp]
	add	ecx, 4
	mov	DWORD PTR _out1$15[ebp], ecx

; 210  :   }

	jmp	$LN5@hq2x_filte
$LN7@hq2x_filte:

; 211  : }

	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?hq2x_filter_render@@YAXPAIIPBIIII@Z ENDP		; hq2x_filter_render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?hq2x_filter_size@@YAXII@Z PROC				; hq2x_filter_size

; 149  : void hq2x_filter_size(unsigned width, unsigned height) {

	push	ebp
	mov	ebp, esp

; 150  :   initialize();

	call	?initialize@@YAXXZ			; initialize

; 151  :   width  *= 2;

	mov	eax, DWORD PTR _width$[ebp]
	shl	eax, 1
	mov	DWORD PTR _width$[ebp], eax

; 152  :   height *= 2;

	mov	ecx, DWORD PTR _height$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _height$[ebp], ecx

; 153  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?hq2x_filter_size@@YAXII@Z ENDP				; hq2x_filter_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv304 = -20						; size = 2
tv285 = -18						; size = 2
tv266 = -16						; size = 2
tv247 = -14						; size = 2
tv228 = -12						; size = 2
tv209 = -10						; size = 2
tv195 = -8						; size = 2
tv181 = -6						; size = 2
tv64 = -4						; size = 4
_rule$ = 8						; size = 4
_E$ = 12						; size = 2
_A$ = 16						; size = 2
_B$ = 20						; size = 2
_D$ = 24						; size = 2
_F$ = 28						; size = 2
_H$ = 32						; size = 2
?blend@@YAGIGGGGGG@Z PROC				; blend

; 124  : static uint16_t blend(unsigned rule, uint16_t E, uint16_t A, uint16_t B, uint16_t D, uint16_t F, uint16_t H) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 125  :   switch(rule) { default:

	mov	eax, DWORD PTR _rule$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 18			; 00000012H
	ja	SHORT $LN20@blend
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN41@blend[edx*4]
$LN20@blend:

; 126  :     case  0: return E;

	mov	ax, WORD PTR _E$[ebp]
	jmp	$LN23@blend
$LN19@blend:

; 127  :     case  1: return blend1(E, A);

	movzx	eax, WORD PTR _A$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	jmp	$LN23@blend
$LN18@blend:

; 128  :     case  2: return blend1(E, D);

	movzx	edx, WORD PTR _D$[ebp]
	push	edx
	movzx	eax, WORD PTR _E$[ebp]
	push	eax
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	jmp	$LN23@blend
$LN17@blend:

; 129  :     case  3: return blend1(E, B);

	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	jmp	$LN23@blend
$LN16@blend:

; 130  :     case  4: return blend2(E, D, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend2@@YAGIII@Z			; blend2
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN15@blend:

; 131  :     case  5: return blend2(E, A, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _A$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend2@@YAGIII@Z			; blend2
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN14@blend:

; 132  :     case  6: return blend2(E, A, D);

	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _A$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend2@@YAGIII@Z			; blend2
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN13@blend:

; 133  :     case  7: return blend3(E, B, D);

	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend3@@YAGIII@Z			; blend3
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN12@blend:

; 134  :     case  8: return blend3(E, D, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend3@@YAGIII@Z			; blend3
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN11@blend:

; 135  :     case  9: return blend4(E, D, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend4@@YAGIII@Z			; blend4
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN10@blend:

; 136  :     case 10: return blend5(E, D, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend5@@YAGIII@Z			; blend5
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN9@blend:

; 137  :     case 11: return blend6(E, D, B);

	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend6@@YAGIII@Z			; blend6
	add	esp, 12					; 0000000cH
	jmp	$LN23@blend
$LN8@blend:

; 138  :     case 12: return same(B, D) ? blend2(E, D, B) : E;

	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN25@blend
	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend2@@YAGIII@Z			; blend2
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv181[ebp], ax
	jmp	SHORT $LN26@blend
$LN25@blend:
	mov	ax, WORD PTR _E$[ebp]
	mov	WORD PTR tv181[ebp], ax
$LN26@blend:
	mov	ax, WORD PTR tv181[ebp]
	jmp	$LN23@blend
$LN7@blend:

; 139  :     case 13: return same(B, D) ? blend5(E, D, B) : E;

	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@blend
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	movzx	edx, WORD PTR _D$[ebp]
	push	edx
	movzx	eax, WORD PTR _E$[ebp]
	push	eax
	call	?blend5@@YAGIII@Z			; blend5
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv195[ebp], ax
	jmp	SHORT $LN28@blend
$LN27@blend:
	mov	cx, WORD PTR _E$[ebp]
	mov	WORD PTR tv195[ebp], cx
$LN28@blend:
	mov	ax, WORD PTR tv195[ebp]
	jmp	$LN23@blend
$LN6@blend:

; 140  :     case 14: return same(B, D) ? blend6(E, D, B) : E;

	movzx	edx, WORD PTR _D$[ebp]
	push	edx
	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN29@blend
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend6@@YAGIII@Z			; blend6
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv209[ebp], ax
	jmp	SHORT $LN30@blend
$LN29@blend:
	mov	dx, WORD PTR _E$[ebp]
	mov	WORD PTR tv209[ebp], dx
$LN30@blend:
	mov	ax, WORD PTR tv209[ebp]
	jmp	$LN23@blend
$LN5@blend:

; 141  :     case 15: return same(B, D) ? blend2(E, D, B) : blend1(E, A);

	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN31@blend
	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend2@@YAGIII@Z			; blend2
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv228[ebp], ax
	jmp	SHORT $LN32@blend
$LN31@blend:
	movzx	eax, WORD PTR _A$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	mov	WORD PTR tv228[ebp], ax
$LN32@blend:
	mov	ax, WORD PTR tv228[ebp]
	jmp	$LN23@blend
$LN4@blend:

; 142  :     case 16: return same(B, D) ? blend4(E, D, B) : blend1(E, A);

	movzx	edx, WORD PTR _D$[ebp]
	push	edx
	movzx	eax, WORD PTR _B$[ebp]
	push	eax
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN33@blend
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend4@@YAGIII@Z			; blend4
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv247[ebp], ax
	jmp	SHORT $LN34@blend
$LN33@blend:
	movzx	edx, WORD PTR _A$[ebp]
	push	edx
	movzx	eax, WORD PTR _E$[ebp]
	push	eax
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	mov	WORD PTR tv247[ebp], ax
$LN34@blend:
	mov	ax, WORD PTR tv247[ebp]
	jmp	$LN23@blend
$LN3@blend:

; 143  :     case 17: return same(B, D) ? blend5(E, D, B) : blend1(E, A);

	movzx	ecx, WORD PTR _D$[ebp]
	push	ecx
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@blend
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	movzx	edx, WORD PTR _D$[ebp]
	push	edx
	movzx	eax, WORD PTR _E$[ebp]
	push	eax
	call	?blend5@@YAGIII@Z			; blend5
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv266[ebp], ax
	jmp	SHORT $LN36@blend
$LN35@blend:
	movzx	ecx, WORD PTR _A$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	mov	WORD PTR tv266[ebp], ax
$LN36@blend:
	mov	ax, WORD PTR tv266[ebp]
	jmp	$LN23@blend
$LN2@blend:

; 144  :     case 18: return same(B, F) ? blend3(E, B, D) : blend1(E, D);

	movzx	eax, WORD PTR _F$[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN37@blend
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _B$[ebp]
	push	ecx
	movzx	edx, WORD PTR _E$[ebp]
	push	edx
	call	?blend3@@YAGIII@Z			; blend3
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv285[ebp], ax
	jmp	SHORT $LN38@blend
$LN37@blend:
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	mov	WORD PTR tv285[ebp], ax
$LN38@blend:
	mov	ax, WORD PTR tv285[ebp]
	jmp	SHORT $LN23@blend
$LN1@blend:

; 145  :     case 19: return same(D, H) ? blend3(E, D, B) : blend1(E, B);

	movzx	edx, WORD PTR _H$[ebp]
	push	edx
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	call	?same@@YA_NGI@Z				; same
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN39@blend
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	movzx	eax, WORD PTR _D$[ebp]
	push	eax
	movzx	ecx, WORD PTR _E$[ebp]
	push	ecx
	call	?blend3@@YAGIII@Z			; blend3
	add	esp, 12					; 0000000cH
	mov	WORD PTR tv304[ebp], ax
	jmp	SHORT $LN40@blend
$LN39@blend:
	movzx	edx, WORD PTR _B$[ebp]
	push	edx
	movzx	eax, WORD PTR _E$[ebp]
	push	eax
	call	?blend1@@YAGII@Z			; blend1
	add	esp, 8
	mov	WORD PTR tv304[ebp], ax
$LN40@blend:
	mov	ax, WORD PTR tv304[ebp]
$LN23@blend:

; 146  :   }
; 147  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN41@blend:
	DD	$LN19@blend
	DD	$LN18@blend
	DD	$LN17@blend
	DD	$LN16@blend
	DD	$LN15@blend
	DD	$LN14@blend
	DD	$LN13@blend
	DD	$LN12@blend
	DD	$LN11@blend
	DD	$LN10@blend
	DD	$LN9@blend
	DD	$LN8@blend
	DD	$LN7@blend
	DD	$LN6@blend
	DD	$LN5@blend
	DD	$LN4@blend
	DD	$LN3@blend
	DD	$LN2@blend
	DD	$LN1@blend
?blend@@YAGIGGGGGG@Z ENDP				; blend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
?blend6@@YAGIII@Z PROC					; blend6

; 119  : static uint16_t blend6(uint32_t A, uint32_t B, uint32_t C) {

	push	ebp
	mov	ebp, esp

; 120  :   grow(A); grow(B); grow(C);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	edx, DWORD PTR _C$[ebp]
	push	edx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 121  :   return pack((A * 14 + B + C) >> 4);

	mov	eax, DWORD PTR _A$[ebp]
	imul	eax, 14					; 0000000eH
	add	eax, DWORD PTR _B$[ebp]
	add	eax, DWORD PTR _C$[ebp]
	shr	eax, 4
	push	eax
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 122  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend6@@YAGIII@Z ENDP					; blend6
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
?blend5@@YAGIII@Z PROC					; blend5

; 114  : static uint16_t blend5(uint32_t A, uint32_t B, uint32_t C) {

	push	ebp
	mov	ebp, esp

; 115  :   grow(A); grow(B); grow(C);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	edx, DWORD PTR _C$[ebp]
	push	edx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 116  :   return pack((A * 2 + (B + C) * 3) >> 3);

	mov	eax, DWORD PTR _B$[ebp]
	add	eax, DWORD PTR _C$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _A$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	shr	edx, 3
	push	edx
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 117  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend5@@YAGIII@Z ENDP					; blend5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
?blend4@@YAGIII@Z PROC					; blend4

; 109  : static uint16_t blend4(uint32_t A, uint32_t B, uint32_t C) {

	push	ebp
	mov	ebp, esp

; 110  :   grow(A); grow(B); grow(C);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	edx, DWORD PTR _C$[ebp]
	push	edx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 111  :   return pack((A * 6 + B + C) >> 3);

	mov	eax, DWORD PTR _A$[ebp]
	imul	eax, 6
	add	eax, DWORD PTR _B$[ebp]
	add	eax, DWORD PTR _C$[ebp]
	shr	eax, 3
	push	eax
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 112  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend4@@YAGIII@Z ENDP					; blend4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
?blend3@@YAGIII@Z PROC					; blend3

; 104  : static uint16_t blend3(uint32_t A, uint32_t B, uint32_t C) {

	push	ebp
	mov	ebp, esp

; 105  :   grow(A); grow(B); grow(C);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	edx, DWORD PTR _C$[ebp]
	push	edx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 106  :   return pack((A * 5 + B * 2 + C) >> 3);

	mov	eax, DWORD PTR _A$[ebp]
	imul	eax, 5
	add	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _B$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	shr	edx, 3
	push	edx
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 107  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend3@@YAGIII@Z ENDP					; blend3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
?blend2@@YAGIII@Z PROC					; blend2

; 99   : static uint16_t blend2(uint32_t A, uint32_t B, uint32_t C) {

	push	ebp
	mov	ebp, esp

; 100  :   grow(A); grow(B); grow(C);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	edx, DWORD PTR _C$[ebp]
	push	edx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 101  :   return pack((A * 2 + B + C) >> 2);

	mov	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _B$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	add	edx, DWORD PTR _C$[ebp]
	shr	edx, 2
	push	edx
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 102  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend2@@YAGIII@Z ENDP					; blend2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_A$ = 8							; size = 4
_B$ = 12						; size = 4
?blend1@@YAGII@Z PROC					; blend1

; 94   : static uint16_t blend1(uint32_t A, uint32_t B) {

	push	ebp
	mov	ebp, esp

; 95   :   grow(A); grow(B);

	lea	eax, DWORD PTR _A$[ebp]
	push	eax
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4
	lea	ecx, DWORD PTR _B$[ebp]
	push	ecx
	call	?grow@@YAXAAI@Z				; grow
	add	esp, 4

; 96   :   return pack((A * 3 + B) >> 2);

	mov	edx, DWORD PTR _A$[ebp]
	imul	edx, 3
	add	edx, DWORD PTR _B$[ebp]
	shr	edx, 2
	push	edx
	call	?pack@@YAGI@Z				; pack
	add	esp, 4

; 97   : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?blend1@@YAGII@Z ENDP					; blend1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_n$ = 8							; size = 4
?pack@@YAGI@Z PROC					; pack

; 92   : static uint16_t pack(uint32_t n) { n &= 0x03e07c1f; return n | (n >> 16); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _n$[ebp]
	and	eax, 65043487				; 03e07c1fH
	mov	DWORD PTR _n$[ebp], eax
	mov	eax, DWORD PTR _n$[ebp]
	shr	eax, 16					; 00000010H
	or	eax, DWORD PTR _n$[ebp]
	pop	ebp
	ret	0
?pack@@YAGI@Z ENDP					; pack
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_n$ = 8							; size = 4
?grow@@YAXAAI@Z PROC					; grow

; 91   : static void grow(uint32_t &n) { n |= n << 16; n &= 0x03e07c1f; }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _n$[ebp]
	or	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 65043487				; 03e07c1fH
	mov	eax, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax], edx
	pop	ebp
	ret	0
?grow@@YAXAAI@Z ENDP					; grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv69 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?diff@@YA_NII@Z PROC					; diff

; 87   : static bool diff(uint32_t x, uint32_t y) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 88   :   return ((x - yuvTable[y]) & diff_mask) != 0;

	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR ?yuvTable@@3PAIA		; yuvTable
	mov	edx, DWORD PTR _x$[ebp]
	sub	edx, DWORD PTR [ecx+eax*4]
	and	edx, 1880065008				; 700f83f0H
	je	SHORT $LN3@diff
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@diff
$LN3@diff:
	mov	DWORD PTR tv69[ebp], 0
$LN4@diff:
	mov	al, BYTE PTR tv69[ebp]

; 89   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?diff@@YA_NII@Z ENDP					; diff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv73 = -4						; size = 4
_x$ = 8							; size = 2
_y$ = 12						; size = 4
?same@@YA_NGI@Z PROC					; same

; 83   : static bool same(uint16_t x, uint32_t y) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 84   :   return !((yuvTable[x] - yuvTable[y] + diff_offset) & diff_mask);

	movzx	eax, WORD PTR _x$[ebp]
	mov	ecx, DWORD PTR ?yuvTable@@3PAIA		; yuvTable
	mov	edx, DWORD PTR _y$[ebp]
	mov	esi, DWORD PTR ?yuvTable@@3PAIA		; yuvTable
	mov	eax, DWORD PTR [ecx+eax*4]
	sub	eax, DWORD PTR [esi+edx*4]
	sub	eax, 2012201977				; 77efc3f9H
	and	eax, 1880065008				; 700f83f0H
	jne	SHORT $LN3@same
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN4@same
$LN3@same:
	mov	DWORD PTR tv73[ebp], 0
$LN4@same:
	mov	al, BYTE PTR tv73[ebp]

; 85   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?same@@YA_NGI@Z ENDP					; same
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
tv208 = -112						; size = 8
tv206 = -104						; size = 4
tv203 = -98						; size = 2
tv200 = -96						; size = 8
tv198 = -88						; size = 4
tv195 = -82						; size = 2
tv192 = -80						; size = 8
tv190 = -72						; size = 4
tv187 = -66						; size = 2
$T1 = -64						; size = 4
_n$2 = -60						; size = 4
_v$3 = -56						; size = 8
_u$4 = -48						; size = 8
_y$5 = -40						; size = 8
_b$6 = -32						; size = 8
_g$7 = -24						; size = 8
_r$8 = -16						; size = 8
_B$9 = -7						; size = 1
_G$10 = -6						; size = 1
_R$11 = -5						; size = 1
_i$12 = -4						; size = 4
?initialize@@YAXXZ PROC					; initialize

; 45   : static void initialize() {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 46   :   static bool initialized = false;
; 47   :   if(initialized == true) return;

	movzx	eax, BYTE PTR ?initialized@?1??initialize@@YAXXZ@4_NA
	cmp	eax, 1
	jne	SHORT $LN7@initialize
	jmp	$LN8@initialize
$LN7@initialize:

; 48   :   initialized = true;

	mov	BYTE PTR ?initialized@?1??initialize@@YAXXZ@4_NA, 1

; 49   : 
; 50   :   yuvTable = new uint32_t[32768];

	push	131072					; 00020000H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR ?yuvTable@@3PAIA, ecx		; yuvTable

; 51   : 
; 52   :   for(unsigned i = 0; i < 32768; i++) {

	mov	DWORD PTR _i$12[ebp], 0
	jmp	SHORT $LN6@initialize
$LN5@initialize:
	mov	edx, DWORD PTR _i$12[ebp]
	add	edx, 1
	mov	DWORD PTR _i$12[ebp], edx
$LN6@initialize:
	cmp	DWORD PTR _i$12[ebp], 32768		; 00008000H
	jae	$LN4@initialize

; 53   :     uint8_t R = (i >> 10) & 31;

	mov	eax, DWORD PTR _i$12[ebp]
	shr	eax, 10					; 0000000aH
	and	eax, 31					; 0000001fH
	mov	BYTE PTR _R$11[ebp], al

; 54   :     uint8_t G = (i >>  5) & 31;

	mov	ecx, DWORD PTR _i$12[ebp]
	shr	ecx, 5
	and	ecx, 31					; 0000001fH
	mov	BYTE PTR _G$10[ebp], cl

; 55   :     uint8_t B = (i >>  0) & 31;

	mov	edx, DWORD PTR _i$12[ebp]
	and	edx, 31					; 0000001fH
	mov	BYTE PTR _B$9[ebp], dl

; 56   : 
; 57   :     double r = (R << 3) | (R >> 2);

	movzx	eax, BYTE PTR _R$11[ebp]
	shl	eax, 3
	movzx	ecx, BYTE PTR _R$11[ebp]
	sar	ecx, 2
	or	eax, ecx
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR _r$8[ebp], xmm0

; 58   :     double g = (G << 3) | (G >> 2);

	movzx	edx, BYTE PTR _G$10[ebp]
	shl	edx, 3
	movzx	eax, BYTE PTR _G$10[ebp]
	sar	eax, 2
	or	edx, eax
	cvtsi2sd xmm0, edx
	movsd	QWORD PTR _g$7[ebp], xmm0

; 59   :     double b = (B << 3) | (B >> 2);

	movzx	ecx, BYTE PTR _B$9[ebp]
	shl	ecx, 3
	movzx	edx, BYTE PTR _B$9[ebp]
	sar	edx, 2
	or	ecx, edx
	cvtsi2sd xmm0, ecx
	movsd	QWORD PTR _b$6[ebp], xmm0

; 60   : 
; 61   :     double y = (r + g + b) * (0.25 * (63.5f / 48.0));

	movsd	xmm0, QWORD PTR _r$8[ebp]
	addsd	xmm0, QWORD PTR _g$7[ebp]
	addsd	xmm0, QWORD PTR _b$6[ebp]
	mulsd	xmm0, QWORD PTR __real@3fd52aaaaaaaaaab
	movsd	QWORD PTR _y$5[ebp], xmm0

; 62   :     double u = ((r - b) * 0.25 + 128.0) * (7.5f / 7.0);

	movsd	xmm0, QWORD PTR _r$8[ebp]
	subsd	xmm0, QWORD PTR _b$6[ebp]
	mulsd	xmm0, QWORD PTR __real@3fd0000000000000
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ff1249249249249
	movsd	QWORD PTR _u$4[ebp], xmm0

; 63   :     double v = ((g * 2.0 - r - b) * 0.125 + 128.0) * (7.5 / 6.0);

	movsd	xmm0, QWORD PTR _g$7[ebp]
	mulsd	xmm0, QWORD PTR __real@4000000000000000
	subsd	xmm0, QWORD PTR _r$8[ebp]
	subsd	xmm0, QWORD PTR _b$6[ebp]
	mulsd	xmm0, QWORD PTR __real@3fc0000000000000
	addsd	xmm0, QWORD PTR __real@4060000000000000
	mulsd	xmm0, QWORD PTR __real@3ff4000000000000
	movsd	QWORD PTR _v$3[ebp], xmm0

; 64   : 
; 65   :     yuvTable[i] = ((unsigned)y << 21) + ((unsigned)u << 11) + ((unsigned)v);

	fld	QWORD PTR _y$5[ebp]
	fnstcw	WORD PTR tv187[ebp]
	movzx	eax, WORD PTR tv187[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv190[ebp], eax
	fldcw	WORD PTR tv190[ebp]
	fistp	QWORD PTR tv192[ebp]
	fldcw	WORD PTR tv187[ebp]
	mov	ecx, DWORD PTR tv192[ebp]
	shl	ecx, 21					; 00000015H
	fld	QWORD PTR _u$4[ebp]
	fnstcw	WORD PTR tv195[ebp]
	movzx	eax, WORD PTR tv195[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv198[ebp], eax
	fldcw	WORD PTR tv198[ebp]
	fistp	QWORD PTR tv200[ebp]
	fldcw	WORD PTR tv195[ebp]
	mov	edx, DWORD PTR tv200[ebp]
	shl	edx, 11					; 0000000bH
	add	ecx, edx
	fld	QWORD PTR _v$3[ebp]
	fnstcw	WORD PTR tv203[ebp]
	movzx	eax, WORD PTR tv203[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv206[ebp], eax
	fldcw	WORD PTR tv206[ebp]
	fistp	QWORD PTR tv208[ebp]
	fldcw	WORD PTR tv203[ebp]
	add	ecx, DWORD PTR tv208[ebp]
	mov	eax, DWORD PTR _i$12[ebp]
	mov	edx, DWORD PTR ?yuvTable@@3PAIA		; yuvTable
	mov	DWORD PTR [edx+eax*4], ecx

; 66   :   }

	jmp	$LN5@initialize
$LN4@initialize:

; 67   : 
; 68   :   //counter-clockwise rotation table; one revolution:
; 69   :   //123    369  12346789
; 70   :   //4.6 -> 2.8  =
; 71   :   //789    147  36928147
; 72   :   for(unsigned n = 0; n < 256; n++) {

	mov	DWORD PTR _n$2[ebp], 0
	jmp	SHORT $LN3@initialize
$LN2@initialize:
	mov	eax, DWORD PTR _n$2[ebp]
	add	eax, 1
	mov	DWORD PTR _n$2[ebp], eax
$LN3@initialize:
	cmp	DWORD PTR _n$2[ebp], 256		; 00000100H
	jae	SHORT $LN1@initialize

; 73   :     rotate[n] = ((n >> 2) & 0x11) | ((n << 2) & 0x88)
; 74   :               | ((n & 0x01) << 5) | ((n & 0x08) << 3)
; 75   :               | ((n & 0x10) >> 3) | ((n & 0x80) >> 5);

	mov	ecx, DWORD PTR _n$2[ebp]
	shr	ecx, 2
	and	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _n$2[ebp]
	shl	edx, 2
	and	edx, 136				; 00000088H
	or	ecx, edx
	mov	eax, DWORD PTR _n$2[ebp]
	and	eax, 1
	shl	eax, 5
	or	ecx, eax
	mov	edx, DWORD PTR _n$2[ebp]
	and	edx, 8
	shl	edx, 3
	or	ecx, edx
	mov	eax, DWORD PTR _n$2[ebp]
	and	eax, 16					; 00000010H
	shr	eax, 3
	or	ecx, eax
	mov	edx, DWORD PTR _n$2[ebp]
	and	edx, 128				; 00000080H
	shr	edx, 5
	or	ecx, edx
	mov	eax, DWORD PTR _n$2[ebp]
	mov	BYTE PTR ?rotate@@3PAEA[eax], cl

; 76   :   }

	jmp	SHORT $LN2@initialize
$LN1@initialize:
$LN8@initialize:

; 77   : }

	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?initialize@@YAXXZ ENDP					; initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 2
?rgb30@@YAIG@Z PROC					; rgb30

; 38   : static uint32_t rgb30(uint16_t C) {

	push	ebp
	mov	ebp, esp

; 39   :   return C;

	movzx	eax, WORD PTR _C$[ebp]

; 40   :  /* return ((C & 0x7c00) << 15) + ((C & 0x7c00) << 10)
; 41   :        + ((C & 0x03e0) << 10) + ((C & 0x03e0) <<  5)
; 42   :        + ((C & 0x001f) <<  5) + ((C & 0x001f) <<  0);*/
; 43   : }

	pop	ebp
	ret	0
?rgb30@@YAIG@Z ENDP					; rgb30
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\hq2x.cpp
_TEXT	SEGMENT
_C$ = 8							; size = 4
?rgb15@@YAII@Z PROC					; rgb15

; 34   : static uint32_t rgb15(uint32_t C) {

	push	ebp
	mov	ebp, esp

; 35   :   return C;//((C >> 15) & 0x7c00) + ((C >> 10) & 0x03e0) + ((C >> 5) & 0x001f);

	mov	eax, DWORD PTR _C$[ebp]

; 36   : }

	pop	ebp
	ret	0
?rgb15@@YAII@Z ENDP					; rgb15
_TEXT	ENDS
END

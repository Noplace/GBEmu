; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	C:\Users\Khalid\Documents\GitHub\GBEmu\Solution\Code\emulation\gb\cpu.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	_ConcRT_ProviderGuid
PUBLIC	_ConcRTEventGuid
PUBLIC	_SchedulerEventGuid
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_ScheduleGroupEventGuid
PUBLIC	_ContextEventGuid
PUBLIC	_ChoreEventGuid
PUBLIC	_VirtualProcessorEventGuid
PUBLIC	_LockEventGuid
PUBLIC	_ResourceManagerEventGuid
PUBLIC	_PPLParallelInvokeEventGuid
PUBLIC	_PPLParallelForEventGuid
PUBLIC	_PPLParallelForeachEventGuid
PUBLIC	_AgentEventGuid
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT _AgentEventGuid
CONST	SEGMENT
_AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT _PPLParallelForeachEventGuid
CONST	SEGMENT
_PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT _PPLParallelForEventGuid
CONST	SEGMENT
_PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT _PPLParallelInvokeEventGuid
CONST	SEGMENT
_PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT _ResourceManagerEventGuid
CONST	SEGMENT
_ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT _LockEventGuid
CONST	SEGMENT
_LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT _VirtualProcessorEventGuid
CONST	SEGMENT
_VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT _ChoreEventGuid
CONST	SEGMENT
_ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT _ContextEventGuid
CONST	SEGMENT
_ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT _ScheduleGroupEventGuid
CONST	SEGMENT
_ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT _SchedulerEventGuid
CONST	SEGMENT
_SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT _ConcRTEventGuid
CONST	SEGMENT
_ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT _ConcRT_ProviderGuid
CONST	SEGMENT
_ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB DD 08H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB DD 00H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
CONST	SEGMENT
_reg_index DD	03H
	DD	02H
	DD	05H
	DD	04H
	DD	07H
	DD	06H
	DD	07H
	DD	01H
CONST	ENDS
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize
PUBLIC	?interrupt_enable@Memory@gb@emulation@@QAEAAEXZ	; emulation::gb::Memory::interrupt_enable
PUBLIC	?interrupt_flag@Memory@gb@emulation@@QAEAAEXZ	; emulation::gb::Memory::interrupt_flag
PUBLIC	??0Cpu@gb@emulation@@QAE@XZ			; emulation::gb::Cpu::Cpu
PUBLIC	??1Cpu@gb@emulation@@QAE@XZ			; emulation::gb::Cpu::~Cpu
PUBLIC	?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z	; emulation::gb::Cpu::Initialize
PUBLIC	?Deinitialize@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Deinitialize
PUBLIC	?Reset@Cpu@gb@emulation@@QAEXXZ			; emulation::gb::Cpu::Reset
PUBLIC	?Tick@Cpu@gb@emulation@@QAEXXZ			; emulation::gb::Cpu::Tick
PUBLIC	?Step@Cpu@gb@emulation@@QAEXN@Z			; emulation::gb::Cpu::Step
PUBLIC	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z	; emulation::gb::Cpu::updateCpuFlagC
PUBLIC	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z	; emulation::gb::Cpu::updateCpuFlagH
PUBLIC	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z	; emulation::gb::Cpu::updateCpuFlagZ
PUBLIC	?push@Cpu@gb@emulation@@AAEXE@Z			; emulation::gb::Cpu::push
PUBLIC	?pop@Cpu@gb@emulation@@AAEEXZ			; emulation::gb::Cpu::pop
PUBLIC	?pushPC@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::pushPC
PUBLIC	?NOP@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::NOP
PUBLIC	?ILLEGAL@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::ILLEGAL
PUBLIC	?RST@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RST
PUBLIC	?HALT@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::HALT
PUBLIC	?CPL@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::CPL
PUBLIC	?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PREFIX_CB
PUBLIC	?JP@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::JP
PUBLIC	?JP_HL@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::JP_HL
PUBLIC	?CALL@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::CALL
PUBLIC	?RET@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RET
PUBLIC	?RLCA@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RLCA
PUBLIC	?RRCA@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RRCA
PUBLIC	?RLA@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RLA
PUBLIC	?RRA@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::RRA
PUBLIC	?CP@Cpu@gb@emulation@@AAEXEE@Z			; emulation::gb::Cpu::CP
PUBLIC	?CP_d8@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::CP_d8
PUBLIC	?CP_HL@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::CP_HL
PUBLIC	?DI@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::DI
PUBLIC	?EI@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::EI
PUBLIC	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ	; emulation::gb::Emu::memory
PUBLIC	?lcd_driver@Emu@gb@emulation@@QAEPAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
PUBLIC	??$LD@$00$0A@$04@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,5>
PUBLIC	??$LD@$01$0A@$04@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,0,5>
PUBLIC	??$LD@$02$0A@$04@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,5>
PUBLIC	??$LD@$03$0A@$04@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,0,5>
PUBLIC	??$LD@$00$00$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,1>
PUBLIC	??$LD@$01$00$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,1>
PUBLIC	??$LD@$02$00$05@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,6>
PUBLIC	??$LD@$02$00$06@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,7>
PUBLIC	??$LD@$02$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,10>
PUBLIC	??$LD@$04$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,0,10>
PUBLIC	??$LD@$06$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,0,10>
PUBLIC	??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,11>
PUBLIC	??$LD@$00$00$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,2>
PUBLIC	??$LD@$00$01$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,2,2>
PUBLIC	??$LD@$00$02$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,8>
PUBLIC	??$LD@$00$02$08@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,9>
PUBLIC	??$LD@$01$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,0,10>
PUBLIC	??$LD@$03$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,0,10>
PUBLIC	??$LD@$05$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,0,10>
PUBLIC	??$LD@$00$0A@$09@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,10>
PUBLIC	??$LD@$02$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,0>
PUBLIC	??$LD@$02$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,2,0>
PUBLIC	??$LD@$02$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,5,0>
PUBLIC	??$LD@$02$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,4,0>
PUBLIC	??$LD@$02$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,7,0>
PUBLIC	??$LD@$02$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,6,0>
PUBLIC	??$LD@$02$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,2>
PUBLIC	??$LD@$02$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,0>
PUBLIC	??$LD@$01$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,3,0>
PUBLIC	??$LD@$01$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,2,0>
PUBLIC	??$LD@$01$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,5,0>
PUBLIC	??$LD@$01$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,4,0>
PUBLIC	??$LD@$01$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,7,0>
PUBLIC	??$LD@$01$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,6,0>
PUBLIC	??$LD@$01$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,3,2>
PUBLIC	??$LD@$01$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,0>
PUBLIC	??$LD@$04$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,3,0>
PUBLIC	??$LD@$04$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,2,0>
PUBLIC	??$LD@$04$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,5,0>
PUBLIC	??$LD@$04$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,4,0>
PUBLIC	??$LD@$04$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,7,0>
PUBLIC	??$LD@$04$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,6,0>
PUBLIC	??$LD@$04$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,3,2>
PUBLIC	??$LD@$04$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,1,0>
PUBLIC	??$LD@$03$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,3,0>
PUBLIC	??$LD@$03$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,2,0>
PUBLIC	??$LD@$03$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,5,0>
PUBLIC	??$LD@$03$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,4,0>
PUBLIC	??$LD@$03$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,7,0>
PUBLIC	??$LD@$03$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,6,0>
PUBLIC	??$LD@$03$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,3,2>
PUBLIC	??$LD@$03$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,1,0>
PUBLIC	??$LD@$06$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,3,0>
PUBLIC	??$LD@$06$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,2,0>
PUBLIC	??$LD@$06$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,5,0>
PUBLIC	??$LD@$06$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,4,0>
PUBLIC	??$LD@$06$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,7,0>
PUBLIC	??$LD@$06$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,6,0>
PUBLIC	??$LD@$06$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,3,2>
PUBLIC	??$LD@$06$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,1,0>
PUBLIC	??$LD@$05$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,3,0>
PUBLIC	??$LD@$05$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,2,0>
PUBLIC	??$LD@$05$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,5,0>
PUBLIC	??$LD@$05$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,4,0>
PUBLIC	??$LD@$05$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,7,0>
PUBLIC	??$LD@$05$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,6,0>
PUBLIC	??$LD@$05$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,3,2>
PUBLIC	??$LD@$05$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,1,0>
PUBLIC	??$LD@$02$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,1>
PUBLIC	??$LD@$02$01$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,2,1>
PUBLIC	??$LD@$02$04$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,5,1>
PUBLIC	??$LD@$02$03$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,4,1>
PUBLIC	??$LD@$02$06$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,7,1>
PUBLIC	??$LD@$02$05$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,6,1>
PUBLIC	??$LD@$02$00$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,1>
PUBLIC	??$LD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,0>
PUBLIC	??$LD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,2,0>
PUBLIC	??$LD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,5,0>
PUBLIC	??$LD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,4,0>
PUBLIC	??$LD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,7,0>
PUBLIC	??$LD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,6,0>
PUBLIC	??$LD@$00$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,2>
PUBLIC	??$LD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,0>
PUBLIC	??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<0,1,12>
PUBLIC	??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,13>
PUBLIC	??$LD@$01$00$02@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,3>
PUBLIC	??$LD@$00$01$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,2,4>
PUBLIC	??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<0,1,14>
PUBLIC	??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,15>
PUBLIC	??$ADD_16bit@$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD_16bit<3,1>
PUBLIC	??$ADD_16bit@$02$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD_16bit<3,2>
PUBLIC	??$ADD_16bit@$02$02@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD_16bit<3,3>
PUBLIC	??$ADD_16bit@$02$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD_16bit<3,4>
PUBLIC	??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,3,0>
PUBLIC	??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,2,0>
PUBLIC	??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,5,0>
PUBLIC	??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,4,0>
PUBLIC	??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,7,0>
PUBLIC	??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,6,0>
PUBLIC	??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,3,1>
PUBLIC	??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,1,0>
PUBLIC	??$ADC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,3,0>
PUBLIC	??$ADC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,2,0>
PUBLIC	??$ADC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,5,0>
PUBLIC	??$ADC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,4,0>
PUBLIC	??$ADC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,7,0>
PUBLIC	??$ADC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,6,0>
PUBLIC	??$ADC@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,3,1>
PUBLIC	??$ADC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,1,0>
PUBLIC	??$SUB@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,3,0>
PUBLIC	??$SUB@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,2,0>
PUBLIC	??$SUB@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,5,0>
PUBLIC	??$SUB@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,4,0>
PUBLIC	??$SUB@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,7,0>
PUBLIC	??$SUB@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,6,0>
PUBLIC	??$SUB@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,3,1>
PUBLIC	??$SUB@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,1,0>
PUBLIC	??$SBC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,3,0>
PUBLIC	??$SBC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,2,0>
PUBLIC	??$SBC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,5,0>
PUBLIC	??$SBC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,4,0>
PUBLIC	??$SBC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,7,0>
PUBLIC	??$SBC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,6,0>
PUBLIC	??$SBC@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,3,1>
PUBLIC	??$SBC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,1,0>
PUBLIC	??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,3,0>
PUBLIC	??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,2,0>
PUBLIC	??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,5,0>
PUBLIC	??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,4,0>
PUBLIC	??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,7,0>
PUBLIC	??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,6,0>
PUBLIC	??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,3,1>
PUBLIC	??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,1,0>
PUBLIC	??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,3,0>
PUBLIC	??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,2,0>
PUBLIC	??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,5,0>
PUBLIC	??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,4,0>
PUBLIC	??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,7,0>
PUBLIC	??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,6,0>
PUBLIC	??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,3,1>
PUBLIC	??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,1,0>
PUBLIC	??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,3,0>
PUBLIC	??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,2,0>
PUBLIC	??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,5,0>
PUBLIC	??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,4,0>
PUBLIC	??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,7,0>
PUBLIC	??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,6,0>
PUBLIC	??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,3,1>
PUBLIC	??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,1,0>
PUBLIC	??$CP_reg@$02@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<3>
PUBLIC	??$CP_reg@$01@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<2>
PUBLIC	??$CP_reg@$04@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<5>
PUBLIC	??$CP_reg@$03@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<4>
PUBLIC	??$CP_reg@$06@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<7>
PUBLIC	??$CP_reg@$05@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<6>
PUBLIC	??$CP_reg@$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CP_reg<1>
PUBLIC	??$ADD@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,0,2>
PUBLIC	??$SUB@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SUB<1,0,2>
PUBLIC	??$AND@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,0,2>
PUBLIC	??$OR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,0,2>
PUBLIC	??$ADC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADC<1,0,2>
PUBLIC	??$SBC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::SBC<1,0,2>
PUBLIC	??$XOR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,0,2>
PUBLIC	??$INC_16bit@$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_16bit<1>
PUBLIC	??$INC_16bit@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_16bit<2>
PUBLIC	??$INC_16bit@$02@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_16bit<3>
PUBLIC	??$INC_16bit@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_16bit<4>
PUBLIC	??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<3,0>
PUBLIC	??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<5,0>
PUBLIC	??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<7,0>
PUBLIC	??$INC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<3,1>
PUBLIC	??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<2,0>
PUBLIC	??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<4,0>
PUBLIC	??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<6,0>
PUBLIC	??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::INC_8bit<1,0>
PUBLIC	??$DEC_16bit@$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_16bit<1>
PUBLIC	??$DEC_16bit@$01@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_16bit<2>
PUBLIC	??$DEC_16bit@$02@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_16bit<3>
PUBLIC	??$DEC_16bit@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_16bit<4>
PUBLIC	??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<3,0>
PUBLIC	??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<5,0>
PUBLIC	??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<7,0>
PUBLIC	??$DEC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<3,1>
PUBLIC	??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<2,0>
PUBLIC	??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<4,0>
PUBLIC	??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<6,0>
PUBLIC	??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::DEC_8bit<1,0>
PUBLIC	??$JR@$06$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JR<7,1>
PUBLIC	??$JR@$03$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JR<4,1>
PUBLIC	??$JR@$06$0A@@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JR<7,0>
PUBLIC	??$JR@$03$0A@@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JR<4,0>
PUBLIC	??$JR@$0A@$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JR<0,1>
PUBLIC	??$JP_cc@$06$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::JP_cc<7,1>
PUBLIC	??$JP_cc@$03$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::JP_cc<4,1>
PUBLIC	??$JP_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::JP_cc<7,0>
PUBLIC	??$JP_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::JP_cc<4,0>
PUBLIC	??$CALL_cc@$06$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::CALL_cc<7,1>
PUBLIC	??$CALL_cc@$03$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::CALL_cc<4,1>
PUBLIC	??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::CALL_cc<7,0>
PUBLIC	??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::CALL_cc<4,0>
PUBLIC	??$RET_cc@$06$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::RET_cc<7,1>
PUBLIC	??$RET_cc@$03$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::RET_cc<4,1>
PUBLIC	??$RET_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::RET_cc<7,0>
PUBLIC	??$RET_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::RET_cc<4,0>
PUBLIC	??$POP@$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::POP<1>
PUBLIC	??$POP@$01@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::POP<2>
PUBLIC	??$POP@$02@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::POP<3>
PUBLIC	??$POP@$0A@@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::POP<0>
PUBLIC	??$PUSH@$00@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PUSH<1>
PUBLIC	??$PUSH@$01@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PUSH<2>
PUBLIC	??$PUSH@$02@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PUSH<3>
PUBLIC	??$PUSH@$0A@@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PUSH<0>
PUBLIC	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>
PUBLIC	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>
PUBLIC	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>
PUBLIC	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>
PUBLIC	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>
PUBLIC	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>
PUBLIC	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>
PUBLIC	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>
PUBLIC	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>
EXTRN	_memset:PROC
EXTRN	__imp__DebugBreak@0:PROC
EXTRN	?Read8@Memory@gb@emulation@@QAEEG@Z:PROC	; emulation::gb::Memory::Read8
EXTRN	?Write8@Memory@gb@emulation@@QAEXGE@Z:PROC	; emulation::gb::Memory::Write8
EXTRN	?Step@LCDDriver@gb@emulation@@QAEXN@Z:PROC	; emulation::gb::LCDDriver::Step
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,0,2>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	xor	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,1,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,3,1>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	xor	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,6,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,7,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,4,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,5,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,2,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z
_TEXT	SEGMENT
tv136 = -6						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,3,0>, COMDAT
; _this$ = ecx

; 112  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 113  : 	  if (mode == 0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 114  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 115  :       b = reg.raw8[src];

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+edx+1044]
	mov	BYTE PTR [eax], dl
	jmp	$LN6@arithmetic
$LN5@arithmetic:

; 116  :     } else if (mode == 1) {

	xor	eax, eax
	je	SHORT $LN3@arithmetic

; 117  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 118  :       b = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 119  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN6@arithmetic
$LN3@arithmetic:

; 120  :     } else if (mode == 2) {

	xor	eax, eax
	je	SHORT $LN6@arithmetic

; 121  :       a = reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+ecx+1044]
	mov	BYTE PTR [edx], cl

; 122  :       b = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv136[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, DWORD PTR _b$[ebp]
	mov	BYTE PTR [ecx], al

; 123  : 		  cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN6@arithmetic:

; 124  :     }
; 125  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 1
??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z PROC ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()
; _this$ = ecx

; 531  :   auto setr = [=](uint8_t r) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 532  :     if ((code&0x7) != 6) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 7
	cmp	ecx, 6
	je	SHORT $LN2@operator

; 533  :       reg.raw8[reg_index[code&0x7]] = r;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 7
	mov	ecx, DWORD PTR _reg_index[edx*4]
	mov	dl, BYTE PTR _r$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 534  :     
; 535  :     } else {

	jmp	SHORT $LN3@operator
$LN2@operator:

; 536  :       mem_->Write8(reg.HL,r);

	movzx	eax, BYTE PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	movzx	eax, WORD PTR [edx+1050]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN3@operator:

; 537  :      
; 538  :     }
; 539  :   };

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ENDP ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Code$ = 8						; size = 4
__This$ = 12						; size = 4
??0<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QAE@ABEPAVCpu@gb@emulation@@@Z PROC ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::<lambda_08bfd30db2c73e418a55b8072ee85de7>
; _this$ = ecx

; 539  :   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Code$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __This$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QAE@ABEPAVCpu@gb@emulation@@@Z ENDP ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::<lambda_08bfd30db2c73e418a55b8072ee85de7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ PROC ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
; _this$ = ecx

; 523  :   auto getr = [=]() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 524  :     if ((code&0x7) != 6) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 7
	cmp	ecx, 6
	je	SHORT $LN2@operator

; 525  :       return reg.raw8[reg_index[code&0x7]];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 7
	mov	ecx, DWORD PTR _reg_index[edx*4]
	mov	al, BYTE PTR [eax+ecx+1044]
	jmp	SHORT $LN3@operator

; 526  :     } else {

	jmp	SHORT $LN3@operator
$LN2@operator:

; 527  :       return mem_->Read8(reg.HL);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
$LN3@operator:

; 528  :     }
; 529  :   };

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ENDP ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Code$ = 8						; size = 4
__This$ = 12						; size = 4
??0<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QAE@ABEPAVCpu@gb@emulation@@@Z PROC ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>
; _this$ = ecx

; 529  :   };

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Code$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __This$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QAE@ABEPAVCpu@gb@emulation@@@Z ENDP ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$PUSH@$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PUSH<0>, COMDAT
; _this$ = ecx

; 727  : void Cpu::PUSH() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 728  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	sar	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 729  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	and	edx, 255				; 000000ffH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 730  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 731  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$PUSH@$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PUSH<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$PUSH@$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PUSH<3>, COMDAT
; _this$ = ecx

; 727  : void Cpu::PUSH() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 728  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	sar	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 729  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	and	edx, 255				; 000000ffH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 730  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 731  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$PUSH@$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PUSH<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$PUSH@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PUSH<2>, COMDAT
; _this$ = ecx

; 727  : void Cpu::PUSH() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 728  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	sar	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 729  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	and	edx, 255				; 000000ffH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 730  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 731  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$PUSH@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PUSH<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$PUSH@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PUSH<1>, COMDAT
; _this$ = ecx

; 727  : void Cpu::PUSH() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 728  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	sar	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 729  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	and	edx, 255				; 000000ffH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 730  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 731  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$PUSH@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PUSH<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$POP@$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::POP<0>, COMDAT
; _this$ = ecx

; 734  : void Cpu::POP() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 735  :   reg.raw16[dest] = pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	ax, al
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax

; 736  :   reg.raw16[dest] |= pop() << 8;

	mov	esi, 2
	imul	esi, 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+esi+1044]
	or	edx, eax
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 737  : 
; 738  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$POP@$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::POP<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$POP@$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::POP<3>, COMDAT
; _this$ = ecx

; 734  : void Cpu::POP() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 735  :   reg.raw16[dest] = pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	ax, al
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax

; 736  :   reg.raw16[dest] |= pop() << 8;

	mov	esi, 2
	imul	esi, 3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+esi+1044]
	or	edx, eax
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 737  : 
; 738  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$POP@$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::POP<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$POP@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::POP<2>, COMDAT
; _this$ = ecx

; 734  : void Cpu::POP() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 735  :   reg.raw16[dest] = pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	ax, al
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax

; 736  :   reg.raw16[dest] |= pop() << 8;

	mov	esi, 2
	shl	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+esi+1044]
	or	edx, eax
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 737  : 
; 738  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$POP@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::POP<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$POP@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::POP<1>, COMDAT
; _this$ = ecx

; 734  : void Cpu::POP() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 735  :   reg.raw16[dest] = pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	ax, al
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax

; 736  :   reg.raw16[dest] |= pop() << 8;

	mov	esi, 2
	shl	esi, 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+esi+1044]
	or	edx, eax
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 737  : 
; 738  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$POP@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::POP<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::RET_cc<4,0>, COMDAT
; _this$ = ecx

; 713  : void Cpu::RET_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 714  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 715  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 716  : 
; 717  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN1@RET_cc

; 718  :     RET();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RET@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::RET
$LN1@RET_cc:

; 719  :   } else {
; 720  :    
; 721  :   }
; 722  :    Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 723  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RET_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@RET_cc:
	DD	1
	DD	$LN6@RET_cc
$LN6@RET_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@RET_cc
$LN5@RET_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::RET_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::RET_cc<7,0>, COMDAT
; _this$ = ecx

; 713  : void Cpu::RET_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 714  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 715  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 716  : 
; 717  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN1@RET_cc

; 718  :     RET();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RET@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::RET
$LN1@RET_cc:

; 719  :   } else {
; 720  :    
; 721  :   }
; 722  :    Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 723  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RET_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@RET_cc:
	DD	1
	DD	$LN6@RET_cc
$LN6@RET_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@RET_cc
$LN5@RET_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::RET_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$03$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$RET_cc@$03$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::RET_cc<4,1>, COMDAT
; _this$ = ecx

; 713  : void Cpu::RET_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 714  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 715  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 716  : 
; 717  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN1@RET_cc

; 718  :     RET();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RET@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::RET
$LN1@RET_cc:

; 719  :   } else {
; 720  :    
; 721  :   }
; 722  :    Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 723  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RET_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@RET_cc:
	DD	1
	DD	$LN6@RET_cc
$LN6@RET_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@RET_cc
$LN5@RET_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$RET_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::RET_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$06$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$RET_cc@$06$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::RET_cc<7,1>, COMDAT
; _this$ = ecx

; 713  : void Cpu::RET_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 714  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 715  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 716  : 
; 717  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN1@RET_cc

; 718  :     RET();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RET@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::RET
$LN1@RET_cc:

; 719  :   } else {
; 720  :    
; 721  :   }
; 722  :    Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 723  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@RET_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@RET_cc:
	DD	1
	DD	$LN6@RET_cc
$LN6@RET_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@RET_cc
$LN5@RET_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$RET_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::RET_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::CALL_cc<4,0>, COMDAT
; _this$ = ecx

; 693  : void Cpu::CALL_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 694  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 695  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 696  : 
; 697  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@CALL_cc

; 698  :     CALL();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CALL@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CALL

; 699  :   } else {

	jmp	$LN3@CALL_cc
$LN2@CALL_cc:

; 700  :     uint16_t nn;
; 701  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 702  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@CALL_cc:

; 703  :   }
; 704  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CALL_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@CALL_cc:
	DD	1
	DD	$LN6@CALL_cc
$LN6@CALL_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@CALL_cc
$LN5@CALL_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::CALL_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::CALL_cc<7,0>, COMDAT
; _this$ = ecx

; 693  : void Cpu::CALL_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 694  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 695  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 696  : 
; 697  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@CALL_cc

; 698  :     CALL();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CALL@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CALL

; 699  :   } else {

	jmp	$LN3@CALL_cc
$LN2@CALL_cc:

; 700  :     uint16_t nn;
; 701  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 702  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@CALL_cc:

; 703  :   }
; 704  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CALL_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@CALL_cc:
	DD	1
	DD	$LN6@CALL_cc
$LN6@CALL_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@CALL_cc
$LN5@CALL_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::CALL_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$03$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$CALL_cc@$03$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CALL_cc<4,1>, COMDAT
; _this$ = ecx

; 693  : void Cpu::CALL_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 694  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 695  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 696  : 
; 697  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@CALL_cc

; 698  :     CALL();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CALL@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CALL

; 699  :   } else {

	jmp	$LN3@CALL_cc
$LN2@CALL_cc:

; 700  :     uint16_t nn;
; 701  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 702  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@CALL_cc:

; 703  :   }
; 704  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CALL_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@CALL_cc:
	DD	1
	DD	$LN6@CALL_cc
$LN6@CALL_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@CALL_cc
$LN5@CALL_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$CALL_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CALL_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$06$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$CALL_cc@$06$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CALL_cc<7,1>, COMDAT
; _this$ = ecx

; 693  : void Cpu::CALL_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 694  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 695  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 696  : 
; 697  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@CALL_cc

; 698  :     CALL();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CALL@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::CALL

; 699  :   } else {

	jmp	$LN3@CALL_cc
$LN2@CALL_cc:

; 700  :     uint16_t nn;
; 701  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 702  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@CALL_cc:

; 703  :   }
; 704  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CALL_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@CALL_cc:
	DD	1
	DD	$LN6@CALL_cc
$LN6@CALL_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@CALL_cc
$LN5@CALL_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$CALL_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CALL_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JP_cc<4,0>, COMDAT
; _this$ = ecx

; 659  : void Cpu::JP_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 660  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 661  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 662  : 
; 663  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@JP_cc

; 664  :     JP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JP@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JP

; 665  :   } else {

	jmp	$LN3@JP_cc
$LN2@JP_cc:

; 666  :     uint16_t nn;
; 667  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 668  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@JP_cc:

; 669  :   }
; 670  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JP_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@JP_cc:
	DD	1
	DD	$LN6@JP_cc
$LN6@JP_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@JP_cc
$LN5@JP_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JP_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JP_cc<7,0>, COMDAT
; _this$ = ecx

; 659  : void Cpu::JP_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 660  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 661  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 662  : 
; 663  :   if (table[inv]&1) {

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@JP_cc

; 664  :     JP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JP@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JP

; 665  :   } else {

	jmp	$LN3@JP_cc
$LN2@JP_cc:

; 666  :     uint16_t nn;
; 667  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 668  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@JP_cc:

; 669  :   }
; 670  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JP_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@JP_cc:
	DD	1
	DD	$LN6@JP_cc
$LN6@JP_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@JP_cc
$LN5@JP_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JP_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$03$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$JP_cc@$03$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JP_cc<4,1>, COMDAT
; _this$ = ecx

; 659  : void Cpu::JP_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 660  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	mov	DWORD PTR _table$[ebp], ecx

; 661  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 16					; 00000010H
	sar	eax, 4
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 662  : 
; 663  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@JP_cc

; 664  :     JP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JP@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JP

; 665  :   } else {

	jmp	$LN3@JP_cc
$LN2@JP_cc:

; 666  :     uint16_t nn;
; 667  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 668  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@JP_cc:

; 669  :   }
; 670  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JP_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@JP_cc:
	DD	1
	DD	$LN6@JP_cc
$LN6@JP_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@JP_cc
$LN5@JP_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JP_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JP_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$06$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv137 = -28						; size = 2
tv92 = -26						; size = 2
_nn$1 = -24						; size = 2
_table$ = -16						; size = 8
_this$ = -4						; size = 4
??$JP_cc@$06$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JP_cc<7,1>, COMDAT
; _this$ = ecx

; 659  : void Cpu::JP_cc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 660  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	mov	DWORD PTR _table$[ebp], ecx

; 661  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1044]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR _table$[ebp+4], eax

; 662  : 
; 663  :   if (table[inv]&1) {

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _table$[ebp+ecx]
	and	edx, 1
	je	SHORT $LN2@JP_cc

; 664  :     JP();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?JP@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::JP

; 665  :   } else {

	jmp	$LN3@JP_cc
$LN2@JP_cc:

; 666  :     uint16_t nn;
; 667  :     nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv92[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$1[ebp], cx

; 668  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv137[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv137[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$1[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$1[ebp], cx
$LN3@JP_cc:

; 669  :   }
; 670  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JP_cc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@JP_cc:
	DD	1
	DD	$LN6@JP_cc
$LN6@JP_cc:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN5@JP_cc
$LN5@JP_cc:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JP_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JP_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR@$0A@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv74 = -26						; size = 2
_table$ = -20						; size = 8
_disp8$ = -5						; size = 1
_this$ = -4						; size = 4
??$JR@$0A@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JR<0,1>, COMDAT
; _this$ = ecx

; 591  : void Cpu::JR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  :   int8_t disp8 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _disp8$[ebp], al

; 593  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1044]
	and	edx, 1
	mov	DWORD PTR _table$[ebp], edx

; 594  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 1
	not	ecx
	mov	DWORD PTR _table$[ebp+4], ecx

; 595  : 
; 596  :   if (table[inv]&1) {

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _table$[ebp+edx]
	and	eax, 1
	je	SHORT $LN3@JR

; 597  :     reg.PC += disp8;

	movsx	ecx, BYTE PTR _disp8$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 598  :     Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
$LN3@JR:

; 599  :   } else {
; 600  :    
; 601  :   }
; 602  : 
; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@JR:
	DD	1
	DD	$LN6@JR
$LN6@JR:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@JR
$LN5@JR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JR@$0A@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JR<0,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv74 = -26						; size = 2
_table$ = -20						; size = 8
_disp8$ = -5						; size = 1
_this$ = -4						; size = 4
??$JR@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JR<4,0>, COMDAT
; _this$ = ecx

; 591  : void Cpu::JR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  :   int8_t disp8 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _disp8$[ebp], al

; 593  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1044]
	and	edx, 16					; 00000010H
	sar	edx, 4
	mov	DWORD PTR _table$[ebp], edx

; 594  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	not	ecx
	mov	DWORD PTR _table$[ebp+4], ecx

; 595  : 
; 596  :   if (table[inv]&1) {

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _table$[ebp+edx]
	and	eax, 1
	je	SHORT $LN3@JR

; 597  :     reg.PC += disp8;

	movsx	ecx, BYTE PTR _disp8$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 598  :     Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
$LN3@JR:

; 599  :   } else {
; 600  :    
; 601  :   }
; 602  : 
; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@JR:
	DD	1
	DD	$LN6@JR
$LN6@JR:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@JR
$LN5@JR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JR@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JR<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv74 = -26						; size = 2
_table$ = -20						; size = 8
_disp8$ = -5						; size = 1
_this$ = -4						; size = 4
??$JR@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JR<7,0>, COMDAT
; _this$ = ecx

; 591  : void Cpu::JR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  :   int8_t disp8 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _disp8$[ebp], al

; 593  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1044]
	and	edx, 128				; 00000080H
	sar	edx, 7
	mov	DWORD PTR _table$[ebp], edx

; 594  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	not	ecx
	mov	DWORD PTR _table$[ebp+4], ecx

; 595  : 
; 596  :   if (table[inv]&1) {

	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _table$[ebp+edx]
	and	eax, 1
	je	SHORT $LN3@JR

; 597  :     reg.PC += disp8;

	movsx	ecx, BYTE PTR _disp8$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 598  :     Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
$LN3@JR:

; 599  :   } else {
; 600  :    
; 601  :   }
; 602  : 
; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@JR:
	DD	1
	DD	$LN6@JR
$LN6@JR:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@JR
$LN5@JR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JR@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JR<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR@$03$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv74 = -26						; size = 2
_table$ = -20						; size = 8
_disp8$ = -5						; size = 1
_this$ = -4						; size = 4
??$JR@$03$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JR<4,1>, COMDAT
; _this$ = ecx

; 591  : void Cpu::JR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  :   int8_t disp8 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _disp8$[ebp], al

; 593  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1044]
	and	edx, 16					; 00000010H
	sar	edx, 4
	mov	DWORD PTR _table$[ebp], edx

; 594  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 16					; 00000010H
	sar	ecx, 4
	not	ecx
	mov	DWORD PTR _table$[ebp+4], ecx

; 595  : 
; 596  :   if (table[inv]&1) {

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _table$[ebp+edx]
	and	eax, 1
	je	SHORT $LN3@JR

; 597  :     reg.PC += disp8;

	movsx	ecx, BYTE PTR _disp8$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 598  :     Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
$LN3@JR:

; 599  :   } else {
; 600  :    
; 601  :   }
; 602  : 
; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@JR:
	DD	1
	DD	$LN6@JR
$LN6@JR:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@JR
$LN5@JR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JR@$03$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JR<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR@$06$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv74 = -26						; size = 2
_table$ = -20						; size = 8
_disp8$ = -5						; size = 1
_this$ = -4						; size = 4
??$JR@$06$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::JR<7,1>, COMDAT
; _this$ = ecx

; 591  : void Cpu::JR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  :   int8_t disp8 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _disp8$[ebp], al

; 593  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1044]
	and	edx, 128				; 00000080H
	sar	edx, 7
	mov	DWORD PTR _table$[ebp], edx

; 594  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1044]
	and	ecx, 128				; 00000080H
	sar	ecx, 7
	not	ecx
	mov	DWORD PTR _table$[ebp+4], ecx

; 595  : 
; 596  :   if (table[inv]&1) {

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _table$[ebp+edx]
	and	eax, 1
	je	SHORT $LN3@JR

; 597  :     reg.PC += disp8;

	movsx	ecx, BYTE PTR _disp8$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	add	eax, ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 598  :     Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
$LN3@JR:

; 599  :   } else {
; 600  :    
; 601  :   }
; 602  : 
; 603  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@JR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@JR:
	DD	1
	DD	$LN6@JR
$LN6@JR:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN5@JR
$LN5@JR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
??$JR@$06$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::JR<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<1,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<6,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<4,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<2,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<3,1>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	xor	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<7,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<5,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::DEC_8bit<3,0>, COMDAT
; _this$ = ecx

; 628  : void Cpu::DEC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 629  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 630  : 
; 631  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@DEC_8bit

; 632  :     updateCpuFlagH(reg.raw8[dest],1,1);

	push	1
	push	1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 633  :     --reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	sub	al, 1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 634  :   } else {

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 635  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 636  :     updateCpuFlagH(data,1,1);

	push	1
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 637  :     --data;

	mov	cl, BYTE PTR _data$1[ebp]
	sub	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 638  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@DEC_8bit:

; 639  :   }
; 640  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 641  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$DEC_16bit@$03@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::DEC_16bit<4>, COMDAT
; _this$ = ecx

; 644  : void Cpu::DEC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  :   --reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 646  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 647  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_16bit@$03@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$DEC_16bit@$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::DEC_16bit<3>, COMDAT
; _this$ = ecx

; 644  : void Cpu::DEC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  :   --reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 646  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 647  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_16bit@$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$DEC_16bit@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::DEC_16bit<2>, COMDAT
; _this$ = ecx

; 644  : void Cpu::DEC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  :   --reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 646  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 647  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_16bit@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$DEC_16bit@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::DEC_16bit<1>, COMDAT
; _this$ = ecx

; 644  : void Cpu::DEC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 645  :   --reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 646  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 647  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$DEC_16bit@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<1,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<6,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<4,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<2,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<3,1>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	xor	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<7,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<5,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_data$1 = -5						; size = 1
_this$ = -4						; size = 4
??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::INC_8bit<3,0>, COMDAT
; _this$ = ecx

; 606  : void Cpu::INC_8bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 607  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 608  : 
; 609  :   if (mode==0) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 610  :     updateCpuFlagH(reg.raw8[dest],1,0);

	push	0
	push	1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 611  :     ++reg.raw8[dest];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+ecx+1044]
	add	al, 1
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 612  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 613  :     uint8_t data = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _data$1[ebp], al

; 614  :     updateCpuFlagH(data,1,0);

	push	0
	push	1
	movzx	eax, BYTE PTR _data$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 615  :     ++data;

	mov	cl, BYTE PTR _data$1[ebp]
	add	cl, 1
	mov	BYTE PTR _data$1[ebp], cl

; 616  :     mem_->Write8(reg.HL,data);

	movzx	edx, BYTE PTR _data$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN1@INC_8bit:

; 617  :   }
; 618  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 619  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::INC_8bit<3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$INC_16bit@$03@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::INC_16bit<4>, COMDAT
; _this$ = ecx

; 622  : void Cpu::INC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 623  :   ++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 624  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_16bit@$03@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::INC_16bit<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$INC_16bit@$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::INC_16bit<3>, COMDAT
; _this$ = ecx

; 622  : void Cpu::INC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 623  :   ++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 624  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_16bit@$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::INC_16bit<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$INC_16bit@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::INC_16bit<2>, COMDAT
; _this$ = ecx

; 622  : void Cpu::INC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 623  :   ++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 624  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_16bit@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::INC_16bit<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$INC_16bit@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::INC_16bit<1>, COMDAT
; _this$ = ecx

; 622  : void Cpu::INC_16bit() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 623  :   ++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 624  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 625  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$INC_16bit@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::INC_16bit<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,0,2>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,0,2>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,0,2>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,0,2>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,0,2>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,0,2>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,0,2>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<1>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$05@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$05@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<6>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$05@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$06@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$06@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<7>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$06@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$03@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<4>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$03@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$04@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$04@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<5>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$04@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<2>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$CP_reg@$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::CP_reg<3>, COMDAT
; _this$ = ecx

; 778  : void Cpu::CP_reg() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 779  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 780  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$CP_reg@$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::CP_reg<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,1,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,3,1>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,6,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,7,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,4,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,5,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,2,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,3,0>, COMDAT
; _this$ = ecx

; 495  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 496  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 497  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 498  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 499  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 500  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 501  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@OR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@OR:
	DD	2
	DD	$LN5@OR
$LN5@OR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@OR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@OR
$LN4@OR:
	DB	98					; 00000062H
	DB	0
$LN3@OR:
	DB	97					; 00000061H
	DB	0
??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,1,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,3,1>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,6,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,7,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,4,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,5,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,2,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,3,0>, COMDAT
; _this$ = ecx

; 486  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 487  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 488  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 489  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 490  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 491  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 492  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@XOR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@XOR:
	DD	2
	DD	$LN5@XOR
$LN5@XOR:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@XOR
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@XOR
$LN4@XOR:
	DB	98					; 00000062H
	DB	0
$LN3@XOR:
	DB	97					; 00000061H
	DB	0
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,1,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,3,1>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,6,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,7,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,4,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,5,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,2,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,3,0>, COMDAT
; _this$ = ecx

; 475  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 476  :   reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], 0

; 477  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 478  :   arithmeticMode<dest,src,mode>(a,b);

	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 479  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 480  :   reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 481  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 482  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@AND
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@AND:
	DD	2
	DD	$LN5@AND
$LN5@AND:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@AND
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@AND
$LN4@AND:
	DB	98					; 00000062H
	DB	0
$LN3@AND:
	DB	97					; 00000061H
	DB	0
??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,1,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,3,1>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,6,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,7,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,4,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,5,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,2,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SBC<1,3,0>, COMDAT
; _this$ = ecx

; 463  : void Cpu::SBC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 464  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 465  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 466  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 467  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 468  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	sub	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 469  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 470  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 471  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 472  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SBC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@SBC:
	DD	2
	DD	$LN5@SBC
$LN5@SBC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SBC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SBC
$LN4@SBC:
	DB	98					; 00000062H
	DB	0
$LN3@SBC:
	DB	97					; 00000061H
	DB	0
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SBC<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,1,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,3,1>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,6,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,7,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,4,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,5,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,2,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::SUB<1,3,0>, COMDAT
; _this$ = ecx

; 452  : void Cpu::SUB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 453  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 454  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 455  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 456  :   reg.raw8[dest] = a - b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	sub	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 457  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 458  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 459  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 460  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SUB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@SUB:
	DD	2
	DD	$LN5@SUB
$LN5@SUB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@SUB
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@SUB
$LN4@SUB:
	DB	98					; 00000062H
	DB	0
$LN3@SUB:
	DB	97					; 00000061H
	DB	0
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::SUB<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,1,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,3,1>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,6,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,7,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,4,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,5,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,2,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADC<1,3,0>, COMDAT
; _this$ = ecx

; 440  : void Cpu::ADC() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 441  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 442  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 443  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 444  :   b += reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	movzx	ecx, al
	movzx	edx, BYTE PTR _b$[ebp]
	add	edx, ecx
	mov	BYTE PTR _b$[ebp], dl

; 445  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 446  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 447  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 448  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 449  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADC
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN6@ADC:
	DD	2
	DD	$LN5@ADC
$LN5@ADC:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADC
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADC
$LN4@ADC:
	DB	98					; 00000062H
	DB	0
$LN3@ADC:
	DB	97					; 00000061H
	DB	0
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADC<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,1,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,3,1>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,6,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,7,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,4,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,5,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,2,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_b$ = -21						; size = 1
_a$ = -9						; size = 1
_this$ = -4						; size = 4
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,3,0>, COMDAT
; _this$ = ecx

; 413  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 414  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 415  :   uint8_t a=0,b=0;

	mov	BYTE PTR _a$[ebp], 0
	mov	BYTE PTR _b$[ebp], 0

; 416  :   arithmeticMode<dest,src,mode>(a,b);

	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AAEXAAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 417  : 
; 418  :   reg.raw8[dest] = a + b;

	movzx	edx, BYTE PTR _a$[ebp]
	movzx	eax, BYTE PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 1
	shl	ecx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+ecx+1044], dl

; 419  :   updateCpuFlagC(a,b,0);

	push	0
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _a$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 420  :   updateCpuFlagH(a,b,0);

	push	0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 421  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 422  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ADD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ADD:
	DD	2
	DD	$LN5@ADD
$LN5@ADD:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ADD
	DD	-21					; ffffffebH
	DD	1
	DD	$LN4@ADD
$LN4@ADD:
	DB	98					; 00000062H
	DB	0
$LN3@ADD:
	DB	97					; 00000061H
	DB	0
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv148 = -28						; size = 4
tv130 = -24						; size = 4
_r2$ = -20						; size = 4
_r1$ = -16						; size = 2
_b$ = -12						; size = 2
_a$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD_16bit@$02$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,4>, COMDAT
; _this$ = ecx

; 425  : void Cpu::ADD_16bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 426  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 427  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR _a$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _b$[ebp], cx

; 428  :   a = reg.raw16[dest];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _a$[ebp], cx

; 429  :   b = reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _b$[ebp], cx

; 430  : 
; 431  :   reg.raw16[dest] = a + b;

	movzx	edx, WORD PTR _a$[ebp]
	movzx	eax, WORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 2
	imul	ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+1044], dx

; 432  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	ecx, WORD PTR _a$[ebp]
	and	ecx, 4095				; 00000fffH
	movzx	edx, WORD PTR _b$[ebp]
	and	edx, 4095				; 00000fffH
	add	ecx, edx
	mov	WORD PTR _r1$[ebp], cx

; 433  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR _r1$[ebp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[ebp], 0
$LN4@ADD_16bit:
	mov	cl, BYTE PTR tv130[ebp]
	and	cl, 1
	shl	cl, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 223					; 000000dfH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 434  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	edx, WORD PTR _a$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, WORD PTR _b$[ebp]
	and	eax, 65535				; 0000ffffH
	add	edx, eax
	mov	DWORD PTR _r2$[ebp], edx

; 435  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR _r2$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[ebp], 0
$LN6@ADD_16bit:
	mov	cl, BYTE PTR tv148[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 436  : 	Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 437  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD_16bit@$02$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv148 = -28						; size = 4
tv130 = -24						; size = 4
_r2$ = -20						; size = 4
_r1$ = -16						; size = 2
_b$ = -12						; size = 2
_a$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD_16bit@$02$02@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,3>, COMDAT
; _this$ = ecx

; 425  : void Cpu::ADD_16bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 426  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 427  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR _a$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _b$[ebp], cx

; 428  :   a = reg.raw16[dest];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _a$[ebp], cx

; 429  :   b = reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _b$[ebp], cx

; 430  : 
; 431  :   reg.raw16[dest] = a + b;

	movzx	edx, WORD PTR _a$[ebp]
	movzx	eax, WORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 2
	imul	ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+1044], dx

; 432  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	ecx, WORD PTR _a$[ebp]
	and	ecx, 4095				; 00000fffH
	movzx	edx, WORD PTR _b$[ebp]
	and	edx, 4095				; 00000fffH
	add	ecx, edx
	mov	WORD PTR _r1$[ebp], cx

; 433  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR _r1$[ebp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[ebp], 0
$LN4@ADD_16bit:
	mov	cl, BYTE PTR tv130[ebp]
	and	cl, 1
	shl	cl, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 223					; 000000dfH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 434  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	edx, WORD PTR _a$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, WORD PTR _b$[ebp]
	and	eax, 65535				; 0000ffffH
	add	edx, eax
	mov	DWORD PTR _r2$[ebp], edx

; 435  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR _r2$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[ebp], 0
$LN6@ADD_16bit:
	mov	cl, BYTE PTR tv148[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 436  : 	Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 437  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD_16bit@$02$02@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv148 = -28						; size = 4
tv130 = -24						; size = 4
_r2$ = -20						; size = 4
_r1$ = -16						; size = 2
_b$ = -12						; size = 2
_a$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD_16bit@$02$01@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,2>, COMDAT
; _this$ = ecx

; 425  : void Cpu::ADD_16bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 426  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 427  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR _a$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _b$[ebp], cx

; 428  :   a = reg.raw16[dest];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _a$[ebp], cx

; 429  :   b = reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _b$[ebp], cx

; 430  : 
; 431  :   reg.raw16[dest] = a + b;

	movzx	edx, WORD PTR _a$[ebp]
	movzx	eax, WORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 2
	imul	ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+1044], dx

; 432  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	ecx, WORD PTR _a$[ebp]
	and	ecx, 4095				; 00000fffH
	movzx	edx, WORD PTR _b$[ebp]
	and	edx, 4095				; 00000fffH
	add	ecx, edx
	mov	WORD PTR _r1$[ebp], cx

; 433  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR _r1$[ebp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[ebp], 0
$LN4@ADD_16bit:
	mov	cl, BYTE PTR tv130[ebp]
	and	cl, 1
	shl	cl, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 223					; 000000dfH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 434  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	edx, WORD PTR _a$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, WORD PTR _b$[ebp]
	and	eax, 65535				; 0000ffffH
	add	edx, eax
	mov	DWORD PTR _r2$[ebp], edx

; 435  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR _r2$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[ebp], 0
$LN6@ADD_16bit:
	mov	cl, BYTE PTR tv148[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 436  : 	Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 437  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD_16bit@$02$01@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv148 = -28						; size = 4
tv130 = -24						; size = 4
_r2$ = -20						; size = 4
_r1$ = -16						; size = 2
_b$ = -12						; size = 2
_a$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD_16bit@$02$00@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,1>, COMDAT
; _this$ = ecx

; 425  : void Cpu::ADD_16bit() {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 426  :   reg.F.N = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 191					; 000000bfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 427  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR _a$[ebp], ax
	xor	ecx, ecx
	mov	WORD PTR _b$[ebp], cx

; 428  :   a = reg.raw16[dest];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _a$[ebp], cx

; 429  :   b = reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	mov	WORD PTR _b$[ebp], cx

; 430  : 
; 431  :   reg.raw16[dest] = a + b;

	movzx	edx, WORD PTR _a$[ebp]
	movzx	eax, WORD PTR _b$[ebp]
	add	edx, eax
	mov	ecx, 2
	imul	ecx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+ecx+1044], dx

; 432  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	ecx, WORD PTR _a$[ebp]
	and	ecx, 4095				; 00000fffH
	movzx	edx, WORD PTR _b$[ebp]
	and	edx, 4095				; 00000fffH
	add	ecx, edx
	mov	WORD PTR _r1$[ebp], cx

; 433  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR _r1$[ebp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[ebp], 0
$LN4@ADD_16bit:
	mov	cl, BYTE PTR tv130[ebp]
	and	cl, 1
	shl	cl, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 223					; 000000dfH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 434  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	edx, WORD PTR _a$[ebp]
	and	edx, 65535				; 0000ffffH
	movzx	eax, WORD PTR _b$[ebp]
	and	eax, 65535				; 0000ffffH
	add	edx, eax
	mov	DWORD PTR _r2$[ebp], edx

; 435  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR _r2$[ebp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[ebp], 0
$LN6@ADD_16bit:
	mov	cl, BYTE PTR tv148[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 436  : 	Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 437  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD_16bit@$02$00@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,0,15>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	mov	edx, 1
	test	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,0,15>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<0,1,14>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	mov	eax, 1
	test	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<0,1,14>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$01$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$01$03@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,2,4>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$01$03@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,2,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$02@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$02@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,1,3>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$02@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,1,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,0,13>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,0,13>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<0,1,12>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<0,1,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,1,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$05$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$05$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,6,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$05$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,6,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$06$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$06$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,7,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$06$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$03$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$03$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,4,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$03$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$04$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$04$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,5,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$04$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,5,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$01$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$01$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,2,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$01$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,2,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,3,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,1,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,3,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,6,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,7,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,4,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,5,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,2,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,3,0>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<6,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<6,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$08@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$08@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,3,9>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$08@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,3,9>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$07@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,3,8>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$07@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,3,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$01$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$01$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,2,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$01$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,2,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$01@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$01@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,1,2>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$01@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,1,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,0,11>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,0,11>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<7,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<7,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<5,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<5,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$09@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$09@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,0,10>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$09@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$06@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$06@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,1,7>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$06@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,1,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$05@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$05@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,1,6>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$05@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,1,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,1,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,1,1>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$0A@$04@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$0A@$04@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<4,0,5>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$0A@$04@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<4,0,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$04@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$04@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<3,0,5>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$04@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<3,0,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$0A@$04@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$0A@$04@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<2,0,5>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$0A@$04@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<2,0,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$04@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv443 = -36						; size = 2
tv430 = -34						; size = 2
tv404 = -32						; size = 2
tv391 = -30						; size = 2
tv367 = -28						; size = 2
tv343 = -26						; size = 2
tv322 = -24						; size = 2
tv309 = -22						; size = 2
tv195 = -20						; size = 2
tv178 = -18						; size = 2
_d16$1 = -16						; size = 2
_d16$2 = -12						; size = 2
_src$3 = -7						; size = 1
_dest$4 = -6						; size = 1
_d8$5 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$04@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::LD<1,0,5>, COMDAT
; _this$ = ecx

; 361  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN31@LD

; 363  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1044]
	mov	BYTE PTR [eax+edx+1044], cl
	jmp	$LN32@LD
$LN31@LD:

; 364  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN29@LD

; 365  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN29@LD:

; 366  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN27@LD

; 367  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN27@LD:

; 368  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN25@LD

; 369  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1044]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN25@LD:

; 370  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN23@LD

; 371  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN23@LD:

; 372  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN21@LD

; 373  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx

; 374  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1044]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN21@LD:

; 375  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 376  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1044]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 377  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN19@LD:

; 378  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN17@LD

; 379  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 380  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1044]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1044], ax
	jmp	$LN32@LD
$LN17@LD:

; 381  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN15@LD

; 382  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1044]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1044], al

; 383  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1044]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1044], cx
	jmp	$LN32@LD
$LN15@LD:

; 384  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN13@LD

; 385  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1044]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al

; 386  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1044]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1044], dx
	jmp	$LN32@LD
$LN13@LD:

; 387  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN11@LD

; 388  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN11@LD:

; 389  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN9@LD

; 390  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$5[ebp], al

; 391  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$5[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1044]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN9@LD:

; 392  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	ecx, ecx
	je	SHORT $LN7@LD

; 393  :     uint8_t dest = mem_->Read8(reg.PC++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv343[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv343[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _dest$4[ebp], al

; 394  : 		mem_->Write8(0xFF00+dest,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, BYTE PTR _dest$4[ebp]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN7@LD:

; 395  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	edx, edx
	je	SHORT $LN5@LD

; 396  :     uint8_t src = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv367[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv367[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _src$3[ebp], al

; 397  : 		reg.raw8[dest] = mem_->Read8(0xFF00+src);

	movzx	ecx, BYTE PTR _src$3[ebp]
	add	ecx, 65280				; 0000ff00H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
	jmp	$LN32@LD
$LN5@LD:

; 398  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	je	$LN3@LD

; 399  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv391[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	WORD PTR _d16$2[ebp], dx

; 400  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv404[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _d16$2[ebp]
	or	edx, ecx
	mov	WORD PTR _d16$2[ebp], dx

; 401  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1044]
	push	edx
	movzx	eax, WORD PTR _d16$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN32@LD
$LN3@LD:

; 402  : 	} else if (mode == 15) { //src,(d16)

	xor	edx, edx
	je	$LN32@LD

; 403  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv430[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv430[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _d16$1[ebp], cx

; 404  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv443[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv443[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _d16$1[ebp]
	or	ecx, eax
	mov	WORD PTR _d16$1[ebp], cx

; 405  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR _d16$1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1044], al
$LN32@LD:

; 406  : 	}
; 407  : 
; 408  :  // for (int i=0;i<cycles;++i)
; 409  :     //Tick();
; 410  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$04@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::LD<1,0,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?lcd_driver@Emu@gb@emulation@@QAEPAVLCDDriver@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?lcd_driver@Emu@gb@emulation@@QAEPAVLCDDriver@23@XZ PROC ; emulation::gb::Emu::lcd_driver, COMDAT
; _this$ = ecx

; 22   :   LCDDriver* lcd_driver() { return &lcd_driver_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1528				; 000005f8H
	mov	esp, ebp
	pop	ebp
	ret	0
?lcd_driver@Emu@gb@emulation@@QAEPAVLCDDriver@23@XZ ENDP ; emulation::gb::Emu::lcd_driver
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ PROC	; emulation::gb::Emu::memory, COMDAT
; _this$ = ecx

; 21   :   Memory* memory() { return &memory_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1088				; 00000440H
	mov	esp, ebp
	pop	ebp
	ret	0
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ENDP	; emulation::gb::Emu::memory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EI@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::EI
; _this$ = ecx

; 794  : void Cpu::EI() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 795  :   ime = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1060], 1

; 796  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EI@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::EI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DI@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::DI
; _this$ = ecx

; 790  : void Cpu::DI() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 791  :   ime = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1060], 0

; 792  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DI@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::DI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CP_HL@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::CP_HL
; _this$ = ecx

; 786  : void Cpu::CP_HL() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 787  :   CP(reg.A,mem_->Read8(reg.HL));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+1045]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 788  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CP_HL@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::CP_HL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv75 = -6						; size = 2
_this$ = -4						; size = 4
?CP_d8@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::CP_d8
; _this$ = ecx

; 782  : void Cpu::CP_d8() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 783  :   CP(reg.A,mem_->Read8(reg.PC++));

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv75[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv75[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+1045]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CP@Cpu@gb@emulation@@AAEXEE@Z		; emulation::gb::Cpu::CP

; 784  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CP_d8@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::CP_d8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 1
_b$ = 12						; size = 1
?CP@Cpu@gb@emulation@@AAEXEE@Z PROC			; emulation::gb::Cpu::CP
; _this$ = ecx

; 770  : void Cpu::CP(uint8_t a, uint8_t b) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 771  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 772  :   updateCpuFlagC(a,b,1);

	push	1
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 773  :   updateCpuFlagH(a,b,1);

	push	1
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	movzx	eax, BYTE PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 774  :   updateCpuFlagZ(a-b);

	movzx	ecx, BYTE PTR _a$[ebp]
	movzx	edx, BYTE PTR _b$[ebp]
	sub	ecx, edx
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 775  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CP@Cpu@gb@emulation@@AAEXEE@Z ENDP			; emulation::gb::Cpu::CP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_oldC$ = -9						; size = 1
_r$ = -8						; size = 4
_this$ = -4						; size = 4
?RRA@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RRA
; _this$ = ecx

; 762  : void Cpu::RRA() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 763  :   uint8_t& r = reg.A;;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1045				; 00000415H
	mov	DWORD PTR _r$[ebp], eax

; 764  :   uint8_t oldC = reg.F.C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	shr	dl, 4
	and	dl, 1
	mov	BYTE PTR _oldC$[ebp], dl

; 765  :   reg.F.C = r & 1;

	mov	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 1
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 766  :   r = r >> 1;

	mov	edx, DWORD PTR _r$[ebp]
	movzx	eax, BYTE PTR [edx]
	sar	eax, 1
	mov	ecx, DWORD PTR _r$[ebp]
	mov	BYTE PTR [ecx], al

; 767  :   r |= oldC << 7;

	movzx	edx, BYTE PTR _oldC$[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	or	ecx, edx
	mov	edx, DWORD PTR _r$[ebp]
	mov	BYTE PTR [edx], cl

; 768  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RRA@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RRA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv77 = -16						; size = 4
_oldC$ = -9						; size = 1
_r$ = -8						; size = 4
_this$ = -4						; size = 4
?RLA@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RLA
; _this$ = ecx

; 754  : void Cpu::RLA() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 755  :   uint8_t& r = reg.A;;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1045				; 00000415H
	mov	DWORD PTR _r$[ebp], eax

; 756  :   uint8_t oldC = reg.F.C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	shr	dl, 4
	and	dl, 1
	mov	BYTE PTR _oldC$[ebp], dl

; 757  :   reg.F.C = (r&0x80)!=0?1:0;

	mov	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 128				; 00000080H
	je	SHORT $LN3@RLA
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@RLA
$LN3@RLA:
	mov	DWORD PTR tv77[ebp], 0
$LN4@RLA:
	mov	dl, BYTE PTR tv77[ebp]
	and	dl, 1
	shl	dl, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 239					; 000000efH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 758  :   r = r << 1;

	mov	eax, DWORD PTR _r$[ebp]
	movzx	ecx, BYTE PTR [eax]
	shl	ecx, 1
	mov	edx, DWORD PTR _r$[ebp]
	mov	BYTE PTR [edx], cl

; 759  :   r |= oldC;

	movzx	eax, BYTE PTR _oldC$[ebp]
	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	BYTE PTR [eax], dl

; 760  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RLA@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RLA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv72 = -12						; size = 4
_r$ = -8						; size = 4
_this$ = -4						; size = 4
?RRCA@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RRCA
; _this$ = ecx

; 747  : void Cpu::RRCA() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 748  :   uint8_t& r = reg.A;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1045				; 00000415H
	mov	DWORD PTR _r$[ebp], eax

; 749  :   reg.F.C = (r&0x80)!=0?1:0;

	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 128				; 00000080H
	je	SHORT $LN3@RRCA
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@RRCA
$LN3@RRCA:
	mov	DWORD PTR tv72[ebp], 0
$LN4@RRCA:
	mov	al, BYTE PTR tv72[ebp]
	and	al, 1
	shl	al, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 239					; 000000efH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl

; 750  :   r = r >> 1;

	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sar	edx, 1
	mov	eax, DWORD PTR _r$[ebp]
	mov	BYTE PTR [eax], dl

; 751  :   r |= reg.F.C<<7;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	shr	dl, 4
	and	dl, 1
	movzx	eax, dl
	shl	eax, 7
	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	BYTE PTR [eax], dl

; 752  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RRCA@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RRCA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv72 = -12						; size = 4
_r$ = -8						; size = 4
_this$ = -4						; size = 4
?RLCA@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RLCA
; _this$ = ecx

; 740  : void Cpu::RLCA() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 741  :   uint8_t& r = reg.A;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1045				; 00000415H
	mov	DWORD PTR _r$[ebp], eax

; 742  :   reg.F.C = (r&0x80)!=0?1:0;

	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 128				; 00000080H
	je	SHORT $LN3@RLCA
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@RLCA
$LN3@RLCA:
	mov	DWORD PTR tv72[ebp], 0
$LN4@RLCA:
	mov	al, BYTE PTR tv72[ebp]
	and	al, 1
	shl	al, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 239					; 000000efH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl

; 743  :   r = r << 1;

	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	shl	edx, 1
	mov	eax, DWORD PTR _r$[ebp]
	mov	BYTE PTR [eax], dl

; 744  :   r |= reg.F.C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	shr	dl, 4
	and	dl, 1
	movzx	eax, dl
	mov	ecx, DWORD PTR _r$[ebp]
	movzx	edx, BYTE PTR [ecx]
	or	edx, eax
	mov	eax, DWORD PTR _r$[ebp]
	mov	BYTE PTR [eax], dl

; 745  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?RLCA@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RLCA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RET@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RET
; _this$ = ecx

; 706  : void Cpu::RET() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 707  :   reg.PC = pop();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	ax, al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax

; 708  :   reg.PC |= pop() << 8;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop@Cpu@gb@emulation@@AAEEXZ		; emulation::gb::Cpu::pop
	movzx	edx, al
	shl	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1054]
	or	ecx, edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx

; 709  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 710  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RET@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RET
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv87 = -12						; size = 2
tv74 = -10						; size = 2
_nn$ = -8						; size = 2
_this$ = -4						; size = 4
?CALL@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::CALL
; _this$ = ecx

; 682  : void Cpu::CALL() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 683  :   uint16_t nn;
; 684  :   nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$[ebp], cx

; 685  :   nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv87[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv87[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$[ebp], cx

; 686  :   pushPC();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pushPC@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::pushPC

; 687  :   reg.PC = nn;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _nn$[ebp]
	mov	WORD PTR [edx+1054], ax

; 688  : 
; 689  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 690  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CALL@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::CALL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_nn$ = -8						; size = 2
_this$ = -4						; size = 4
?JP_HL@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::JP_HL
; _this$ = ecx

; 672  : void Cpu::JP_HL() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 673  :   uint16_t nn;
; 674  :   nn = mem_->Read8(reg.HL);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1050]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ax, al
	mov	WORD PTR _nn$[ebp], ax

; 675  :   nn |= (mem_->Read8(reg.HL))<<8;

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+1050]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	ecx, al
	shl	ecx, 8
	movzx	edx, WORD PTR _nn$[ebp]
	or	edx, ecx
	mov	WORD PTR _nn$[ebp], dx

; 676  :   reg.PC = nn;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _nn$[ebp]
	mov	WORD PTR [eax+1054], cx

; 677  : 
; 678  :   //Tick();Tick();Tick();Tick();
; 679  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?JP_HL@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::JP_HL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv87 = -12						; size = 2
tv74 = -10						; size = 2
_nn$ = -8						; size = 2
_this$ = -4						; size = 4
?JP@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::JP
; _this$ = ecx

; 649  : void Cpu::JP() {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 650  :   uint16_t nn;
; 651  :   nn = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	cx, al
	mov	WORD PTR _nn$[ebp], cx

; 652  :   nn |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	mov	WORD PTR tv87[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx
	movzx	ecx, WORD PTR tv87[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR _nn$[ebp]
	or	ecx, eax
	mov	WORD PTR _nn$[ebp], cx

; 653  :   reg.PC = nn;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR _nn$[ebp]
	mov	WORD PTR [edx+1054], ax

; 654  : 
; 655  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 656  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?JP@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::JP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv226 = -76						; size = 4
tv185 = -72						; size = 4
tv80 = -66						; size = 2
_a$1 = -64						; size = 4
_r$2 = -59						; size = 1
_oldC$3 = -58						; size = 1
_r$4 = -57						; size = 1
_oldC$5 = -56						; size = 1
_r$6 = -55						; size = 1
_r$7 = -54						; size = 1
_bitshift$8 = -53					; size = 1
_test$9 = -52						; size = 1
_n1$10 = -51						; size = 1
_n0$11 = -50						; size = 1
_r$12 = -49						; size = 1
_setr$ = -44						; size = 8
_getr$ = -28						; size = 8
_code$ = -9						; size = 1
_this$ = -4						; size = 4
?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PREFIX_CB
; _this$ = ecx

; 517  : void Cpu::PREFIX_CB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 518  : 
; 519  :   
; 520  : 
; 521  : 	uint8_t code = emu_->memory()->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	mov	WORD PTR tv80[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1054]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1054], ax
	movzx	edx, WORD PTR tv80[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _code$[ebp], al

; 522  : 
; 523  :   auto getr = [=]() {
; 524  :     if ((code&0x7) != 6) {
; 525  :       return reg.raw8[reg_index[code&0x7]];
; 526  :     } else {
; 527  :       return mem_->Read8(reg.HL);
; 528  :     }
; 529  :   };

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _code$[ebp]
	push	edx
	lea	ecx, DWORD PTR _getr$[ebp]
	call	??0<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QAE@ABEPAVCpu@gb@emulation@@@Z ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>

; 530  : 
; 531  :   auto setr = [=](uint8_t r) {
; 532  :     if ((code&0x7) != 6) {
; 533  :       reg.raw8[reg_index[code&0x7]] = r;
; 534  :     
; 535  :     } else {
; 536  :       mem_->Write8(reg.HL,r);
; 537  :      
; 538  :     }
; 539  :   };

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _code$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??0<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QAE@ABEPAVCpu@gb@emulation@@@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::<lambda_08bfd30db2c73e418a55b8072ee85de7>

; 540  : 
; 541  :   if ((code & 0xF8) == 0x30) { //swap

	movzx	edx, BYTE PTR _code$[ebp]
	and	edx, 248				; 000000f8H
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN12@PREFIX_CB

; 542  :     uint8_t r = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _r$12[ebp], al

; 543  :     uint8_t n0 = r&0xF;

	movzx	eax, BYTE PTR _r$12[ebp]
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _n0$11[ebp], al

; 544  :     uint8_t n1 = r&0xF0;

	movzx	ecx, BYTE PTR _r$12[ebp]
	and	ecx, 240				; 000000f0H
	mov	BYTE PTR _n1$10[ebp], cl

; 545  :     r = n1 | (n0<<4);

	movzx	edx, BYTE PTR _n1$10[ebp]
	movzx	eax, BYTE PTR _n0$11[ebp]
	shl	eax, 4
	or	edx, eax
	mov	BYTE PTR _r$12[ebp], dl

; 546  :     setr(r);

	movzx	ecx, BYTE PTR _r$12[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()

; 547  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR _r$12[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN11@PREFIX_CB
$LN12@PREFIX_CB:

; 548  :   } else if ((code & 0xC0) == 0x40) {

	movzx	eax, BYTE PTR _code$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN10@PREFIX_CB

; 549  :     uint8_t test = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _test$9[ebp], al

; 550  :     uint8_t bitshift = (code&0x38) >> 3;

	movzx	ecx, BYTE PTR _code$[ebp]
	and	ecx, 56					; 00000038H
	sar	ecx, 3
	mov	BYTE PTR _bitshift$8[ebp], cl

; 551  :     reg.F.Z = ~((test&(1<<bitshift))>>bitshift);

	movzx	edx, BYTE PTR _test$9[ebp]
	movzx	ecx, BYTE PTR _bitshift$8[ebp]
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	movzx	ecx, BYTE PTR _bitshift$8[ebp]
	sar	edx, cl
	not	edx
	and	dl, 1
	shl	dl, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [ecx+1044]
	and	al, 127					; 0000007fH
	or	al, dl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 552  :     reg.F.H = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	or	al, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al
	jmp	$LN11@PREFIX_CB
$LN10@PREFIX_CB:

; 553  :   } else if ((code&0xF8) == 0) { //RLC r

	movzx	edx, BYTE PTR _code$[ebp]
	and	edx, 248				; 000000f8H
	jne	$LN8@PREFIX_CB

; 554  :     uint8_t r = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _r$7[ebp], al

; 555  :     reg.F.C = (r&0x80)!=0?1:0;

	movzx	eax, BYTE PTR _r$7[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN15@PREFIX_CB
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN16@PREFIX_CB
$LN15@PREFIX_CB:
	mov	DWORD PTR tv185[ebp], 0
$LN16@PREFIX_CB:
	mov	cl, BYTE PTR tv185[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 556  :     r = r << 1;

	movzx	edx, BYTE PTR _r$7[ebp]
	shl	edx, 1
	mov	BYTE PTR _r$7[ebp], dl

; 557  :     r |= reg.F.C;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	shr	cl, 4
	and	cl, 1
	movzx	edx, cl
	movzx	eax, BYTE PTR _r$7[ebp]
	or	eax, edx
	mov	BYTE PTR _r$7[ebp], al

; 558  :     setr(r);

	movzx	ecx, BYTE PTR _r$7[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()

; 559  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR _r$7[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN11@PREFIX_CB
$LN8@PREFIX_CB:

; 560  :   } else if ((code&0xF8) == 0x10) { //RL r

	movzx	eax, BYTE PTR _code$[ebp]
	and	eax, 248				; 000000f8H
	cmp	eax, 16					; 00000010H
	jne	$LN6@PREFIX_CB

; 561  :     uint8_t r = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _r$6[ebp], al

; 562  :     uint8_t oldC = reg.F.C;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	shr	dl, 4
	and	dl, 1
	mov	BYTE PTR _oldC$5[ebp], dl

; 563  :     reg.F.C = (r&0x80)!=0?1:0;

	movzx	eax, BYTE PTR _r$6[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN17@PREFIX_CB
	mov	DWORD PTR tv226[ebp], 1
	jmp	SHORT $LN18@PREFIX_CB
$LN17@PREFIX_CB:
	mov	DWORD PTR tv226[ebp], 0
$LN18@PREFIX_CB:
	mov	cl, BYTE PTR tv226[ebp]
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 564  :     r = r << 1;

	movzx	edx, BYTE PTR _r$6[ebp]
	shl	edx, 1
	mov	BYTE PTR _r$6[ebp], dl

; 565  :     r |= oldC;

	movzx	eax, BYTE PTR _oldC$5[ebp]
	movzx	ecx, BYTE PTR _r$6[ebp]
	or	ecx, eax
	mov	BYTE PTR _r$6[ebp], cl

; 566  :     setr(r);

	movzx	edx, BYTE PTR _r$6[ebp]
	push	edx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()

; 567  :     updateCpuFlagZ(r);

	movzx	eax, BYTE PTR _r$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN11@PREFIX_CB
$LN6@PREFIX_CB:

; 568  :   } else if ((code&0xF8) == 0x18) { //RR r

	movzx	ecx, BYTE PTR _code$[ebp]
	and	ecx, 248				; 000000f8H
	cmp	ecx, 24					; 00000018H
	jne	SHORT $LN4@PREFIX_CB

; 569  :     uint8_t r = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _r$4[ebp], al

; 570  :     uint8_t oldC = reg.F.C;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR _oldC$3[ebp], al

; 571  :     reg.F.C = r&1;

	movzx	ecx, BYTE PTR _r$4[ebp]
	and	ecx, 1
	and	cl, 1
	shl	cl, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 239					; 000000efH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 572  :     r = r >> 1;

	movzx	edx, BYTE PTR _r$4[ebp]
	sar	edx, 1
	mov	BYTE PTR _r$4[ebp], dl

; 573  :     r |= oldC<<7;

	movzx	eax, BYTE PTR _oldC$3[ebp]
	shl	eax, 7
	movzx	ecx, BYTE PTR _r$4[ebp]
	or	ecx, eax
	mov	BYTE PTR _r$4[ebp], cl

; 574  :     setr(r);

	movzx	edx, BYTE PTR _r$4[ebp]
	push	edx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()

; 575  :     updateCpuFlagZ(r);

	movzx	eax, BYTE PTR _r$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	SHORT $LN11@PREFIX_CB
$LN4@PREFIX_CB:

; 576  :   } else if ((code & 0xF8) == 0x38) {

	movzx	ecx, BYTE PTR _code$[ebp]
	and	ecx, 248				; 000000f8H
	cmp	ecx, 56					; 00000038H
	jne	SHORT $LN2@PREFIX_CB

; 577  :     auto r = getr();

	lea	ecx, DWORD PTR _getr$[ebp]
	call	??R<lambda_cf4d431a50c7ddf749029b7e3fcc8a53>@@QBEEXZ ; <lambda_cf4d431a50c7ddf749029b7e3fcc8a53>::operator()
	mov	BYTE PTR _r$2[ebp], al

; 578  : 
; 579  :     reg.F.C = r&1;

	movzx	edx, BYTE PTR _r$2[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	and	cl, 239					; 000000efH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 580  :     r >>= 1;

	mov	al, BYTE PTR _r$2[ebp]
	shr	al, 1
	mov	BYTE PTR _r$2[ebp], al

; 581  :     setr(r);

	movzx	ecx, BYTE PTR _r$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _setr$[ebp]
	call	??R<lambda_08bfd30db2c73e418a55b8072ee85de7>@@QBEXE@Z ; <lambda_08bfd30db2c73e418a55b8072ee85de7>::operator()

; 582  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR _r$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 583  :   }
; 584  :   else {

	jmp	SHORT $LN11@PREFIX_CB
$LN2@PREFIX_CB:

; 585  :     int a = 1;

	mov	DWORD PTR _a$1[ebp], 1
$LN11@PREFIX_CB:

; 586  :   }
; 587  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 588  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@PREFIX_CB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@PREFIX_CB:
	DD	3
	DD	$LN22@PREFIX_CB
$LN22@PREFIX_CB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN19@PREFIX_CB
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN20@PREFIX_CB
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN21@PREFIX_CB
$LN21@PREFIX_CB:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN20@PREFIX_CB:
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN19@PREFIX_CB:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PREFIX_CB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CPL@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::CPL
; _this$ = ecx

; 508  : void Cpu::CPL() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 509  :   reg.F.H = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 510  :   reg.F.N = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1044]
	or	cl, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1044], cl

; 511  :   reg.A = ~reg.A;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1045]
	not	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1045], cl

; 512  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CPL@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::CPL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_a$ = -8						; size = 4
_this$ = -4						; size = 4
?HALT@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::HALT
; _this$ = ecx

; 504  : void Cpu::HALT() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 505  :   int a = 1;

	mov	DWORD PTR _a$[ebp], 1

; 506  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HALT@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::HALT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_t$ = -5						; size = 1
_this$ = -4						; size = 4
?RST@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::RST
; _this$ = ecx

; 353  : void Cpu::RST() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 354  :   pushPC();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?pushPC@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::pushPC

; 355  :   uint8_t t = (opcode&0x38)>>3;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1061]
	and	ecx, 56					; 00000038H
	sar	ecx, 3
	mov	BYTE PTR _t$[ebp], cl

; 356  :   reg.PC = t*8;

	movzx	edx, BYTE PTR _t$[ebp]
	shl	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1054], dx

; 357  :   Tick();Tick();Tick();Tick();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Tick@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Tick

; 358  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RST@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::RST
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ILLEGAL@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::ILLEGAL
; _this$ = ecx

; 349  : void Cpu::ILLEGAL() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 
; 351  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::ILLEGAL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NOP@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::NOP
; _this$ = ecx

; 342  : void Cpu::NOP() { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 343  :   //Tick();
; 344  :   //Tick();
; 345  :   //Tick();
; 346  :   //Tick();
; 347  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NOP@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::NOP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?pushPC@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pushPC@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::pushPC, COMDAT
; _this$ = ecx

; 127  :   void pushPC() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 128  :     push((reg.PC&0xFF00)>>8);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+1054]
	and	ecx, 65280				; 0000ff00H
	sar	ecx, 8
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 129  :     push(reg.PC&0xFF);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	and	eax, 255				; 000000ffH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?push@Cpu@gb@emulation@@AAEXE@Z		; emulation::gb::Cpu::push

; 130  :   }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pushPC@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::pushPC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?pop@Cpu@gb@emulation@@AAEEXZ
_TEXT	SEGMENT
tv74 = -6						; size = 2
_this$ = -4						; size = 4
?pop@Cpu@gb@emulation@@AAEEXZ PROC			; emulation::gb::Cpu::pop, COMDAT
; _this$ = ecx

; 107  :   uint8_t pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 108  :     return mem_->Read8(reg.SP++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1052]
	mov	WORD PTR tv74[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1052]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1052], ax
	movzx	edx, WORD PTR tv74[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8

; 109  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop@Cpu@gb@emulation@@AAEEXZ ENDP			; emulation::gb::Cpu::pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?push@Cpu@gb@emulation@@AAEXE@Z
_TEXT	SEGMENT
tv71 = -6						; size = 2
_this$ = -4						; size = 4
_data$ = 8						; size = 1
?push@Cpu@gb@emulation@@AAEXE@Z PROC			; emulation::gb::Cpu::push, COMDAT
; _this$ = ecx

; 103  :   void push(uint8_t data) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 104  :     mem_->Write8(--reg.SP,data);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1052]
	sub	cx, 1
	mov	WORD PTR tv71[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR tv71[ebp]
	mov	WORD PTR [edx+1052], ax
	movzx	ecx, BYTE PTR _data$[ebp]
	push	ecx
	movzx	edx, WORD PTR tv71[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1056]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 105  :   }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push@Cpu@gb@emulation@@AAEXE@Z ENDP			; emulation::gb::Cpu::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_r$ = 8							; size = 1
?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z PROC		; emulation::gb::Cpu::updateCpuFlagZ, COMDAT
; _this$ = ecx

; 99   :   void updateCpuFlagZ(uint8_t r) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 100  :     reg.F.Z = r == 0?1:0;

	movzx	eax, BYTE PTR _r$[ebp]
	test	eax, eax
	jne	SHORT $LN3@updateCpuF
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@updateCpuF
$LN3@updateCpuF:
	mov	DWORD PTR tv69[ebp], 0
$LN4@updateCpuF:
	mov	cl, BYTE PTR tv69[ebp]
	and	cl, 1
	shl	cl, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 127					; 0000007fH
	or	al, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 101  :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?updateCpuFlagZ@Cpu@gb@emulation@@AAEXE@Z ENDP		; emulation::gb::Cpu::updateCpuFlagZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv76 = -12						; size = 4
_r1$1 = -5						; size = 1
_this$ = -4						; size = 4
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_mode$ = 16						; size = 4
?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z PROC	; emulation::gb::Cpu::updateCpuFlagH, COMDAT
; _this$ = ecx

; 90   :   void updateCpuFlagH(uint8_t a,uint8_t b,int mode) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 91   :     if (mode == 0) {

	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN2@updateCpuF

; 92   :       uint8_t r1 = (a&0xF) + (b&0xF);

	movzx	eax, BYTE PTR _a$[ebp]
	and	eax, 15					; 0000000fH
	movzx	ecx, BYTE PTR _b$[ebp]
	and	ecx, 15					; 0000000fH
	add	eax, ecx
	mov	BYTE PTR _r1$1[ebp], al

; 93   :       reg.F.H = r1>0xF?1:0;

	movzx	edx, BYTE PTR _r1$1[ebp]
	cmp	edx, 15					; 0000000fH
	jle	SHORT $LN5@updateCpuF
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN6@updateCpuF
$LN5@updateCpuF:
	mov	DWORD PTR tv76[ebp], 0
$LN6@updateCpuF:
	mov	al, BYTE PTR tv76[ebp]
	and	al, 1
	shl	al, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 223					; 000000dfH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl

; 94   :     } else {

	jmp	SHORT $LN3@updateCpuF
$LN2@updateCpuF:

; 95   :       reg.F.H = (a&0xF) < (b&0xF) ? 1 : 0;

	movzx	ecx, BYTE PTR _a$[ebp]
	and	ecx, 15					; 0000000fH
	movzx	edx, BYTE PTR _b$[ebp]
	and	edx, 15					; 0000000fH
	cmp	ecx, edx
	jge	SHORT $LN7@updateCpuF
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN8@updateCpuF
$LN7@updateCpuF:
	mov	DWORD PTR tv93[ebp], 0
$LN8@updateCpuF:
	mov	al, BYTE PTR tv93[ebp]
	and	al, 1
	shl	al, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 223					; 000000dfH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl
$LN3@updateCpuF:

; 96   :     }
; 97   :   }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?updateCpuFlagH@Cpu@gb@emulation@@AAEXEEH@Z ENDP	; emulation::gb::Cpu::updateCpuFlagH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z
_TEXT	SEGMENT
tv89 = -16						; size = 4
tv74 = -12						; size = 4
_r2$1 = -8						; size = 2
_this$ = -4						; size = 4
_a$ = 8							; size = 1
_b$ = 12						; size = 1
_mode$ = 16						; size = 4
?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z PROC	; emulation::gb::Cpu::updateCpuFlagC, COMDAT
; _this$ = ecx

; 81   :   void updateCpuFlagC(uint8_t a,uint8_t b,int mode) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 82   :     if (mode == 0) {

	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN2@updateCpuF

; 83   :       uint16_t r2 = (a) + (b);

	movzx	eax, BYTE PTR _a$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	add	eax, ecx
	mov	WORD PTR _r2$1[ebp], ax

; 84   :       reg.F.C = r2>0xFF?1:0;

	movzx	edx, WORD PTR _r2$1[ebp]
	cmp	edx, 255				; 000000ffH
	jle	SHORT $LN5@updateCpuF
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN6@updateCpuF
$LN5@updateCpuF:
	mov	DWORD PTR tv74[ebp], 0
$LN6@updateCpuF:
	mov	al, BYTE PTR tv74[ebp]
	and	al, 1
	shl	al, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 239					; 000000efH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl

; 85   :     } else {

	jmp	SHORT $LN3@updateCpuF
$LN2@updateCpuF:

; 86   :       reg.F.C = a < b ? 1 : 0;

	movzx	ecx, BYTE PTR _a$[ebp]
	movzx	edx, BYTE PTR _b$[ebp]
	cmp	ecx, edx
	jge	SHORT $LN7@updateCpuF
	mov	DWORD PTR tv89[ebp], 1
	jmp	SHORT $LN8@updateCpuF
$LN7@updateCpuF:
	mov	DWORD PTR tv89[ebp], 0
$LN8@updateCpuF:
	mov	al, BYTE PTR tv89[ebp]
	and	al, 1
	shl	al, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1044]
	and	dl, 239					; 000000efH
	or	dl, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1044], dl
$LN3@updateCpuF:

; 87   :     }
; 88   :   }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?updateCpuFlagC@Cpu@gb@emulation@@AAEXEEH@Z ENDP	; emulation::gb::Cpu::updateCpuFlagC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv94 = -8						; size = 2
_test$1 = -5						; size = 1
_this$ = -4						; size = 4
_dt$ = 8						; size = 8
?Step@Cpu@gb@emulation@@QAEXN@Z PROC			; emulation::gb::Cpu::Step
; _this$ = ecx

; 327  : void Cpu::Step(double dt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 328  :   this->dt = dt;

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _dt$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 329  : 	cycles = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0

; 330  :   reg.F._unused = 0;//always 0 according to docs

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1044]
	and	al, 240					; 000000f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1044], al

; 331  :   if (reg.PC == 0x100)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+1054]
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN2@Step

; 332  :     DebugBreak();

	mov	esi, esp
	call	DWORD PTR __imp__DebugBreak@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Step:

; 333  :   opcode = emu_->memory()->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1054]
	mov	WORD PTR tv94[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1054]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx
	movzx	eax, WORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1061], al

; 334  :   
; 335  :   (this->*(instructions[opcode]))();

	mov	eax, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [eax+1061]
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 336  :   if (ime) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1060]
	test	ecx, ecx
	je	SHORT $LN1@Step

; 337  :     uint8_t test = emu_->memory()->interrupt_enable() & emu_->memory()->interrupt_flag();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?interrupt_enable@Memory@gb@emulation@@QAEAAEXZ ; emulation::gb::Memory::interrupt_enable
	movzx	ebx, BYTE PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?interrupt_flag@Memory@gb@emulation@@QAEAAEXZ ; emulation::gb::Memory::interrupt_flag
	movzx	ecx, BYTE PTR [eax]
	and	ebx, ecx
	mov	BYTE PTR _test$1[ebp], bl
$LN1@Step:

; 338  : 
; 339  :   }
; 340  : }

	pop	esi
	pop	ebx
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Step@Cpu@gb@emulation@@QAEXN@Z ENDP			; emulation::gb::Cpu::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Tick@Cpu@gb@emulation@@QAEXXZ PROC			; emulation::gb::Cpu::Tick
; _this$ = ecx

; 322  : void Cpu::Tick() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 323  :   ++cycles;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 324  :   emu_->lcd_driver()->Step(dt);

	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?lcd_driver@Emu@gb@emulation@@QAEPAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	ecx, eax
	call	?Step@LCDDriver@gb@emulation@@QAEXN@Z	; emulation::gb::LCDDriver::Step

; 325  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Tick@Cpu@gb@emulation@@QAEXXZ ENDP			; emulation::gb::Cpu::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@Cpu@gb@emulation@@QAEXXZ PROC			; emulation::gb::Cpu::Reset
; _this$ = ecx

; 315  : void Cpu::Reset() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 	memset(&reg,0,sizeof(reg));

	push	12					; 0000000cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1044				; 00000414H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 317  :   reg.PC = 0;

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1054], cx

; 318  :   cycles = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0

; 319  :   ime = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1060], 0

; 320  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@Cpu@gb@emulation@@QAEXXZ ENDP			; emulation::gb::Cpu::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deinitialize@Cpu@gb@emulation@@QAEXXZ PROC		; emulation::gb::Cpu::Deinitialize
; _this$ = ecx

; 311  : void Cpu::Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 312  : 
; 313  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@Cpu@gb@emulation@@QAEXXZ ENDP		; emulation::gb::Cpu::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_emu$ = 8						; size = 4
?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z PROC	; emulation::gb::Cpu::Initialize
; _this$ = ecx

; 305  : void Cpu::Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 306  :   Component::Initialize(emu);

	mov	eax, DWORD PTR _emu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize

; 307  :   mem_ = emu_->memory();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+1056], eax

; 308  :   Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Reset

; 309  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z ENDP	; emulation::gb::Cpu::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Cpu@gb@emulation@@QAE@XZ PROC			; emulation::gb::Cpu::~Cpu
; _this$ = ecx

; 301  : Cpu::~Cpu() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 
; 303  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Cpu@gb@emulation@@QAE@XZ ENDP			; emulation::gb::Cpu::~Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Cpu@gb@emulation@@QAE@XZ PROC			; emulation::gb::Cpu::Cpu
; _this$ = ecx

; 12   : Cpu::Cpu() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 13   : 	instructions[0x00] = &Cpu::NOP;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?NOP@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::NOP

; 14   : 
; 15   :   instructions[0x2F] = &Cpu::CPL;

	mov	edx, 4
	imul	edx, 47					; 0000002fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?CPL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CPL

; 16   : 
; 17   : 	instructions[0x01] = &Cpu::LD<RegBC,0,5>;

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$0A@$04@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,5>

; 18   : 	instructions[0x11] = &Cpu::LD<RegDE,0,5>;

	mov	eax, 4
	imul	eax, 17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$01$0A@$04@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,0,5>

; 19   : 	instructions[0x21] = &Cpu::LD<RegHL,0,5>;

	mov	edx, 4
	imul	edx, 33					; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$0A@$04@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,5>

; 20   : 	instructions[0x31] = &Cpu::LD<RegSP,0,5>;

	mov	ecx, 4
	imul	ecx, 49					; 00000031H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$03$0A@$04@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,0,5>

; 21   : 
; 22   : 	
; 23   : 	instructions[0x02] = &Cpu::LD<RegBC,RegA,1>;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$00$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,1>

; 24   : 	instructions[0x12] = &Cpu::LD<RegDE,RegA,1>;

	mov	edx, 4
	imul	edx, 18					; 00000012H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$01$00$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,1>

; 25   : 	instructions[0x22] = &Cpu::LD<RegHL,RegA,6>;

	mov	ecx, 4
	imul	ecx, 34					; 00000022H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$00$05@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,6>

; 26   : 	instructions[0x32] = &Cpu::LD<RegHL,RegA,7>;

	mov	eax, 4
	imul	eax, 50					; 00000032H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$02$00$06@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,7>

; 27   : 
; 28   : 	instructions[0x06] = &Cpu::LD<RegB,0,10>;

	mov	edx, 4
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,10>

; 29   : 	instructions[0x16] = &Cpu::LD<RegD,0,10>;

	mov	ecx, 4
	imul	ecx, 22					; 00000016H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$04$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,0,10>

; 30   : 	instructions[0x26] = &Cpu::LD<RegH,0,10>;

	mov	eax, 4
	imul	eax, 38					; 00000026H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$06$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,0,10>

; 31   : 	instructions[0x36] = &Cpu::LD<RegHL,0,11>;

	mov	edx, 4
	imul	edx, 54					; 00000036H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,11>

; 32   : 
; 33   : 	instructions[0x0A] = &Cpu::LD<RegA,RegBC,2>;

	mov	ecx, 4
	imul	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$00$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,2>

; 34   : 	instructions[0x1A] = &Cpu::LD<RegA,RegDE,2>;

	mov	eax, 4
	imul	eax, 26					; 0000001aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$01$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,2,2>

; 35   : 	instructions[0x2A] = &Cpu::LD<RegA,RegHL,8>;

	mov	edx, 4
	imul	edx, 42					; 0000002aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$00$02$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,8>

; 36   : 	instructions[0x3A] = &Cpu::LD<RegA,RegHL,9>;

	mov	ecx, 4
	imul	ecx, 58					; 0000003aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$02$08@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,9>

; 37   : 
; 38   : 	instructions[0x0E] = &Cpu::LD<RegC,0,10>;

	mov	eax, 4
	imul	eax, 14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$01$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,0,10>

; 39   : 	instructions[0x1E] = &Cpu::LD<RegE,0,10>;

	mov	edx, 4
	imul	edx, 30					; 0000001eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$03$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,0,10>

; 40   : 	instructions[0x2E] = &Cpu::LD<RegL,0,10>;

	mov	ecx, 4
	imul	ecx, 46					; 0000002eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$05$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,0,10>

; 41   : 	instructions[0x3E] = &Cpu::LD<RegA,0,10>;

	mov	eax, 4
	imul	eax, 62					; 0000003eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$0A@$09@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,10>

; 42   : 
; 43   : 	instructions[0x40] = &Cpu::LD<RegB,RegB,0>;

	mov	edx, 4
	shl	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,0>

; 44   : 	instructions[0x41] = &Cpu::LD<RegB,RegC,0>;

	mov	ecx, 4
	imul	ecx, 65					; 00000041H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,2,0>

; 45   : 	instructions[0x42] = &Cpu::LD<RegB,RegD,0>;

	mov	eax, 4
	imul	eax, 66					; 00000042H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$02$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,5,0>

; 46   : 	instructions[0x43] = &Cpu::LD<RegB,RegE,0>;

	mov	edx, 4
	imul	edx, 67					; 00000043H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,4,0>

; 47   : 	instructions[0x44] = &Cpu::LD<RegB,RegH,0>;

	mov	ecx, 4
	imul	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,7,0>

; 48   : 	instructions[0x45] = &Cpu::LD<RegB,RegL,0>;

	mov	eax, 4
	imul	eax, 69					; 00000045H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$02$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,6,0>

; 49   : 	instructions[0x46] = &Cpu::LD<RegB,RegHL,2>;

	mov	edx, 4
	imul	edx, 70					; 00000046H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,2>

; 50   : 	instructions[0x47] = &Cpu::LD<RegB,RegA,0>;

	mov	ecx, 4
	imul	ecx, 71					; 00000047H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,0>

; 51   : 	instructions[0x48] = &Cpu::LD<RegC,RegB,0>;

	mov	eax, 4
	imul	eax, 72					; 00000048H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$01$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,3,0>

; 52   : 	instructions[0x49] = &Cpu::LD<RegC,RegC,0>;

	mov	edx, 4
	imul	edx, 73					; 00000049H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$01$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,2,0>

; 53   : 	instructions[0x4A] = &Cpu::LD<RegC,RegD,0>;

	mov	ecx, 4
	imul	ecx, 74					; 0000004aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$01$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,5,0>

; 54   : 	instructions[0x4B] = &Cpu::LD<RegC,RegE,0>;

	mov	eax, 4
	imul	eax, 75					; 0000004bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$01$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,4,0>

; 55   : 	instructions[0x4C] = &Cpu::LD<RegC,RegH,0>;

	mov	edx, 4
	imul	edx, 76					; 0000004cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$01$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,7,0>

; 56   : 	instructions[0x4D] = &Cpu::LD<RegC,RegL,0>;

	mov	ecx, 4
	imul	ecx, 77					; 0000004dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$01$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,6,0>

; 57   : 	instructions[0x4E] = &Cpu::LD<RegC,RegHL,2>;

	mov	eax, 4
	imul	eax, 78					; 0000004eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$01$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,3,2>

; 58   : 	instructions[0x4F] = &Cpu::LD<RegC,RegA,0>;

	mov	edx, 4
	imul	edx, 79					; 0000004fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$01$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,0>

; 59   : 
; 60   : 	instructions[0x50] = &Cpu::LD<RegD,RegB,0>;

	mov	ecx, 4
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$04$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,3,0>

; 61   : 	instructions[0x51] = &Cpu::LD<RegD,RegC,0>;

	mov	eax, 4
	imul	eax, 81					; 00000051H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$04$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,2,0>

; 62   : 	instructions[0x52] = &Cpu::LD<RegD,RegD,0>;

	mov	edx, 4
	imul	edx, 82					; 00000052H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$04$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,5,0>

; 63   : 	instructions[0x53] = &Cpu::LD<RegD,RegE,0>;

	mov	ecx, 4
	imul	ecx, 83					; 00000053H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$04$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,4,0>

; 64   : 	instructions[0x54] = &Cpu::LD<RegD,RegH,0>;

	mov	eax, 4
	imul	eax, 84					; 00000054H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$04$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,7,0>

; 65   : 	instructions[0x55] = &Cpu::LD<RegD,RegL,0>;

	mov	edx, 4
	imul	edx, 85					; 00000055H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$04$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,6,0>

; 66   : 	instructions[0x56] = &Cpu::LD<RegD,RegHL,2>;

	mov	ecx, 4
	imul	ecx, 86					; 00000056H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$04$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,3,2>

; 67   : 	instructions[0x57] = &Cpu::LD<RegD,RegA,0>;

	mov	eax, 4
	imul	eax, 87					; 00000057H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$04$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,1,0>

; 68   : 	instructions[0x58] = &Cpu::LD<RegE,RegB,0>;

	mov	edx, 4
	imul	edx, 88					; 00000058H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$03$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,3,0>

; 69   : 	instructions[0x59] = &Cpu::LD<RegE,RegC,0>;

	mov	ecx, 4
	imul	ecx, 89					; 00000059H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$03$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,2,0>

; 70   : 	instructions[0x5A] = &Cpu::LD<RegE,RegD,0>;

	mov	eax, 4
	imul	eax, 90					; 0000005aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$03$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,5,0>

; 71   : 	instructions[0x5B] = &Cpu::LD<RegE,RegE,0>;

	mov	edx, 4
	imul	edx, 91					; 0000005bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$03$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,4,0>

; 72   : 	instructions[0x5C] = &Cpu::LD<RegE,RegH,0>;

	mov	ecx, 4
	imul	ecx, 92					; 0000005cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$03$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,7,0>

; 73   : 	instructions[0x5D] = &Cpu::LD<RegE,RegL,0>;

	mov	eax, 4
	imul	eax, 93					; 0000005dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$03$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,6,0>

; 74   : 	instructions[0x5E] = &Cpu::LD<RegE,RegHL,2>;

	mov	edx, 4
	imul	edx, 94					; 0000005eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$03$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,3,2>

; 75   : 	instructions[0x5F] = &Cpu::LD<RegE,RegA,0>;

	mov	ecx, 4
	imul	ecx, 95					; 0000005fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$03$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,1,0>

; 76   : 
; 77   : 	instructions[0x60] = &Cpu::LD<RegH,RegB,0>;

	mov	eax, 4
	imul	eax, 96					; 00000060H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$06$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,3,0>

; 78   : 	instructions[0x61] = &Cpu::LD<RegH,RegC,0>;

	mov	edx, 4
	imul	edx, 97					; 00000061H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$06$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,2,0>

; 79   : 	instructions[0x62] = &Cpu::LD<RegH,RegD,0>;

	mov	ecx, 4
	imul	ecx, 98					; 00000062H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$06$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,5,0>

; 80   : 	instructions[0x63] = &Cpu::LD<RegH,RegE,0>;

	mov	eax, 4
	imul	eax, 99					; 00000063H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$06$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,4,0>

; 81   : 	instructions[0x64] = &Cpu::LD<RegH,RegH,0>;

	mov	edx, 4
	imul	edx, 100				; 00000064H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$06$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,7,0>

; 82   : 	instructions[0x65] = &Cpu::LD<RegH,RegL,0>;

	mov	ecx, 4
	imul	ecx, 101				; 00000065H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$06$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,6,0>

; 83   : 	instructions[0x66] = &Cpu::LD<RegH,RegHL,2>;

	mov	eax, 4
	imul	eax, 102				; 00000066H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$06$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,3,2>

; 84   : 	instructions[0x67] = &Cpu::LD<RegH,RegA,0>;

	mov	edx, 4
	imul	edx, 103				; 00000067H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$06$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,1,0>

; 85   : 	instructions[0x68] = &Cpu::LD<RegL,RegB,0>;

	mov	ecx, 4
	imul	ecx, 104				; 00000068H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$05$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,3,0>

; 86   : 	instructions[0x69] = &Cpu::LD<RegL,RegC,0>;

	mov	eax, 4
	imul	eax, 105				; 00000069H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$05$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,2,0>

; 87   : 	instructions[0x6A] = &Cpu::LD<RegL,RegD,0>;

	mov	edx, 4
	imul	edx, 106				; 0000006aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$05$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,5,0>

; 88   : 	instructions[0x6B] = &Cpu::LD<RegL,RegE,0>;

	mov	ecx, 4
	imul	ecx, 107				; 0000006bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$05$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,4,0>

; 89   : 	instructions[0x6C] = &Cpu::LD<RegL,RegH,0>;

	mov	eax, 4
	imul	eax, 108				; 0000006cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$05$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,7,0>

; 90   : 	instructions[0x6D] = &Cpu::LD<RegL,RegL,0>;

	mov	edx, 4
	imul	edx, 109				; 0000006dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$05$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,6,0>

; 91   : 	instructions[0x6E] = &Cpu::LD<RegL,RegHL,2>;

	mov	ecx, 4
	imul	ecx, 110				; 0000006eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$05$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,3,2>

; 92   : 	instructions[0x6F] = &Cpu::LD<RegL,RegA,0>;

	mov	eax, 4
	imul	eax, 111				; 0000006fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$05$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,1,0>

; 93   : 
; 94   : 	instructions[0x70] = &Cpu::LD<RegHL,RegB,1>;

	mov	edx, 4
	imul	edx, 112				; 00000070H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,1>

; 95   : 	instructions[0x71] = &Cpu::LD<RegHL,RegC,1>;

	mov	ecx, 4
	imul	ecx, 113				; 00000071H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$01$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,2,1>

; 96   : 	instructions[0x72] = &Cpu::LD<RegHL,RegD,1>;

	mov	eax, 4
	imul	eax, 114				; 00000072H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$02$04$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,5,1>

; 97   : 	instructions[0x73] = &Cpu::LD<RegHL,RegE,1>;

	mov	edx, 4
	imul	edx, 115				; 00000073H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$02$03$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,4,1>

; 98   : 	instructions[0x74] = &Cpu::LD<RegHL,RegH,1>;

	mov	ecx, 4
	imul	ecx, 116				; 00000074H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$06$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,7,1>

; 99   : 	instructions[0x75] = &Cpu::LD<RegHL,RegL,1>;

	mov	eax, 4
	imul	eax, 117				; 00000075H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$02$05$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,6,1>

; 100  : 	instructions[0x76] = &Cpu::HALT;

	mov	edx, 4
	imul	edx, 118				; 00000076H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?HALT@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::HALT

; 101  : 	instructions[0x77] = &Cpu::LD<RegHL,RegA,1>;

	mov	ecx, 4
	imul	ecx, 119				; 00000077H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$02$00$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,1>

; 102  : 	instructions[0x78] = &Cpu::LD<RegA,RegB,0>;

	mov	eax, 4
	imul	eax, 120				; 00000078H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,0>

; 103  : 	instructions[0x79] = &Cpu::LD<RegA,RegC,0>;

	mov	edx, 4
	imul	edx, 121				; 00000079H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,2,0>

; 104  : 	instructions[0x7A] = &Cpu::LD<RegA,RegD,0>;

	mov	ecx, 4
	imul	ecx, 122				; 0000007aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,5,0>

; 105  : 	instructions[0x7B] = &Cpu::LD<RegA,RegE,0>;

	mov	eax, 4
	imul	eax, 123				; 0000007bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,4,0>

; 106  : 	instructions[0x7C] = &Cpu::LD<RegA,RegH,0>;

	mov	edx, 4
	imul	edx, 124				; 0000007cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,7,0>

; 107  : 	instructions[0x7D] = &Cpu::LD<RegA,RegL,0>;

	mov	ecx, 4
	imul	ecx, 125				; 0000007dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,6,0>

; 108  : 	instructions[0x7E] = &Cpu::LD<RegA,RegHL,2>;

	mov	eax, 4
	imul	eax, 126				; 0000007eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,2>

; 109  : 	instructions[0x7F] = &Cpu::LD<RegA,RegA,0>;

	mov	edx, 4
	imul	edx, 127				; 0000007fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,0>

; 110  : 
; 111  : 
; 112  :   instructions[0xE0] = &Cpu::LD<0,RegA,12>;

	mov	ecx, 4
	imul	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<0,1,12>

; 113  :   instructions[0xF0] = &Cpu::LD<RegA,0,13>;

	mov	eax, 4
	imul	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,13>

; 114  : 
; 115  :   instructions[0xE2] = &Cpu::LD<RegC,RegA,3>;

	mov	edx, 4
	imul	edx, 226				; 000000e2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$01$00$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,3>

; 116  : 	instructions[0xF2] = &Cpu::LD<RegA,RegC,4>;

	mov	ecx, 4
	imul	ecx, 242				; 000000f2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$LD@$00$01$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,2,4>

; 117  :   
; 118  :   instructions[0xEA] = &Cpu::LD<0,RegA,14>;

	mov	eax, 4
	imul	eax, 234				; 000000eaH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<0,1,14>

; 119  : 	instructions[0xFA] = &Cpu::LD<RegA,0,15>;

	mov	edx, 4
	imul	edx, 250				; 000000faH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,15>

; 120  : 
; 121  : 	instructions[0x07] = &Cpu::RLCA;

	mov	ecx, 4
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?RLCA@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RLCA

; 122  : 	instructions[0x0F] = &Cpu::RRCA;

	mov	eax, 4
	imul	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?RRCA@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RRCA

; 123  : 	instructions[0x17] = &Cpu::RLA;

	mov	edx, 4
	imul	edx, 23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?RLA@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RLA

; 124  : 	instructions[0x1F] = &Cpu::RRA;

	mov	ecx, 4
	imul	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?RRA@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RRA

; 125  : 
; 126  : 	instructions[0x09] = &Cpu::ADD_16bit<RegHL,RegBC>;

	mov	eax, 4
	imul	eax, 9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADD_16bit@$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD_16bit<3,1>

; 127  : 	instructions[0x19] = &Cpu::ADD_16bit<RegHL,RegDE>;

	mov	edx, 4
	imul	edx, 25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADD_16bit@$02$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD_16bit<3,2>

; 128  : 	instructions[0x29] = &Cpu::ADD_16bit<RegHL,RegHL>;

	mov	ecx, 4
	imul	ecx, 41					; 00000029H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADD_16bit@$02$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD_16bit<3,3>

; 129  : 	instructions[0x39] = &Cpu::ADD_16bit<RegHL,RegSP>;

	mov	eax, 4
	imul	eax, 57					; 00000039H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADD_16bit@$02$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD_16bit<3,4>

; 130  : 
; 131  : 	instructions[0x80] = &Cpu::ADD<RegA,RegB,0>;

	mov	edx, 4
	shl	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,3,0>

; 132  : 	instructions[0x81] = &Cpu::ADD<RegA,RegC,0>;

	mov	ecx, 4
	imul	ecx, 129				; 00000081H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,2,0>

; 133  : 	instructions[0x82] = &Cpu::ADD<RegA,RegD,0>;

	mov	eax, 4
	imul	eax, 130				; 00000082H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,5,0>

; 134  : 	instructions[0x83] = &Cpu::ADD<RegA,RegE,0>;

	mov	edx, 4
	imul	edx, 131				; 00000083H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,4,0>

; 135  : 	instructions[0x84] = &Cpu::ADD<RegA,RegH,0>;

	mov	ecx, 4
	imul	ecx, 132				; 00000084H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,7,0>

; 136  : 	instructions[0x85] = &Cpu::ADD<RegA,RegL,0>;

	mov	eax, 4
	imul	eax, 133				; 00000085H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,6,0>

; 137  : 	instructions[0x86] = &Cpu::ADD<RegA,RegHL,1>;

	mov	edx, 4
	imul	edx, 134				; 00000086H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,3,1>

; 138  : 	instructions[0x87] = &Cpu::ADD<RegA,RegA,0>;

	mov	ecx, 4
	imul	ecx, 135				; 00000087H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,1,0>

; 139  : 	instructions[0x88] = &Cpu::ADC<RegA,RegB,0>;

	mov	eax, 4
	imul	eax, 136				; 00000088H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,3,0>

; 140  : 	instructions[0x89] = &Cpu::ADC<RegA,RegC,0>;

	mov	edx, 4
	imul	edx, 137				; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,2,0>

; 141  : 	instructions[0x8A] = &Cpu::ADC<RegA,RegD,0>;

	mov	ecx, 4
	imul	ecx, 138				; 0000008aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,5,0>

; 142  : 	instructions[0x8B] = &Cpu::ADC<RegA,RegE,0>;

	mov	eax, 4
	imul	eax, 139				; 0000008bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,4,0>

; 143  : 	instructions[0x8C] = &Cpu::ADC<RegA,RegH,0>;

	mov	edx, 4
	imul	edx, 140				; 0000008cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,7,0>

; 144  : 	instructions[0x8D] = &Cpu::ADC<RegA,RegL,0>;

	mov	ecx, 4
	imul	ecx, 141				; 0000008dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,6,0>

; 145  : 	instructions[0x8E] = &Cpu::ADC<RegA,RegHL,1>;

	mov	eax, 4
	imul	eax, 142				; 0000008eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADC@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,3,1>

; 146  : 	instructions[0x8F] = &Cpu::ADC<RegA,RegA,0>;

	mov	edx, 4
	imul	edx, 143				; 0000008fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$ADC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,1,0>

; 147  : 
; 148  : 	instructions[0x90] = &Cpu::SUB<RegA,RegB,0>;

	mov	ecx, 4
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SUB@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,3,0>

; 149  : 	instructions[0x91] = &Cpu::SUB<RegA,RegC,0>;

	mov	eax, 4
	imul	eax, 145				; 00000091H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SUB@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,2,0>

; 150  : 	instructions[0x92] = &Cpu::SUB<RegA,RegD,0>;

	mov	edx, 4
	imul	edx, 146				; 00000092H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SUB@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,5,0>

; 151  : 	instructions[0x93] = &Cpu::SUB<RegA,RegE,0>;

	mov	ecx, 4
	imul	ecx, 147				; 00000093H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SUB@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,4,0>

; 152  : 	instructions[0x94] = &Cpu::SUB<RegA,RegH,0>;

	mov	eax, 4
	imul	eax, 148				; 00000094H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SUB@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,7,0>

; 153  : 	instructions[0x95] = &Cpu::SUB<RegA,RegL,0>;

	mov	edx, 4
	imul	edx, 149				; 00000095H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SUB@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,6,0>

; 154  : 	instructions[0x96] = &Cpu::SUB<RegA,RegHL,1>;

	mov	ecx, 4
	imul	ecx, 150				; 00000096H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SUB@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,3,1>

; 155  : 	instructions[0x97] = &Cpu::SUB<RegA,RegA,0>;

	mov	eax, 4
	imul	eax, 151				; 00000097H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SUB@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,1,0>

; 156  : 	instructions[0x98] = &Cpu::SBC<RegA,RegB,0>;

	mov	edx, 4
	imul	edx, 152				; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SBC@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,3,0>

; 157  : 	instructions[0x99] = &Cpu::SBC<RegA,RegC,0>;

	mov	ecx, 4
	imul	ecx, 153				; 00000099H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SBC@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,2,0>

; 158  : 	instructions[0x9A] = &Cpu::SBC<RegA,RegD,0>;

	mov	eax, 4
	imul	eax, 154				; 0000009aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SBC@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,5,0>

; 159  : 	instructions[0x9B] = &Cpu::SBC<RegA,RegE,0>;

	mov	edx, 4
	imul	edx, 155				; 0000009bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SBC@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,4,0>

; 160  : 	instructions[0x9C] = &Cpu::SBC<RegA,RegH,0>;

	mov	ecx, 4
	imul	ecx, 156				; 0000009cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SBC@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,7,0>

; 161  : 	instructions[0x9D] = &Cpu::SBC<RegA,RegL,0>;

	mov	eax, 4
	imul	eax, 157				; 0000009dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SBC@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,6,0>

; 162  : 	instructions[0x9E] = &Cpu::SBC<RegA,RegHL,1>;

	mov	edx, 4
	imul	edx, 158				; 0000009eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SBC@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,3,1>

; 163  : 	instructions[0x9F] = &Cpu::SBC<RegA,RegA,0>;

	mov	ecx, 4
	imul	ecx, 159				; 0000009fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$SBC@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,1,0>

; 164  : 
; 165  : 	instructions[0xA0] = &Cpu::AND<RegA,RegB,0>;

	mov	eax, 4
	imul	eax, 160				; 000000a0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,3,0>

; 166  : 	instructions[0xA1] = &Cpu::AND<RegA,RegC,0>;

	mov	edx, 4
	imul	edx, 161				; 000000a1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,2,0>

; 167  : 	instructions[0xA2] = &Cpu::AND<RegA,RegD,0>;

	mov	ecx, 4
	imul	ecx, 162				; 000000a2H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,5,0>

; 168  : 	instructions[0xA3] = &Cpu::AND<RegA,RegE,0>;

	mov	eax, 4
	imul	eax, 163				; 000000a3H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,4,0>

; 169  : 	instructions[0xA4] = &Cpu::AND<RegA,RegH,0>;

	mov	edx, 4
	imul	edx, 164				; 000000a4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,7,0>

; 170  : 	instructions[0xA5] = &Cpu::AND<RegA,RegL,0>;

	mov	ecx, 4
	imul	ecx, 165				; 000000a5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,6,0>

; 171  : 	instructions[0xA6] = &Cpu::AND<RegA,RegHL,1>;

	mov	eax, 4
	imul	eax, 166				; 000000a6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,3,1>

; 172  : 	instructions[0xA7] = &Cpu::AND<RegA,RegA,0>;

	mov	edx, 4
	imul	edx, 167				; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,1,0>

; 173  : 	instructions[0xA8] = &Cpu::XOR<RegA,RegB,0>;

	mov	ecx, 4
	imul	ecx, 168				; 000000a8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,3,0>

; 174  : 	instructions[0xA9] = &Cpu::XOR<RegA,RegC,0>;

	mov	eax, 4
	imul	eax, 169				; 000000a9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,2,0>

; 175  : 	instructions[0xAA] = &Cpu::XOR<RegA,RegD,0>;

	mov	edx, 4
	imul	edx, 170				; 000000aaH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,5,0>

; 176  : 	instructions[0xAB] = &Cpu::XOR<RegA,RegE,0>;

	mov	ecx, 4
	imul	ecx, 171				; 000000abH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,4,0>

; 177  : 	instructions[0xAC] = &Cpu::XOR<RegA,RegH,0>;

	mov	eax, 4
	imul	eax, 172				; 000000acH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,7,0>

; 178  : 	instructions[0xAD] = &Cpu::XOR<RegA,RegL,0>;

	mov	edx, 4
	imul	edx, 173				; 000000adH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,6,0>

; 179  : 	instructions[0xAE] = &Cpu::XOR<RegA,RegHL,1>;

	mov	ecx, 4
	imul	ecx, 174				; 000000aeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,3,1>

; 180  : 	instructions[0xAF] = &Cpu::XOR<RegA,RegA,0>;

	mov	eax, 4
	imul	eax, 175				; 000000afH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,1,0>

; 181  : 
; 182  : 	instructions[0xB0] = &Cpu::OR<RegA,RegB,0>;

	mov	edx, 4
	imul	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,3,0>

; 183  : 	instructions[0xB1] = &Cpu::OR<RegA,RegC,0>;

	mov	ecx, 4
	imul	ecx, 177				; 000000b1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,2,0>

; 184  : 	instructions[0xB2] = &Cpu::OR<RegA,RegD,0>;

	mov	eax, 4
	imul	eax, 178				; 000000b2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,5,0>

; 185  : 	instructions[0xB3] = &Cpu::OR<RegA,RegE,0>;

	mov	edx, 4
	imul	edx, 179				; 000000b3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,4,0>

; 186  : 	instructions[0xB4] = &Cpu::OR<RegA,RegH,0>;

	mov	ecx, 4
	imul	ecx, 180				; 000000b4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,7,0>

; 187  : 	instructions[0xB5] = &Cpu::OR<RegA,RegL,0>;

	mov	eax, 4
	imul	eax, 181				; 000000b5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,6,0>

; 188  : 	instructions[0xB6] = &Cpu::OR<RegA,RegHL,1>;

	mov	edx, 4
	imul	edx, 182				; 000000b6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,3,1>

; 189  : 	instructions[0xB7] = &Cpu::OR<RegA,RegA,0>;

	mov	ecx, 4
	imul	ecx, 183				; 000000b7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,1,0>

; 190  :   instructions[0xB8] = &Cpu::CP_reg<RegB>;

	mov	eax, 4
	imul	eax, 184				; 000000b8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$CP_reg@$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<3>

; 191  :   instructions[0xB9] = &Cpu::CP_reg<RegC>;

	mov	edx, 4
	imul	edx, 185				; 000000b9H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$CP_reg@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<2>

; 192  :   instructions[0xBA] = &Cpu::CP_reg<RegD>;

	mov	ecx, 4
	imul	ecx, 186				; 000000baH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$CP_reg@$04@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<5>

; 193  :   instructions[0xBB] = &Cpu::CP_reg<RegE>;

	mov	eax, 4
	imul	eax, 187				; 000000bbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$CP_reg@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<4>

; 194  :   instructions[0xBC] = &Cpu::CP_reg<RegH>;

	mov	edx, 4
	imul	edx, 188				; 000000bcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$CP_reg@$06@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<7>

; 195  :   instructions[0xBD] = &Cpu::CP_reg<RegL>;

	mov	ecx, 4
	imul	ecx, 189				; 000000bdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$CP_reg@$05@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<6>

; 196  :   instructions[0xBE] = &Cpu::CP_HL;

	mov	eax, 4
	imul	eax, 190				; 000000beH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?CP_HL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_HL

; 197  :   instructions[0xBF] = &Cpu::CP_reg<RegA>;

	mov	edx, 4
	imul	edx, 191				; 000000bfH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$CP_reg@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_reg<1>

; 198  : 
; 199  :   instructions[0xC6] = &Cpu::ADD<RegA,0,2>;

	mov	ecx, 4
	imul	ecx, 198				; 000000c6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$ADD@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,0,2>

; 200  :   instructions[0xD6] = &Cpu::SUB<RegA,0,2>;

	mov	eax, 4
	imul	eax, 214				; 000000d6H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$SUB@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SUB<1,0,2>

; 201  :   instructions[0xE6] = &Cpu::AND<RegA,0,2>;

	mov	edx, 4
	imul	edx, 230				; 000000e6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$AND@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,0,2>

; 202  :   instructions[0xF6] = &Cpu::OR<RegA,0,2>;

	mov	ecx, 4
	imul	ecx, 246				; 000000f6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$OR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,0,2>

; 203  : 
; 204  :   instructions[0xCE] = &Cpu::ADC<RegA,0,2>;

	mov	eax, 4
	imul	eax, 206				; 000000ceH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$ADC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADC<1,0,2>

; 205  :   instructions[0xDE] = &Cpu::SBC<RegA,0,2>;

	mov	edx, 4
	imul	edx, 222				; 000000deH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$SBC@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::SBC<1,0,2>

; 206  :   instructions[0xEE] = &Cpu::XOR<RegA,0,2>;

	mov	ecx, 4
	imul	ecx, 238				; 000000eeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$XOR@$00$0A@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,0,2>

; 207  :   instructions[0xFE] = &Cpu::CP_d8;

	mov	eax, 4
	imul	eax, 254				; 000000feH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?CP_d8@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CP_d8

; 208  : 
; 209  :   instructions[0x03] = &Cpu::INC_16bit<RegBC>;

	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$INC_16bit@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_16bit<1>

; 210  :   instructions[0x13] = &Cpu::INC_16bit<RegDE>;

	mov	ecx, 4
	imul	ecx, 19					; 00000013H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$INC_16bit@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_16bit<2>

; 211  :   instructions[0x23] = &Cpu::INC_16bit<RegHL>;

	mov	eax, 4
	imul	eax, 35					; 00000023H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$INC_16bit@$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_16bit<3>

; 212  :   instructions[0x33] = &Cpu::INC_16bit<RegSP>;

	mov	edx, 4
	imul	edx, 51					; 00000033H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$INC_16bit@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_16bit<4>

; 213  :   instructions[0x04] = &Cpu::INC_8bit<RegB,0>;

	mov	ecx, 4
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<3,0>

; 214  :   instructions[0x14] = &Cpu::INC_8bit<RegD,0>;

	mov	eax, 4
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<5,0>

; 215  :   instructions[0x24] = &Cpu::INC_8bit<RegH,0>;

	mov	edx, 4
	imul	edx, 36					; 00000024H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<7,0>

; 216  :   instructions[0x34] = &Cpu::INC_8bit<RegHL,1>;

	mov	ecx, 4
	imul	ecx, 52					; 00000034H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$INC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<3,1>

; 217  :   instructions[0x0C] = &Cpu::INC_8bit<RegC,0>;

	mov	eax, 4
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<2,0>

; 218  :   instructions[0x1C] = &Cpu::INC_8bit<RegE,0>;

	mov	edx, 4
	imul	edx, 28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<4,0>

; 219  :   instructions[0x2C] = &Cpu::INC_8bit<RegL,0>;

	mov	ecx, 4
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<6,0>

; 220  :   instructions[0x3C] = &Cpu::INC_8bit<RegA,0>;

	mov	eax, 4
	imul	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::INC_8bit<1,0>

; 221  : 
; 222  :   instructions[0x0B] = &Cpu::DEC_16bit<RegBC>;

	mov	edx, 4
	imul	edx, 11					; 0000000bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$DEC_16bit@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_16bit<1>

; 223  :   instructions[0x1B] = &Cpu::DEC_16bit<RegDE>;

	mov	ecx, 4
	imul	ecx, 27					; 0000001bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$DEC_16bit@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_16bit<2>

; 224  :   instructions[0x2B] = &Cpu::DEC_16bit<RegHL>;

	mov	eax, 4
	imul	eax, 43					; 0000002bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$DEC_16bit@$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_16bit<3>

; 225  :   instructions[0x3B] = &Cpu::DEC_16bit<RegSP>;

	mov	edx, 4
	imul	edx, 59					; 0000003bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$DEC_16bit@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_16bit<4>

; 226  :   instructions[0x05] = &Cpu::DEC_8bit<RegB,0>;

	mov	ecx, 4
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<3,0>

; 227  :   instructions[0x15] = &Cpu::DEC_8bit<RegD,0>;

	mov	eax, 4
	imul	eax, 21					; 00000015H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<5,0>

; 228  :   instructions[0x25] = &Cpu::DEC_8bit<RegH,0>;

	mov	edx, 4
	imul	edx, 37					; 00000025H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<7,0>

; 229  :   instructions[0x35] = &Cpu::DEC_8bit<RegHL,1>;

	mov	ecx, 4
	imul	ecx, 53					; 00000035H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$DEC_8bit@$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<3,1>

; 230  :   instructions[0x0D] = &Cpu::DEC_8bit<RegC,0>;

	mov	eax, 4
	imul	eax, 13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<2,0>

; 231  :   instructions[0x1D] = &Cpu::DEC_8bit<RegE,0>;

	mov	edx, 4
	imul	edx, 29					; 0000001dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<4,0>

; 232  :   instructions[0x2D] = &Cpu::DEC_8bit<RegL,0>;

	mov	ecx, 4
	imul	ecx, 45					; 0000002dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<6,0>

; 233  :   instructions[0x3D] = &Cpu::DEC_8bit<RegA,0>;

	mov	eax, 4
	imul	eax, 61					; 0000003dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DEC_8bit<1,0>

; 234  : 
; 235  :   instructions[0x20] = &Cpu::JR<CpuFlagsZ,1>;

	mov	edx, 4
	shl	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$JR@$06$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JR<7,1>

; 236  :   instructions[0x30] = &Cpu::JR<CpuFlagsC,1>;

	mov	ecx, 4
	imul	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$JR@$03$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JR<4,1>

; 237  :   instructions[0x28] = &Cpu::JR<CpuFlagsZ,0>;

	mov	eax, 4
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$JR@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JR<7,0>

; 238  :   instructions[0x38] = &Cpu::JR<CpuFlagsC,0>;

	mov	edx, 4
	imul	edx, 56					; 00000038H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$JR@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JR<4,0>

; 239  :   instructions[0x18] = &Cpu::JR<CpuFlagsUnused0,1>;

	mov	ecx, 4
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$JR@$0A@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JR<0,1>

; 240  : 
; 241  :   instructions[0xC2] = &Cpu::JP_cc<CpuFlagsZ,1>;

	mov	eax, 4
	imul	eax, 194				; 000000c2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$JP_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP_cc<7,1>

; 242  :   instructions[0xD4] = &Cpu::JP_cc<CpuFlagsC,1>;

	mov	edx, 4
	imul	edx, 212				; 000000d4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$JP_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP_cc<4,1>

; 243  :   instructions[0xCA] = &Cpu::JP_cc<CpuFlagsZ,0>;

	mov	ecx, 4
	imul	ecx, 202				; 000000caH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$JP_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP_cc<7,0>

; 244  :   instructions[0xDA] = &Cpu::JP_cc<CpuFlagsC,0>;

	mov	eax, 4
	imul	eax, 218				; 000000daH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$JP_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP_cc<4,0>

; 245  :   instructions[0xC3] = &Cpu::JP;

	mov	edx, 4
	imul	edx, 195				; 000000c3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?JP@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP

; 246  :   instructions[0xE9] = &Cpu::JP_HL;

	mov	ecx, 4
	imul	ecx, 233				; 000000e9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?JP_HL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::JP_HL

; 247  : 
; 248  :   instructions[0xC4] = &Cpu::CALL_cc<CpuFlagsZ,1>;

	mov	eax, 4
	imul	eax, 196				; 000000c4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$CALL_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CALL_cc<7,1>

; 249  :   instructions[0xD4] = &Cpu::CALL_cc<CpuFlagsC,1>;

	mov	edx, 4
	imul	edx, 212				; 000000d4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$CALL_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CALL_cc<4,1>

; 250  :   instructions[0xCC] = &Cpu::CALL_cc<CpuFlagsZ,0>;

	mov	ecx, 4
	imul	ecx, 204				; 000000ccH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CALL_cc<7,0>

; 251  :   instructions[0xDC] = &Cpu::CALL_cc<CpuFlagsC,0>;

	mov	eax, 4
	imul	eax, 220				; 000000dcH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CALL_cc<4,0>

; 252  :   instructions[0xCD] = &Cpu::CALL;

	mov	edx, 4
	imul	edx, 205				; 000000cdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?CALL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::CALL

; 253  : 
; 254  :   instructions[0xC9] = &Cpu::RET;

	mov	ecx, 4
	imul	ecx, 201				; 000000c9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?RET@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RET

; 255  :   instructions[0xC0] = &Cpu::RET_cc<CpuFlagsZ,1>;

	mov	eax, 4
	imul	eax, 192				; 000000c0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$RET_cc@$06$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RET_cc<7,1>

; 256  :   instructions[0xD0] = &Cpu::RET_cc<CpuFlagsC,1>;

	mov	edx, 4
	imul	edx, 208				; 000000d0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$RET_cc@$03$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RET_cc<4,1>

; 257  :   instructions[0xC8] = &Cpu::RET_cc<CpuFlagsZ,0>;

	mov	ecx, 4
	imul	ecx, 200				; 000000c8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$RET_cc@$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RET_cc<7,0>

; 258  :   instructions[0xD8] = &Cpu::RET_cc<CpuFlagsC,0>;

	mov	eax, 4
	imul	eax, 216				; 000000d8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$RET_cc@$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RET_cc<4,0>

; 259  : 
; 260  :   instructions[0xC1] = &Cpu::POP<RegBC>;

	mov	edx, 4
	imul	edx, 193				; 000000c1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$POP@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::POP<1>

; 261  :   instructions[0xD1] = &Cpu::POP<RegDE>;

	mov	ecx, 4
	imul	ecx, 209				; 000000d1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$POP@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::POP<2>

; 262  :   instructions[0xE1] = &Cpu::POP<RegHL>;

	mov	eax, 4
	imul	eax, 225				; 000000e1H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$POP@$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::POP<3>

; 263  :   instructions[0xF1] = &Cpu::POP<RegAF>;

	mov	edx, 4
	imul	edx, 241				; 000000f1H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$POP@$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::POP<0>

; 264  :   instructions[0xC5] = &Cpu::PUSH<RegBC>;

	mov	ecx, 4
	imul	ecx, 197				; 000000c5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$PUSH@$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PUSH<1>

; 265  :   instructions[0xD5] = &Cpu::PUSH<RegDE>;

	mov	eax, 4
	imul	eax, 213				; 000000d5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ??$PUSH@$01@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PUSH<2>

; 266  :   instructions[0xE5] = &Cpu::PUSH<RegHL>;

	mov	edx, 4
	imul	edx, 229				; 000000e5H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ??$PUSH@$02@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PUSH<3>

; 267  :   instructions[0xF5] = &Cpu::PUSH<RegAF>;

	mov	ecx, 4
	imul	ecx, 245				; 000000f5H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ??$PUSH@$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PUSH<0>

; 268  : 
; 269  : 	instructions[0xCB] = &Cpu::PREFIX_CB;

	mov	eax, 4
	imul	eax, 203				; 000000cbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PREFIX_CB

; 270  : 	
; 271  : 
; 272  : 
; 273  :   instructions[0xF3] = &Cpu::DI;

	mov	edx, 4
	imul	edx, 243				; 000000f3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?DI@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::DI

; 274  :   instructions[0xFB] = &Cpu::EI;

	mov	ecx, 4
	imul	ecx, 251				; 000000fbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?EI@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::EI

; 275  : 
; 276  :  
; 277  :   instructions[0xC7] = &Cpu::RST;

	mov	eax, 4
	imul	eax, 199				; 000000c7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 278  :   instructions[0xD7] = &Cpu::RST;

	mov	edx, 4
	imul	edx, 215				; 000000d7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 279  :   instructions[0xE7] = &Cpu::RST;

	mov	ecx, 4
	imul	ecx, 231				; 000000e7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 280  :   instructions[0xF7] = &Cpu::RST;

	mov	eax, 4
	imul	eax, 247				; 000000f7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 281  :   instructions[0xCF] = &Cpu::RST;

	mov	edx, 4
	imul	edx, 207				; 000000cfH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 282  :   instructions[0xDF] = &Cpu::RST;

	mov	ecx, 4
	imul	ecx, 223				; 000000dfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 283  :   instructions[0xEF] = &Cpu::RST;

	mov	eax, 4
	imul	eax, 239				; 000000efH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 284  :   instructions[0xFF] = &Cpu::RST;

	mov	edx, 4
	imul	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?RST@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::RST

; 285  : 
; 286  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	ecx, 4
	imul	ecx, 211				; 000000d3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 287  :   instructions[0xE3] = &Cpu::ILLEGAL;

	mov	eax, 4
	imul	eax, 227				; 000000e3H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 288  :   instructions[0xE4] = &Cpu::ILLEGAL;

	mov	edx, 4
	imul	edx, 228				; 000000e4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 289  :   instructions[0xF4] = &Cpu::ILLEGAL;

	mov	ecx, 4
	imul	ecx, 244				; 000000f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 290  :   instructions[0xEB] = &Cpu::ILLEGAL;

	mov	eax, 4
	imul	eax, 235				; 000000ebH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 291  :   instructions[0xEC] = &Cpu::ILLEGAL;

	mov	edx, 4
	imul	edx, 236				; 000000ecH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 292  :   instructions[0xED] = &Cpu::ILLEGAL;

	mov	ecx, 4
	imul	ecx, 237				; 000000edH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 293  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	eax, 4
	imul	eax, 211				; 000000d3H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 294  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	edx, 4
	imul	edx, 211				; 000000d3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 295  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	ecx, 4
	imul	ecx, 211				; 000000d3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 296  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	eax, 4
	imul	eax, 211				; 000000d3H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 297  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	edx, 4
	imul	edx, 211				; 000000d3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 298  :   instructions[0xD3] = &Cpu::ILLEGAL;

	mov	ecx, 4
	imul	ecx, 211				; 000000d3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+24], OFFSET ?ILLEGAL@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ILLEGAL

; 299  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Cpu@gb@emulation@@QAE@XZ ENDP			; emulation::gb::Cpu::Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?interrupt_flag@Memory@gb@emulation@@QAEAAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interrupt_flag@Memory@gb@emulation@@QAEAAEXZ PROC	; emulation::gb::Memory::interrupt_flag, COMDAT
; _this$ = ecx

; 17   :   uint8_t& interrupt_flag() {  return ioports_[0x0F]; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	imul	eax, 15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?interrupt_flag@Memory@gb@emulation@@QAEAAEXZ ENDP	; emulation::gb::Memory::interrupt_flag
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?interrupt_enable@Memory@gb@emulation@@QAEAAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?interrupt_enable@Memory@gb@emulation@@QAEAAEXZ PROC	; emulation::gb::Memory::interrupt_enable, COMDAT
; _this$ = ecx

; 16   :   uint8_t& interrupt_enable() { return interrupt_enable_register_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 435				; 000001b3H
	mov	esp, ebp
	pop	ebp
	ret	0
?interrupt_enable@Memory@gb@emulation@@QAEAAEXZ ENDP	; emulation::gb::Memory::interrupt_enable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_emu$ = 8						; size = 4
?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z PROC ; emulation::gb::Component::Initialize, COMDAT
; _this$ = ecx

; 25   :   void Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 26   :     emu_ = emu;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _emu$[ebp]
	mov	DWORD PTR [eax], ecx

; 27   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ENDP ; emulation::gb::Component::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 120  : 	_Ignore()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END

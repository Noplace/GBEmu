; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	D:\Personal\Projects\GBEmu\Solution\Code\emulation\gb\cpu.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	_ConcRT_ProviderGuid
PUBLIC	_ConcRTEventGuid
PUBLIC	_SchedulerEventGuid
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	_ScheduleGroupEventGuid
PUBLIC	_ContextEventGuid
PUBLIC	_ChoreEventGuid
PUBLIC	_VirtualProcessorEventGuid
PUBLIC	_LockEventGuid
PUBLIC	_ResourceManagerEventGuid
PUBLIC	_PPLParallelInvokeEventGuid
PUBLIC	_PPLParallelForEventGuid
PUBLIC	_PPLParallelForeachEventGuid
PUBLIC	_AgentEventGuid
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT _AgentEventGuid
CONST	SEGMENT
_AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT _PPLParallelForeachEventGuid
CONST	SEGMENT
_PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT _PPLParallelForEventGuid
CONST	SEGMENT
_PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT _PPLParallelInvokeEventGuid
CONST	SEGMENT
_PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT _ResourceManagerEventGuid
CONST	SEGMENT
_ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT _LockEventGuid
CONST	SEGMENT
_LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT _VirtualProcessorEventGuid
CONST	SEGMENT
_VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT _ChoreEventGuid
CONST	SEGMENT
_ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT _ContextEventGuid
CONST	SEGMENT
_ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT _ScheduleGroupEventGuid
CONST	SEGMENT
_ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT _SchedulerEventGuid
CONST	SEGMENT
_SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT _ConcRTEventGuid
CONST	SEGMENT
_ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT _ConcRT_ProviderGuid
CONST	SEGMENT
_ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1IB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1IB DD 08H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1IB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1IB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1IB DD 00H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1IB DD 03H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
PUBLIC	??0_Ignore@std@@QAE@XZ				; std::_Ignore::_Ignore
PUBLIC	?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize
PUBLIC	??0Cpu@gb@emulation@@QAE@XZ			; emulation::gb::Cpu::Cpu
PUBLIC	??1Cpu@gb@emulation@@QAE@XZ			; emulation::gb::Cpu::~Cpu
PUBLIC	?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z	; emulation::gb::Cpu::Initialize
PUBLIC	?Deinitialize@Cpu@gb@emulation@@QAEXXZ		; emulation::gb::Cpu::Deinitialize
PUBLIC	?Step@Cpu@gb@emulation@@QAEXXZ			; emulation::gb::Cpu::Step
PUBLIC	?NOP@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::NOP
PUBLIC	?HALT@Cpu@gb@emulation@@AAEXXZ			; emulation::gb::Cpu::HALT
PUBLIC	?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ		; emulation::gb::Cpu::PREFIX_CB
PUBLIC	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ	; emulation::gb::Emu::memory
PUBLIC	??$LD@$00$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,5,12>
PUBLIC	??$LD@$01$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,0,5,12>
PUBLIC	??$LD@$02$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,5,12>
PUBLIC	??$LD@$03$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,0,5,12>
PUBLIC	??$LD@$00$00$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,1,8>
PUBLIC	??$LD@$01$00$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,1,8>
PUBLIC	??$LD@$02$00$05$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,6,8>
PUBLIC	??$LD@$02$00$06$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,7,8>
PUBLIC	??$LD@$02$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,10,8>
PUBLIC	??$LD@$04$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,0,10,8>
PUBLIC	??$LD@$06$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,0,10,8>
PUBLIC	??$LD@$02$0A@$0L@$0M@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,0,11,12>
PUBLIC	??$LD@$00$00$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,2,8>
PUBLIC	??$LD@$00$01$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,2,2,8>
PUBLIC	??$LD@$00$02$07$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,8,8>
PUBLIC	??$LD@$00$02$08$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,9,8>
PUBLIC	??$LD@$01$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,0,10,8>
PUBLIC	??$LD@$03$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,0,10,8>
PUBLIC	??$LD@$05$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,0,10,8>
PUBLIC	??$LD@$00$0A@$09$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,0,10,8>
PUBLIC	??$LD@$02$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,0,4>
PUBLIC	??$LD@$02$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,2,0,4>
PUBLIC	??$LD@$02$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,5,0,4>
PUBLIC	??$LD@$02$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,4,0,4>
PUBLIC	??$LD@$02$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,7,0,4>
PUBLIC	??$LD@$02$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,6,0,4>
PUBLIC	??$LD@$02$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,2,8>
PUBLIC	??$LD@$02$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,0,4>
PUBLIC	??$LD@$01$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,3,0,4>
PUBLIC	??$LD@$01$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,2,0,4>
PUBLIC	??$LD@$01$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,5,0,4>
PUBLIC	??$LD@$01$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,4,0,4>
PUBLIC	??$LD@$01$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,7,0,4>
PUBLIC	??$LD@$01$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,6,0,4>
PUBLIC	??$LD@$01$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,3,2,8>
PUBLIC	??$LD@$01$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,0,4>
PUBLIC	??$LD@$04$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,3,0,4>
PUBLIC	??$LD@$04$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,2,0,4>
PUBLIC	??$LD@$04$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,5,0,4>
PUBLIC	??$LD@$04$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,4,0,4>
PUBLIC	??$LD@$04$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,7,0,4>
PUBLIC	??$LD@$04$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,6,0,4>
PUBLIC	??$LD@$04$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,3,2,8>
PUBLIC	??$LD@$04$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<5,1,0,4>
PUBLIC	??$LD@$03$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,3,0,4>
PUBLIC	??$LD@$03$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,2,0,4>
PUBLIC	??$LD@$03$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,5,0,4>
PUBLIC	??$LD@$03$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,4,0,4>
PUBLIC	??$LD@$03$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,7,0,4>
PUBLIC	??$LD@$03$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,6,0,4>
PUBLIC	??$LD@$03$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,3,2,8>
PUBLIC	??$LD@$03$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<4,1,0,4>
PUBLIC	??$LD@$06$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,3,0,4>
PUBLIC	??$LD@$06$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,2,0,4>
PUBLIC	??$LD@$06$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,5,0,4>
PUBLIC	??$LD@$06$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,4,0,4>
PUBLIC	??$LD@$06$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,7,0,4>
PUBLIC	??$LD@$06$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,6,0,4>
PUBLIC	??$LD@$06$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,3,2,8>
PUBLIC	??$LD@$06$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<7,1,0,4>
PUBLIC	??$LD@$05$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,3,0,4>
PUBLIC	??$LD@$05$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,2,0,4>
PUBLIC	??$LD@$05$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,5,0,4>
PUBLIC	??$LD@$05$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,4,0,4>
PUBLIC	??$LD@$05$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,7,0,4>
PUBLIC	??$LD@$05$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,6,0,4>
PUBLIC	??$LD@$05$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,3,2,8>
PUBLIC	??$LD@$05$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<6,1,0,4>
PUBLIC	??$LD@$02$02$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,3,1,8>
PUBLIC	??$LD@$02$01$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,2,1,8>
PUBLIC	??$LD@$02$04$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,5,1,8>
PUBLIC	??$LD@$02$03$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,4,1,8>
PUBLIC	??$LD@$02$06$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,7,1,8>
PUBLIC	??$LD@$02$05$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,6,1,8>
PUBLIC	??$LD@$02$00$00$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<3,1,1,8>
PUBLIC	??$LD@$00$02$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,0,4>
PUBLIC	??$LD@$00$01$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,2,0,4>
PUBLIC	??$LD@$00$04$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,5,0,4>
PUBLIC	??$LD@$00$03$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,4,0,4>
PUBLIC	??$LD@$00$06$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,7,0,4>
PUBLIC	??$LD@$00$05$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,6,0,4>
PUBLIC	??$LD@$00$02$01$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,3,2,8>
PUBLIC	??$LD@$00$00$0A@$03@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<1,1,0,4>
PUBLIC	??$LD@$01$00$02$07@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::LD<2,1,3,8>
PUBLIC	??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,3,0>
PUBLIC	??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,2,0>
PUBLIC	??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,5,0>
PUBLIC	??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,4,0>
PUBLIC	??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,7,0>
PUBLIC	??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,6,0>
PUBLIC	??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,3,1>
PUBLIC	??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::ADD<1,1,0>
PUBLIC	??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,3,0>
PUBLIC	??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,2,0>
PUBLIC	??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,5,0>
PUBLIC	??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,4,0>
PUBLIC	??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,7,0>
PUBLIC	??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,6,0>
PUBLIC	??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,3,1>
PUBLIC	??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::AND<1,1,0>
PUBLIC	??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,3,0>
PUBLIC	??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,2,0>
PUBLIC	??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,5,0>
PUBLIC	??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,4,0>
PUBLIC	??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,7,0>
PUBLIC	??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,6,0>
PUBLIC	??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,3,1>
PUBLIC	??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::XOR<1,1,0>
PUBLIC	??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,3,0>
PUBLIC	??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,2,0>
PUBLIC	??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,5,0>
PUBLIC	??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,4,0>
PUBLIC	??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,7,0>
PUBLIC	??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,6,0>
PUBLIC	??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,3,1>
PUBLIC	??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ	; emulation::gb::Cpu::OR<1,1,0>
EXTRN	_memset:PROC
EXTRN	?Read8@Memory@gb@emulation@@QAEEG@Z:PROC	; emulation::gb::Memory::Read8
EXTRN	?Write8@Memory@gb@emulation@@QAEXGE@Z:PROC	; emulation::gb::Memory::Write8
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_ignore	DB	01H DUP (?)
__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,1,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,3,1>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	xor	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,6,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,7,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,4,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,5,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,2,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::OR<1,3,0>, COMDAT
; _this$ = ecx

; 266  : void Cpu::OR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 267  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@OR

; 268  : 		reg.raw8[dest] = reg.raw8[dest] | reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	or	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 269  : 	else {

	jmp	SHORT $LN2@OR
$LN3@OR:

; 270  : 		reg.raw8[dest] = reg.raw8[dest] | mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	or	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 271  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@OR:

; 272  : 	}
; 273  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 274  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@OR

; 275  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@OR:

; 276  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 277  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::OR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,1,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,3,1>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	xor	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,6,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,7,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,4,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,5,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,2,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::XOR<1,3,0>, COMDAT
; _this$ = ecx

; 252  : void Cpu::XOR() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 253  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@XOR

; 254  : 		reg.raw8[dest] = reg.raw8[dest] ^ reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	xor	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 255  : 	else {

	jmp	SHORT $LN2@XOR
$LN3@XOR:

; 256  : 		reg.raw8[dest] = reg.raw8[dest] ^ mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	xor	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 257  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@XOR:

; 258  : 	}
; 259  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 260  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@XOR

; 261  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@XOR:

; 262  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 263  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::XOR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,1,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,3,1>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	xor	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,6,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,7,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,4,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,5,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,2,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::AND<1,3,0>, COMDAT
; _this$ = ecx

; 236  : void Cpu::AND() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@AND

; 238  : 		reg.raw8[dest] = reg.raw8[dest] & reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	and	eax, ecx
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 239  : 	else {

	jmp	SHORT $LN2@AND
$LN3@AND:

; 240  : 		reg.raw8[dest] = reg.raw8[dest] & mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ebx, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	and	ebx, edx
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+eax+1036], bl

; 241  : 		cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
$LN2@AND:

; 242  : 	}
; 243  : 	reg.F.raw = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], 0

; 244  : 	reg.F.bcd_halfcarry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl

; 245  : 	if (reg.raw8[dest] == 0)

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	test	eax, eax
	jne	SHORT $LN1@AND

; 246  : 		reg.F.zero = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN1@AND:

; 247  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 248  : }

	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::AND<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,1,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,3,1>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	xor	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,6,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,7,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,4,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,5,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,2,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
_result$ = -8						; size = 2
_this$ = -4						; size = 4
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::ADD<1,3,0>, COMDAT
; _this$ = ecx

; 217  : void Cpu::ADD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	uint16_t result;
; 219  : 	if (mode == 0)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@ADD

; 220  : 		result = reg.raw8[dest] + reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx+1036]
	add	eax, ecx
	mov	WORD PTR _result$[ebp], ax

; 221  : 	else {

	jmp	SHORT $LN3@ADD
$LN4@ADD:

; 222  : 		result = reg.raw8[dest] + mem_->Read8(reg.raw16[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	esi, BYTE PTR [eax+edx+1036]
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	edx, al
	add	esi, edx
	mov	WORD PTR _result$[ebp], si

; 223  : 		cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
$LN3@ADD:

; 224  : 	}
; 225  : 	reg.raw8[dest] = result & 0xFF;

	movzx	ecx, WORD PTR _result$[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+1036], cl

; 226  : 	reg.F.raw = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], 0

; 227  : 	reg.F.bcd_halfcarry = result & 0x10 >> 4;

	movzx	edx, WORD PTR _result$[ebp]
	and	edx, 1
	and	dl, 1
	shl	dl, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+1036]
	and	cl, 223					; 000000dfH
	or	cl, dl
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+1036], cl

; 228  : 	if (result > 0xFF)

	movzx	eax, WORD PTR _result$[ebp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN2@ADD

; 229  : 		reg.F.carry = 1;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+1036]
	or	dl, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+1036], dl
$LN2@ADD:

; 230  : 	if (result == 0)

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@ADD

; 231  : 		reg.F.zero = 1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+1036]
	or	al, 128					; 00000080H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+1036], al
$LN1@ADD:

; 232  : 	cycles += 4;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+12]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 233  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::ADD<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$02$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$02$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,1,3,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$02$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,1,3,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,1,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,1,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$05$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$05$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,6,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$05$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,6,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$06$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$06$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,7,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$06$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,7,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$03$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$03$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,4,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$03$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,4,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$04$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$04$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,5,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$04$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,5,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$01$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$01$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,2,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$01$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,2,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,3,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,3,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,1,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,1,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,3,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,3,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$05$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$05$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,6,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,6,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$06$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$06$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,7,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,7,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$03$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$03$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,4,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,4,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$04$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$04$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,5,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,5,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$01$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$01$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,2,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,2,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$02$0A@$03@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$02$0A@$03@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,3,0,4>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,3,0,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$05$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<6,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$05$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<6,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$08$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$08$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,3,9,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$08$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,3,9,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$02$07$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$02$07$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,3,8,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$02$07$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,3,8,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$01$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$01$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,2,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$01$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,2,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$01$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$01$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,1,2,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$01$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,1,2,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$0L@$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$0L@$0M@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,0,11,12>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$0L@$0M@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,0,11,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$06$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<7,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$06$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<7,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$04$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<5,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 5
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$04$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<5,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$09$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$09$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,0,10,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,0,10,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$06$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$06$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,1,7,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$06$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,1,7,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$00$05$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$00$05$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,1,6,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$00$05$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,1,6,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$00$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$00$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,1,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$00$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,1,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$00$00$07@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$00$00$07@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,1,1,8>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	xor	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$00$00$07@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,1,1,8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$03$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<4,0,5,12>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$03$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<4,0,5,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$02$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<3,0,5,12>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	imul	edx, 3
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	imul	edx, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	ecx, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$02$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<3,0,5,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$01$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<2,0,5,12>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$01$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<2,0,5,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ
_TEXT	SEGMENT
tv322 = -14						; size = 2
tv309 = -12						; size = 2
tv195 = -10						; size = 2
tv178 = -8						; size = 2
_d8$1 = -5						; size = 1
_this$ = -4						; size = 4
??$LD@$00$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ PROC	; emulation::gb::Cpu::LD<1,0,5,12>, COMDAT
; _this$ = ecx

; 181  : void Cpu::LD() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 	if (mode == 0) { //reg reg

	xor	eax, eax
	je	SHORT $LN23@LD

; 183  : 		reg.raw8[dest] = reg.raw8[src];

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [esi+ecx+1036]
	mov	BYTE PTR [eax+edx+1036], cl
	jmp	$LN22@LD
$LN23@LD:

; 184  : 	}	else if (mode == 1) { //(dest), src

	xor	edx, edx
	je	SHORT $LN21@LD

; 185  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN21@LD:

; 186  : 	} else if (mode == 2) { //dest, (src)

	xor	ecx, ecx
	je	SHORT $LN19@LD

; 187  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN19@LD:

; 188  : 	} else if (mode == 3) { //0xFF00+dest src

	xor	eax, eax
	je	SHORT $LN17@LD

; 189  : 		mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	ecx, 1
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	push	eax
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+ecx+1036]
	add	eax, 65280				; 0000ff00H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN22@LD
$LN17@LD:

; 190  : 	} else if (mode == 4) { //dest,0xFF00+src 

	xor	edx, edx
	je	SHORT $LN15@LD

; 191  : 		reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	add	edx, 65280				; 0000ff00H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	$LN22@LD
$LN15@LD:

; 192  : 	} else if (mode == 5) { //dest,d16

	mov	eax, 1
	test	eax, eax
	je	$LN13@LD

; 193  : 		reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv178[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv178[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	dx, al
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx

; 194  : 		reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	mov	WORD PTR tv195[ebp], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	add	dx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx
	movzx	ecx, WORD PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [edx+ecx+1036]
	or	ecx, eax
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN13@LD:

; 195  : 	} else if (mode == 6) { //(dest),src - ldi

	xor	ecx, ecx
	je	SHORT $LN11@LD

; 196  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	edx, 1
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+edx+1036]
	push	ecx
	mov	edx, 2
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 197  : 		++reg.raw16[dest];

	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	add	dx, 1
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN11@LD:

; 198  : 	} else if (mode == 7) { //(dest),src - ldd

	xor	edx, edx
	je	SHORT $LN9@LD

; 199  : 		mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+eax+1036]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8

; 200  : 		--reg.raw16[dest];

	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+ecx+1036]
	sub	ax, 1
	mov	ecx, 2
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+ecx+1036], ax
	jmp	$LN22@LD
$LN9@LD:

; 201  : 	} else if (mode == 8) { //dest,(src) - ldi

	xor	eax, eax
	je	SHORT $LN7@LD

; 202  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	ecx, 2
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+ecx+1036]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+edx+1036], al

; 203  : 		++reg.raw16[src];

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+edx+1036]
	add	cx, 1
	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+edx+1036], cx
	jmp	$LN22@LD
$LN7@LD:

; 204  : 	} else if (mode == 9) { //src,(dest) - ldd

	xor	ecx, ecx
	je	SHORT $LN5@LD

; 205  : 		reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	edx, 2
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx+1036]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al

; 206  : 		--reg.raw16[src];

	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+eax+1036]
	sub	dx, 1
	mov	eax, 2
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax+1036], dx
	jmp	$LN22@LD
$LN5@LD:

; 207  : 	} else if (mode == 10) { //dest,d8

	xor	edx, edx
	je	SHORT $LN3@LD

; 208  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv309[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv309[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+1036], al
	jmp	SHORT $LN22@LD
$LN3@LD:

; 209  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	je	SHORT $LN22@LD

; 210  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv322[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv322[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+1048]
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _d8$1[ebp], al

; 211  : 		mem_->Write8(reg.raw16[dest],d8);

	movzx	edx, BYTE PTR _d8$1[ebp]
	push	edx
	mov	eax, 2
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax+1036]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1048]
	call	?Write8@Memory@gb@emulation@@QAEXGE@Z	; emulation::gb::Memory::Write8
$LN22@LD:

; 212  : 	}
; 213  : 	this->cycles += cycles;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx

; 214  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$LD@$00$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ENDP	; emulation::gb::Cpu::LD<1,0,5,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ PROC	; emulation::gb::Emu::memory, COMDAT
; _this$ = ecx

; 21   :   Memory* memory() { return &memory_; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1072				; 00000430H
	mov	esp, ebp
	pop	ebp
	ret	0
?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ENDP	; emulation::gb::Emu::memory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv80 = -8						; size = 2
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ PROC		; emulation::gb::Cpu::PREFIX_CB
; _this$ = ecx

; 285  : void Cpu::PREFIX_CB() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 286  : 	uint8_t opcode = emu_->memory()->Read8(reg.PC++);

	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	mov	WORD PTR tv80[ebp], cx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ax, WORD PTR [edx+1046]
	add	ax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+1046], ax
	movzx	edx, WORD PTR tv80[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _opcode$[ebp], al

; 287  : 	cycles += 4;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+12]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax

; 288  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ ENDP		; emulation::gb::Cpu::PREFIX_CB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_a$ = -8						; size = 4
_this$ = -4						; size = 4
?HALT@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::HALT
; _this$ = ecx

; 280  : void Cpu::HALT() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 281  : 	int a = 1;

	mov	DWORD PTR _a$[ebp], 1

; 282  : 	cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 283  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HALT@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::HALT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NOP@Cpu@gb@emulation@@AAEXXZ PROC			; emulation::gb::Cpu::NOP
; _this$ = ecx

; 176  : void Cpu::NOP() { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 177  :   cycles += 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+12]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx

; 178  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NOP@Cpu@gb@emulation@@AAEXXZ ENDP			; emulation::gb::Cpu::NOP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv81 = -8						; size = 2
_opcode$ = -5						; size = 1
_this$ = -4						; size = 4
?Step@Cpu@gb@emulation@@QAEXXZ PROC			; emulation::gb::Cpu::Step
; _this$ = ecx

; 170  : void Cpu::Step() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 	cycles = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0

; 172  :   uint8_t opcode = emu_->memory()->Read8(reg.PC++);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR [ecx+1046]
	mov	WORD PTR tv81[ebp], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR [eax+1046]
	add	cx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+1046], cx
	movzx	eax, WORD PTR tv81[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, eax
	call	?Read8@Memory@gb@emulation@@QAEEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR _opcode$[ebp], al

; 173  :   (this->*(instructions[opcode]))();

	movzx	edx, BYTE PTR _opcode$[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+edx*4+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 174  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Step@Cpu@gb@emulation@@QAEXXZ ENDP			; emulation::gb::Cpu::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deinitialize@Cpu@gb@emulation@@QAEXXZ PROC		; emulation::gb::Cpu::Deinitialize
; _this$ = ecx

; 166  : void Cpu::Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 
; 168  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@Cpu@gb@emulation@@QAEXXZ ENDP		; emulation::gb::Cpu::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_emu$ = 8						; size = 4
?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z PROC	; emulation::gb::Cpu::Initialize
; _this$ = ecx

; 156  : void Cpu::Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 157  :   Component::Initialize(emu);

	mov	eax, DWORD PTR _emu$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ; emulation::gb::Component::Initialize

; 158  : 	memset(&reg,0,sizeof(reg));

	push	12					; 0000000cH
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1036				; 0000040cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 159  :   reg.PC = 0;

	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+1046], dx

; 160  :   cycles = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0

; 161  :   mem_ = emu_->memory();

	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?memory@Emu@gb@emulation@@QAEPAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+1048], eax

; 162  : 	
; 163  :   
; 164  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@Cpu@gb@emulation@@QAEXPAVEmu@23@@Z ENDP	; emulation::gb::Cpu::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Cpu@gb@emulation@@QAE@XZ PROC			; emulation::gb::Cpu::~Cpu
; _this$ = ecx

; 152  : Cpu::~Cpu() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 
; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Cpu@gb@emulation@@QAE@XZ ENDP			; emulation::gb::Cpu::~Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Cpu@gb@emulation@@QAE@XZ PROC			; emulation::gb::Cpu::Cpu
; _this$ = ecx

; 12   : Cpu::Cpu() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 13   : 	instructions[0x00] = &Cpu::NOP;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ?NOP@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::NOP

; 14   : 
; 15   : 
; 16   : 	instructions[0x01] = &Cpu::LD<RegBC,0,5,12>;

	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$00$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,5,12>

; 17   : 	instructions[0x11] = &Cpu::LD<RegDE,0,5,12>;

	mov	ecx, 4
	imul	ecx, 17					; 00000011H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$01$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,0,5,12>

; 18   : 	instructions[0x21] = &Cpu::LD<RegHL,0,5,12>;

	mov	eax, 4
	imul	eax, 33					; 00000021H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,5,12>

; 19   : 	instructions[0x31] = &Cpu::LD<RegSP,0,5,12>;

	mov	edx, 4
	imul	edx, 49					; 00000031H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$03$0A@$04$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,0,5,12>

; 20   : 
; 21   : 	
; 22   : 	instructions[0x02] = &Cpu::LD<RegBC,RegA,1,8>;

	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$00$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,1,8>

; 23   : 	instructions[0x12] = &Cpu::LD<RegDE,RegA,1,8>;

	mov	eax, 4
	imul	eax, 18					; 00000012H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$01$00$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,1,8>

; 24   : 	instructions[0x22] = &Cpu::LD<RegHL,RegA,6,8>;

	mov	edx, 4
	imul	edx, 34					; 00000022H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$00$05$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,6,8>

; 25   : 	instructions[0x32] = &Cpu::LD<RegHL,RegA,7,8>;

	mov	ecx, 4
	imul	ecx, 50					; 00000032H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$02$00$06$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,7,8>

; 26   : 
; 27   : 	instructions[0x06] = &Cpu::LD<RegB,0,10,8>;

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,10,8>

; 28   : 	instructions[0x16] = &Cpu::LD<RegD,0,10,8>;

	mov	edx, 4
	imul	edx, 22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$04$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,0,10,8>

; 29   : 	instructions[0x26] = &Cpu::LD<RegH,0,10,8>;

	mov	ecx, 4
	imul	ecx, 38					; 00000026H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$06$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,0,10,8>

; 30   : 	instructions[0x36] = &Cpu::LD<RegHL,0,11,12>;

	mov	eax, 4
	imul	eax, 54					; 00000036H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$0A@$0L@$0M@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,0,11,12>

; 31   : 
; 32   : 	instructions[0x0A] = &Cpu::LD<RegA,RegBC,2,8>;

	mov	edx, 4
	imul	edx, 10					; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$00$00$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,2,8>

; 33   : 	instructions[0x1A] = &Cpu::LD<RegA,RegDE,2,8>;

	mov	ecx, 4
	imul	ecx, 26					; 0000001aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$01$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,2,2,8>

; 34   : 	instructions[0x2A] = &Cpu::LD<RegA,RegHL,8,8>;

	mov	eax, 4
	imul	eax, 42					; 0000002aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$00$02$07$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,8,8>

; 35   : 	instructions[0x3A] = &Cpu::LD<RegA,RegHL,9,8>;

	mov	edx, 4
	imul	edx, 58					; 0000003aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$00$02$08$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,9,8>

; 36   : 
; 37   : 	instructions[0x0E] = &Cpu::LD<RegC,0,10,8>;

	mov	ecx, 4
	imul	ecx, 14					; 0000000eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$01$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,0,10,8>

; 38   : 	instructions[0x1E] = &Cpu::LD<RegE,0,10,8>;

	mov	eax, 4
	imul	eax, 30					; 0000001eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$03$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,0,10,8>

; 39   : 	instructions[0x2E] = &Cpu::LD<RegL,0,10,8>;

	mov	edx, 4
	imul	edx, 46					; 0000002eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$05$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,0,10,8>

; 40   : 	instructions[0x3E] = &Cpu::LD<RegA,0,10,8>;

	mov	ecx, 4
	imul	ecx, 62					; 0000003eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$0A@$09$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,0,10,8>

; 41   : 
; 42   : 	instructions[0x40] = &Cpu::LD<RegB,RegB,0,4>;

	mov	eax, 4
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,0,4>

; 43   : 	instructions[0x41] = &Cpu::LD<RegB,RegC,0,4>;

	mov	edx, 4
	imul	edx, 65					; 00000041H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,2,0,4>

; 44   : 	instructions[0x42] = &Cpu::LD<RegB,RegD,0,4>;

	mov	ecx, 4
	imul	ecx, 66					; 00000042H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$02$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,5,0,4>

; 45   : 	instructions[0x43] = &Cpu::LD<RegB,RegE,0,4>;

	mov	eax, 4
	imul	eax, 67					; 00000043H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,4,0,4>

; 46   : 	instructions[0x44] = &Cpu::LD<RegB,RegH,0,4>;

	mov	edx, 4
	imul	edx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,7,0,4>

; 47   : 	instructions[0x45] = &Cpu::LD<RegB,RegL,0,4>;

	mov	ecx, 4
	imul	ecx, 69					; 00000045H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$02$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,6,0,4>

; 48   : 	instructions[0x46] = &Cpu::LD<RegB,RegHL,2,8>;

	mov	eax, 4
	imul	eax, 70					; 00000046H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,2,8>

; 49   : 	instructions[0x47] = &Cpu::LD<RegB,RegA,0,4>;

	mov	edx, 4
	imul	edx, 71					; 00000047H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,0,4>

; 50   : 	instructions[0x48] = &Cpu::LD<RegC,RegB,0,4>;

	mov	ecx, 4
	imul	ecx, 72					; 00000048H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$01$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,3,0,4>

; 51   : 	instructions[0x49] = &Cpu::LD<RegC,RegC,0,4>;

	mov	eax, 4
	imul	eax, 73					; 00000049H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$01$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,2,0,4>

; 52   : 	instructions[0x4A] = &Cpu::LD<RegC,RegD,0,4>;

	mov	edx, 4
	imul	edx, 74					; 0000004aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$01$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,5,0,4>

; 53   : 	instructions[0x4B] = &Cpu::LD<RegC,RegE,0,4>;

	mov	ecx, 4
	imul	ecx, 75					; 0000004bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$01$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,4,0,4>

; 54   : 	instructions[0x4C] = &Cpu::LD<RegC,RegH,0,4>;

	mov	eax, 4
	imul	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$01$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,7,0,4>

; 55   : 	instructions[0x4D] = &Cpu::LD<RegC,RegL,0,4>;

	mov	edx, 4
	imul	edx, 77					; 0000004dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$01$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,6,0,4>

; 56   : 	instructions[0x4E] = &Cpu::LD<RegC,RegHL,2,8>;

	mov	ecx, 4
	imul	ecx, 78					; 0000004eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$01$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,3,2,8>

; 57   : 	instructions[0x4F] = &Cpu::LD<RegC,RegA,0,4>;

	mov	eax, 4
	imul	eax, 79					; 0000004fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$01$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,0,4>

; 58   : 
; 59   : 	instructions[0x50] = &Cpu::LD<RegD,RegB,0,4>;

	mov	edx, 4
	imul	edx, 80					; 00000050H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$04$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,3,0,4>

; 60   : 	instructions[0x51] = &Cpu::LD<RegD,RegC,0,4>;

	mov	ecx, 4
	imul	ecx, 81					; 00000051H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$04$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,2,0,4>

; 61   : 	instructions[0x52] = &Cpu::LD<RegD,RegD,0,4>;

	mov	eax, 4
	imul	eax, 82					; 00000052H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$04$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,5,0,4>

; 62   : 	instructions[0x53] = &Cpu::LD<RegD,RegE,0,4>;

	mov	edx, 4
	imul	edx, 83					; 00000053H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$04$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,4,0,4>

; 63   : 	instructions[0x54] = &Cpu::LD<RegD,RegH,0,4>;

	mov	ecx, 4
	imul	ecx, 84					; 00000054H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$04$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,7,0,4>

; 64   : 	instructions[0x55] = &Cpu::LD<RegD,RegL,0,4>;

	mov	eax, 4
	imul	eax, 85					; 00000055H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$04$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,6,0,4>

; 65   : 	instructions[0x56] = &Cpu::LD<RegD,RegHL,2,8>;

	mov	edx, 4
	imul	edx, 86					; 00000056H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$04$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,3,2,8>

; 66   : 	instructions[0x57] = &Cpu::LD<RegD,RegA,0,4>;

	mov	ecx, 4
	imul	ecx, 87					; 00000057H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$04$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<5,1,0,4>

; 67   : 	instructions[0x58] = &Cpu::LD<RegE,RegB,0,4>;

	mov	eax, 4
	imul	eax, 88					; 00000058H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$03$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,3,0,4>

; 68   : 	instructions[0x59] = &Cpu::LD<RegE,RegC,0,4>;

	mov	edx, 4
	imul	edx, 89					; 00000059H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$03$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,2,0,4>

; 69   : 	instructions[0x5A] = &Cpu::LD<RegE,RegD,0,4>;

	mov	ecx, 4
	imul	ecx, 90					; 0000005aH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$03$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,5,0,4>

; 70   : 	instructions[0x5B] = &Cpu::LD<RegE,RegE,0,4>;

	mov	eax, 4
	imul	eax, 91					; 0000005bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$03$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,4,0,4>

; 71   : 	instructions[0x5C] = &Cpu::LD<RegE,RegH,0,4>;

	mov	edx, 4
	imul	edx, 92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$03$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,7,0,4>

; 72   : 	instructions[0x5D] = &Cpu::LD<RegE,RegL,0,4>;

	mov	ecx, 4
	imul	ecx, 93					; 0000005dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$03$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,6,0,4>

; 73   : 	instructions[0x5E] = &Cpu::LD<RegE,RegHL,2,8>;

	mov	eax, 4
	imul	eax, 94					; 0000005eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$03$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,3,2,8>

; 74   : 	instructions[0x5F] = &Cpu::LD<RegE,RegA,0,4>;

	mov	edx, 4
	imul	edx, 95					; 0000005fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$03$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<4,1,0,4>

; 75   : 
; 76   : 	instructions[0x60] = &Cpu::LD<RegH,RegB,0,4>;

	mov	ecx, 4
	imul	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$06$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,3,0,4>

; 77   : 	instructions[0x61] = &Cpu::LD<RegH,RegC,0,4>;

	mov	eax, 4
	imul	eax, 97					; 00000061H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$06$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,2,0,4>

; 78   : 	instructions[0x62] = &Cpu::LD<RegH,RegD,0,4>;

	mov	edx, 4
	imul	edx, 98					; 00000062H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$06$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,5,0,4>

; 79   : 	instructions[0x63] = &Cpu::LD<RegH,RegE,0,4>;

	mov	ecx, 4
	imul	ecx, 99					; 00000063H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$06$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,4,0,4>

; 80   : 	instructions[0x64] = &Cpu::LD<RegH,RegH,0,4>;

	mov	eax, 4
	imul	eax, 100				; 00000064H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$06$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,7,0,4>

; 81   : 	instructions[0x65] = &Cpu::LD<RegH,RegL,0,4>;

	mov	edx, 4
	imul	edx, 101				; 00000065H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$06$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,6,0,4>

; 82   : 	instructions[0x66] = &Cpu::LD<RegH,RegHL,2,8>;

	mov	ecx, 4
	imul	ecx, 102				; 00000066H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$06$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,3,2,8>

; 83   : 	instructions[0x67] = &Cpu::LD<RegH,RegA,0,4>;

	mov	eax, 4
	imul	eax, 103				; 00000067H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$06$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<7,1,0,4>

; 84   : 	instructions[0x68] = &Cpu::LD<RegL,RegB,0,4>;

	mov	edx, 4
	imul	edx, 104				; 00000068H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$05$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,3,0,4>

; 85   : 	instructions[0x69] = &Cpu::LD<RegL,RegC,0,4>;

	mov	ecx, 4
	imul	ecx, 105				; 00000069H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$05$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,2,0,4>

; 86   : 	instructions[0x6A] = &Cpu::LD<RegL,RegD,0,4>;

	mov	eax, 4
	imul	eax, 106				; 0000006aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$05$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,5,0,4>

; 87   : 	instructions[0x6B] = &Cpu::LD<RegL,RegE,0,4>;

	mov	edx, 4
	imul	edx, 107				; 0000006bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$05$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,4,0,4>

; 88   : 	instructions[0x6C] = &Cpu::LD<RegL,RegH,0,4>;

	mov	ecx, 4
	imul	ecx, 108				; 0000006cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$05$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,7,0,4>

; 89   : 	instructions[0x6D] = &Cpu::LD<RegL,RegL,0,4>;

	mov	eax, 4
	imul	eax, 109				; 0000006dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$05$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,6,0,4>

; 90   : 	instructions[0x6E] = &Cpu::LD<RegL,RegHL,2,8>;

	mov	edx, 4
	imul	edx, 110				; 0000006eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$05$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,3,2,8>

; 91   : 	instructions[0x6F] = &Cpu::LD<RegL,RegA,0,4>;

	mov	ecx, 4
	imul	ecx, 111				; 0000006fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$05$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<6,1,0,4>

; 92   : 
; 93   : 	instructions[0x70] = &Cpu::LD<RegHL,RegB,1,8>;

	mov	eax, 4
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$02$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,3,1,8>

; 94   : 	instructions[0x71] = &Cpu::LD<RegHL,RegC,1,8>;

	mov	edx, 4
	imul	edx, 113				; 00000071H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$01$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,2,1,8>

; 95   : 	instructions[0x72] = &Cpu::LD<RegHL,RegD,1,8>;

	mov	ecx, 4
	imul	ecx, 114				; 00000072H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$02$04$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,5,1,8>

; 96   : 	instructions[0x73] = &Cpu::LD<RegHL,RegE,1,8>;

	mov	eax, 4
	imul	eax, 115				; 00000073H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$02$03$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,4,1,8>

; 97   : 	instructions[0x74] = &Cpu::LD<RegHL,RegH,1,8>;

	mov	edx, 4
	imul	edx, 116				; 00000074H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$06$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,7,1,8>

; 98   : 	instructions[0x75] = &Cpu::LD<RegHL,RegL,1,8>;

	mov	ecx, 4
	imul	ecx, 117				; 00000075H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$02$05$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,6,1,8>

; 99   : 	instructions[0x76] = &Cpu::HALT;

	mov	eax, 4
	imul	eax, 118				; 00000076H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ?HALT@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::HALT

; 100  : 	instructions[0x77] = &Cpu::LD<RegHL,RegA,1,8>;

	mov	edx, 4
	imul	edx, 119				; 00000077H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$02$00$00$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<3,1,1,8>

; 101  : 	instructions[0x78] = &Cpu::LD<RegA,RegB,0,4>;

	mov	ecx, 4
	imul	ecx, 120				; 00000078H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$02$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,0,4>

; 102  : 	instructions[0x79] = &Cpu::LD<RegA,RegC,0,4>;

	mov	eax, 4
	imul	eax, 121				; 00000079H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$00$01$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,2,0,4>

; 103  : 	instructions[0x7A] = &Cpu::LD<RegA,RegD,0,4>;

	mov	edx, 4
	imul	edx, 122				; 0000007aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$00$04$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,5,0,4>

; 104  : 	instructions[0x7B] = &Cpu::LD<RegA,RegE,0,4>;

	mov	ecx, 4
	imul	ecx, 123				; 0000007bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$03$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,4,0,4>

; 105  : 	instructions[0x7C] = &Cpu::LD<RegA,RegH,0,4>;

	mov	eax, 4
	imul	eax, 124				; 0000007cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$00$06$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,7,0,4>

; 106  : 	instructions[0x7D] = &Cpu::LD<RegA,RegL,0,4>;

	mov	edx, 4
	imul	edx, 125				; 0000007dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$00$05$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,6,0,4>

; 107  : 	instructions[0x7E] = &Cpu::LD<RegA,RegHL,2,8>;

	mov	ecx, 4
	imul	ecx, 126				; 0000007eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$LD@$00$02$01$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,3,2,8>

; 108  : 	instructions[0x7F] = &Cpu::LD<RegA,RegA,0,4>;

	mov	eax, 4
	imul	eax, 127				; 0000007fH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$LD@$00$00$0A@$03@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<1,1,0,4>

; 109  : 
; 110  : 	instructions[0xE2] = &Cpu::LD<RegC,RegA,3,8>;

	mov	edx, 4
	imul	edx, 226				; 000000e2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$LD@$01$00$02$07@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::LD<2,1,3,8>

; 111  : 
; 112  : 	instructions[0x80] = &Cpu::ADD<RegA,RegB,0>;

	mov	ecx, 4
	shl	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$ADD@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,3,0>

; 113  : 	instructions[0x81] = &Cpu::ADD<RegA,RegC,0>;

	mov	eax, 4
	imul	eax, 129				; 00000081H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$ADD@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,2,0>

; 114  : 	instructions[0x82] = &Cpu::ADD<RegA,RegD,0>;

	mov	edx, 4
	imul	edx, 130				; 00000082H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$ADD@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,5,0>

; 115  : 	instructions[0x83] = &Cpu::ADD<RegA,RegE,0>;

	mov	ecx, 4
	imul	ecx, 131				; 00000083H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$ADD@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,4,0>

; 116  : 	instructions[0x84] = &Cpu::ADD<RegA,RegH,0>;

	mov	eax, 4
	imul	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$ADD@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,7,0>

; 117  : 	instructions[0x85] = &Cpu::ADD<RegA,RegL,0>;

	mov	edx, 4
	imul	edx, 133				; 00000085H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$ADD@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,6,0>

; 118  : 	instructions[0x86] = &Cpu::ADD<RegA,RegHL,1>;

	mov	ecx, 4
	imul	ecx, 134				; 00000086H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$ADD@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,3,1>

; 119  : 	instructions[0x87] = &Cpu::ADD<RegA,RegA,0>;

	mov	eax, 4
	imul	eax, 135				; 00000087H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$ADD@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::ADD<1,1,0>

; 120  : 
; 121  : 	instructions[0xA0] = &Cpu::AND<RegA,RegB,0>;

	mov	edx, 4
	imul	edx, 160				; 000000a0H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$AND@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,3,0>

; 122  : 	instructions[0xA1] = &Cpu::AND<RegA,RegC,0>;

	mov	ecx, 4
	imul	ecx, 161				; 000000a1H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$AND@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,2,0>

; 123  : 	instructions[0xA2] = &Cpu::AND<RegA,RegD,0>;

	mov	eax, 4
	imul	eax, 162				; 000000a2H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$AND@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,5,0>

; 124  : 	instructions[0xA3] = &Cpu::AND<RegA,RegE,0>;

	mov	edx, 4
	imul	edx, 163				; 000000a3H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$AND@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,4,0>

; 125  : 	instructions[0xA4] = &Cpu::AND<RegA,RegH,0>;

	mov	ecx, 4
	imul	ecx, 164				; 000000a4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$AND@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,7,0>

; 126  : 	instructions[0xA5] = &Cpu::AND<RegA,RegL,0>;

	mov	eax, 4
	imul	eax, 165				; 000000a5H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$AND@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,6,0>

; 127  : 	instructions[0xA6] = &Cpu::AND<RegA,RegHL,1>;

	mov	edx, 4
	imul	edx, 166				; 000000a6H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$AND@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,3,1>

; 128  : 	instructions[0xA7] = &Cpu::AND<RegA,RegA,0>;

	mov	ecx, 4
	imul	ecx, 167				; 000000a7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$AND@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::AND<1,1,0>

; 129  : 	instructions[0xA8] = &Cpu::XOR<RegA,RegB,0>;

	mov	eax, 4
	imul	eax, 168				; 000000a8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$XOR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,3,0>

; 130  : 	instructions[0xA9] = &Cpu::XOR<RegA,RegC,0>;

	mov	edx, 4
	imul	edx, 169				; 000000a9H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$XOR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,2,0>

; 131  : 	instructions[0xAA] = &Cpu::XOR<RegA,RegD,0>;

	mov	ecx, 4
	imul	ecx, 170				; 000000aaH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$XOR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,5,0>

; 132  : 	instructions[0xAB] = &Cpu::XOR<RegA,RegE,0>;

	mov	eax, 4
	imul	eax, 171				; 000000abH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$XOR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,4,0>

; 133  : 	instructions[0xAC] = &Cpu::XOR<RegA,RegH,0>;

	mov	edx, 4
	imul	edx, 172				; 000000acH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$XOR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,7,0>

; 134  : 	instructions[0xAD] = &Cpu::XOR<RegA,RegL,0>;

	mov	ecx, 4
	imul	ecx, 173				; 000000adH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$XOR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,6,0>

; 135  : 	instructions[0xAE] = &Cpu::XOR<RegA,RegHL,1>;

	mov	eax, 4
	imul	eax, 174				; 000000aeH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$XOR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,3,1>

; 136  : 	instructions[0xAF] = &Cpu::XOR<RegA,RegA,0>;

	mov	edx, 4
	imul	edx, 175				; 000000afH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$XOR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::XOR<1,1,0>

; 137  : 
; 138  : 	instructions[0xB0] = &Cpu::OR<RegA,RegB,0>;

	mov	ecx, 4
	imul	ecx, 176				; 000000b0H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$OR@$00$02$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,3,0>

; 139  : 	instructions[0xB1] = &Cpu::OR<RegA,RegC,0>;

	mov	eax, 4
	imul	eax, 177				; 000000b1H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$OR@$00$01$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,2,0>

; 140  : 	instructions[0xB2] = &Cpu::OR<RegA,RegD,0>;

	mov	edx, 4
	imul	edx, 178				; 000000b2H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$OR@$00$04$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,5,0>

; 141  : 	instructions[0xB3] = &Cpu::OR<RegA,RegE,0>;

	mov	ecx, 4
	imul	ecx, 179				; 000000b3H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$OR@$00$03$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,4,0>

; 142  : 	instructions[0xB4] = &Cpu::OR<RegA,RegH,0>;

	mov	eax, 4
	imul	eax, 180				; 000000b4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$OR@$00$06$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,7,0>

; 143  : 	instructions[0xB5] = &Cpu::OR<RegA,RegL,0>;

	mov	edx, 4
	imul	edx, 181				; 000000b5H
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ??$OR@$00$05$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,6,0>

; 144  : 	instructions[0xB6] = &Cpu::OR<RegA,RegHL,1>;

	mov	ecx, 4
	imul	ecx, 182				; 000000b6H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+16], OFFSET ??$OR@$00$02$00@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,3,1>

; 145  : 	instructions[0xB7] = &Cpu::OR<RegA,RegA,0>;

	mov	eax, 4
	imul	eax, 183				; 000000b7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax+16], OFFSET ??$OR@$00$00$0A@@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::OR<1,1,0>

; 146  : 
; 147  : 	instructions[0xCB] = &Cpu::PREFIX_CB;

	mov	edx, 4
	imul	edx, 203				; 000000cbH
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+edx+16], OFFSET ?PREFIX_CB@Cpu@gb@emulation@@AAEXXZ ; emulation::gb::Cpu::PREFIX_CB

; 148  : 	
; 149  : 
; 150  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Cpu@gb@emulation@@QAE@XZ ENDP			; emulation::gb::Cpu::Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_emu$ = 8						; size = 4
?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z PROC ; emulation::gb::Component::Initialize, COMDAT
; _this$ = ecx

; 24   :   void Initialize(Emu* emu) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 25   :     emu_ = emu;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _emu$[ebp]
	mov	DWORD PTR [eax], ecx

; 26   :   }

	mov	esp, ebp
	pop	ebp
	ret	4
?Initialize@Component@gb@emulation@@QAEXPAVEmu@23@@Z ENDP ; emulation::gb::Component::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Ignore@std@@QAE@XZ PROC				; std::_Ignore::_Ignore, COMDAT
; _this$ = ecx

; 120  : 	_Ignore()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 		{	// construct
; 122  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Ignore@std@@QAE@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END

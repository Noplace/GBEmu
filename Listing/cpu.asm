; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	ConcRT_ProviderGuid
PUBLIC	ConcRTEventGuid
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	SchedulerEventGuid
PUBLIC	ScheduleGroupEventGuid
PUBLIC	ContextEventGuid
PUBLIC	ChoreEventGuid
PUBLIC	VirtualProcessorEventGuid
PUBLIC	LockEventGuid
PUBLIC	ResourceManagerEventGuid
PUBLIC	PPLParallelInvokeEventGuid
PUBLIC	PPLParallelForEventGuid
PUBLIC	PPLParallelForeachEventGuid
PUBLIC	AgentEventGuid
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?value@?$integral_constant@_K$0A@@std@@2_KB	; std::integral_constant<unsigned __int64,0>::value
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
PUBLIC	?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
PUBLIC	?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
PUBLIC	?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
PUBLIC	?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_nonNull
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB ; Concurrency::details::_TaskCollectionBase::_S_cancelException
PUBLIC	?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_notInlined
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_structured
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_localCancel
PUBLIC	?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB ; Concurrency::details::_TaskCollectionBase::_S_reserved
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_reserved@_TaskCollectionBase@details@Concurrency@@1HB DD 0cH ; Concurrency::details::_TaskCollectionBase::_S_reserved
CONST	ENDS
;	COMDAT ?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_localCancel@_TaskCollectionBase@details@Concurrency@@1HB DD 02H ; Concurrency::details::_TaskCollectionBase::_S_localCancel
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_structured@_TaskCollectionBase@details@Concurrency@@1HB DD 01H ; Concurrency::details::_TaskCollectionBase::_S_structured
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB
CONST	SEGMENT
?_S_notInlined@_TaskCollectionBase@details@Concurrency@@1HB DD 0ffffffffH ; Concurrency::details::_TaskCollectionBase::_S_notInlined
CONST	ENDS
;	COMDAT ?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelException@_TaskCollectionBase@details@Concurrency@@1_KB DQ 000000000000000cH ; Concurrency::details::_TaskCollectionBase::_S_cancelException
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_nonNull@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000008H ; Concurrency::details::_TaskCollectionBase::_S_nonNull
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelShotdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelShotdownOwner
CONST	ENDS
;	COMDAT ?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelDeferredShootdownOwner@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000002H ; Concurrency::details::_TaskCollectionBase::_S_cancelDeferredShootdownOwner
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelStarted@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000001H ; Concurrency::details::_TaskCollectionBase::_S_cancelStarted
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelNone@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000000H ; Concurrency::details::_TaskCollectionBase::_S_cancelNone
CONST	ENDS
;	COMDAT ?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB
CONST	SEGMENT
?_S_cancelBitsMask@_TaskCollectionBase@details@Concurrency@@1_KB DQ 0000000000000003H ; Concurrency::details::_TaskCollectionBase::_S_cancelBitsMask
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000000H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CALLED@_CancellationTokenRegistration@details@Concurrency@@0JB DD 03H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CALLED
CONST	ENDS
;	COMDAT ?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_SYNCHRONIZE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 02H ; Concurrency::details::_CancellationTokenRegistration::_STATE_SYNCHRONIZE
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_DEFER_DELETE@_CancellationTokenRegistration@details@Concurrency@@0JB DD 01H ; Concurrency::details::_CancellationTokenRegistration::_STATE_DEFER_DELETE
CONST	ENDS
;	COMDAT ?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB
CONST	SEGMENT
?_STATE_CLEAR@_CancellationTokenRegistration@details@Concurrency@@0JB DD 00H ; Concurrency::details::_CancellationTokenRegistration::_STATE_CLEAR
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_K$0A@@std@@2_KB
CONST	SEGMENT
?value@?$integral_constant@_K$0A@@std@@2_KB DQ 0000000000000000H ; std::integral_constant<unsigned __int64,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT AgentEventGuid
CONST	SEGMENT
AgentEventGuid DD 0b9b5b78cH
	DW	0713H
	DW	04898H
	DB	0a2H
	DB	01aH
	DB	0c6H
	DB	079H
	DB	049H
	DB	0dcH
	DB	0edH
	DB	07H
CONST	ENDS
;	COMDAT PPLParallelForeachEventGuid
CONST	SEGMENT
PPLParallelForeachEventGuid DD 05cb7d785H
	DW	09d66H
	DW	0465dH
	DB	0baH
	DB	0e1H
	DB	046H
	DB	011H
	DB	06H
	DB	01bH
	DB	054H
	DB	034H
CONST	ENDS
;	COMDAT PPLParallelForEventGuid
CONST	SEGMENT
PPLParallelForEventGuid DD 031c8da6bH
	DW	06165H
	DW	04042H
	DB	08bH
	DB	092H
	DB	094H
	DB	09eH
	DB	031H
	DB	05fH
	DB	04dH
	DB	084H
CONST	ENDS
;	COMDAT PPLParallelInvokeEventGuid
CONST	SEGMENT
PPLParallelInvokeEventGuid DD 0d1b5b133H
	DW	0ec3dH
	DW	049f4H
	DB	098H
	DB	0a3H
	DB	046H
	DB	04dH
	DB	01aH
	DB	09eH
	DB	046H
	DB	082H
CONST	ENDS
;	COMDAT ResourceManagerEventGuid
CONST	SEGMENT
ResourceManagerEventGuid DD 02718d25bH
	DW	05bf5H
	DW	04479H
	DB	08eH
	DB	088H
	DB	0baH
	DB	0bcH
	DB	064H
	DB	0bdH
	DB	0bfH
	DB	0caH
CONST	ENDS
;	COMDAT LockEventGuid
CONST	SEGMENT
LockEventGuid DD 079a60dc6H
	DW	05fc8H
	DW	04952H
	DB	0a4H
	DB	01cH
	DB	011H
	DB	063H
	DB	0aeH
	DB	0ecH
	DB	05eH
	DB	0b8H
CONST	ENDS
;	COMDAT VirtualProcessorEventGuid
CONST	SEGMENT
VirtualProcessorEventGuid DD 02f27805fH
	DW	01676H
	DW	04eccH
	DB	096H
	DB	0faH
	DB	07eH
	DB	0b0H
	DB	09dH
	DB	044H
	DB	030H
	DB	02fH
CONST	ENDS
;	COMDAT ChoreEventGuid
CONST	SEGMENT
ChoreEventGuid DD 07e854ec7H
	DW	0cdc4H
	DW	0405aH
	DB	0b5H
	DB	0b2H
	DB	0aaH
	DB	0f7H
	DB	0c9H
	DB	0e7H
	DB	0d4H
	DB	0cH
CONST	ENDS
;	COMDAT ContextEventGuid
CONST	SEGMENT
ContextEventGuid DD 05727a00fH
	DW	050beH
	DW	04519H
	DB	082H
	DB	056H
	DB	0f7H
	DB	069H
	DB	098H
	DB	071H
	DB	0feH
	DB	0cbH
CONST	ENDS
;	COMDAT ScheduleGroupEventGuid
CONST	SEGMENT
ScheduleGroupEventGuid DD 0e8a3bf1fH
	DW	0a86bH
	DW	04390H
	DB	09cH
	DB	060H
	DB	053H
	DB	090H
	DB	0b9H
	DB	069H
	DB	0d2H
	DB	02cH
CONST	ENDS
;	COMDAT SchedulerEventGuid
CONST	SEGMENT
SchedulerEventGuid DD 0e2091f8aH
	DW	01e0aH
	DW	04731H
	DB	084H
	DB	0a2H
	DB	0dH
	DB	0d5H
	DB	07cH
	DB	08aH
	DB	052H
	DB	061H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ConcRTEventGuid
CONST	SEGMENT
ConcRTEventGuid DD 072b14a7dH
	DW	0704cH
	DW	0423eH
	DB	092H
	DB	0f8H
	DB	07eH
	DB	06dH
	DB	064H
	DB	0bcH
	DB	0b9H
	DB	02aH
CONST	ENDS
;	COMDAT ConcRT_ProviderGuid
CONST	SEGMENT
ConcRT_ProviderGuid DD 0f7b697a3H
	DW	04db5H
	DW	04d3bH
	DB	0beH
	DB	071H
	DB	0c4H
	DB	0d2H
	DB	084H
	DB	0e6H
	DB	059H
	DB	02fH
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000001H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
CONST	SEGMENT
dutycycletable DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
reg_index DD	03H
	DD	02H
	DD	05H
	DD	04H
	DD	07H
	DD	06H
	DD	07H
	DD	01H
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
PUBLIC	??0_Ignore@std@@QEAA@XZ				; std::_Ignore::_Ignore
PUBLIC	?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Component::Initialize
PUBLIC	?Deinitialize@Component@gb@emulation@@UEAAXXZ	; emulation::gb::Component::Deinitialize
PUBLIC	?Reset@Component@gb@emulation@@UEAAXXZ		; emulation::gb::Component::Reset
PUBLIC	??0Component@gb@emulation@@QEAA@XZ		; emulation::gb::Component::Component
PUBLIC	?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_enable
PUBLIC	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ	; emulation::gb::Memory::interrupt_flag
PUBLIC	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
PUBLIC	??0Cpu@gb@emulation@@QEAA@XZ			; emulation::gb::Cpu::Cpu
PUBLIC	??1Cpu@gb@emulation@@QEAA@XZ			; emulation::gb::Cpu::~Cpu
PUBLIC	?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Cpu::Initialize
PUBLIC	?Deinitialize@Cpu@gb@emulation@@UEAAXXZ		; emulation::gb::Cpu::Deinitialize
PUBLIC	?Reset@Cpu@gb@emulation@@UEAAXXZ		; emulation::gb::Cpu::Reset
PUBLIC	?Tick@Cpu@gb@emulation@@QEAAXXZ			; emulation::gb::Cpu::Tick
PUBLIC	?Step@Cpu@gb@emulation@@QEAAXN@Z		; emulation::gb::Cpu::Step
PUBLIC	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::simulateSpriteBug
PUBLIC	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z	; emulation::gb::Cpu::updateCpuFlagC
PUBLIC	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z	; emulation::gb::Cpu::updateCpuFlagH
PUBLIC	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::updateCpuFlagZ
PUBLIC	?push@Cpu@gb@emulation@@AEAAXE@Z		; emulation::gb::Cpu::push
PUBLIC	?pop@Cpu@gb@emulation@@AEAAEXZ			; emulation::gb::Cpu::pop
PUBLIC	?pushPC@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::pushPC
PUBLIC	?NOP@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::NOP
PUBLIC	?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::ILLEGAL
PUBLIC	?RST@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RST
PUBLIC	?LDSPHL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDSPHL
PUBLIC	?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDHLSPr8
PUBLIC	?LDa16SP@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDa16SP
PUBLIC	?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::ADD_SPr8
PUBLIC	?SCF@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::SCF
PUBLIC	?CCF@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::CCF
PUBLIC	?HALT@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::HALT
PUBLIC	?STOP@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::STOP
PUBLIC	?CPL@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::CPL
PUBLIC	?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::PREFIX_CB
PUBLIC	?JR@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::JR
PUBLIC	?JP@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::JP
PUBLIC	?JP_HL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JP_HL
PUBLIC	?CALL@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::CALL
PUBLIC	?RET@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RET
PUBLIC	?RLCA@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RLCA
PUBLIC	?RRCA@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RRCA
PUBLIC	?RLA@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RLA
PUBLIC	?RRA@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RRA
PUBLIC	?CP@Cpu@gb@emulation@@AEAAXEE@Z			; emulation::gb::Cpu::CP
PUBLIC	?CP_d8@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_d8
PUBLIC	?CP_HL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_HL
PUBLIC	?DI@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::DI
PUBLIC	?EI@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::EI
PUBLIC	?RETI@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::RETI
PUBLIC	?DAA@Cpu@gb@emulation@@AEAAXXZ			; emulation::gb::Cpu::DAA
PUBLIC	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
PUBLIC	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ	; emulation::gb::Emu::memory
PUBLIC	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
PUBLIC	?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ; emulation::gb::Emu::sc
PUBLIC	?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ	; emulation::gb::Emu::timer
PUBLIC	??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDrd16<1>
PUBLIC	??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<1,1>
PUBLIC	??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_16bit<1>
PUBLIC	??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<3,0>
PUBLIC	??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<3,0>
PUBLIC	??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<3,0,10>
PUBLIC	??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD_16bit<3,1>
PUBLIC	??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<1,1>
PUBLIC	??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_16bit<1>
PUBLIC	??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<2,0>
PUBLIC	??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<2,0>
PUBLIC	??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<2,0,10>
PUBLIC	??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDrd16<2>
PUBLIC	??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<2,1>
PUBLIC	??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_16bit<2>
PUBLIC	??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<5,0>
PUBLIC	??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<5,0>
PUBLIC	??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<5,0,10>
PUBLIC	??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD_16bit<3,2>
PUBLIC	??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<1,2>
PUBLIC	??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_16bit<2>
PUBLIC	??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<4,0>
PUBLIC	??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<4,0>
PUBLIC	??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<4,0,10>
PUBLIC	??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JR_cc<7,1>
PUBLIC	??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDrd16<3>
PUBLIC	??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDI$regreg<3,1>
PUBLIC	??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_16bit<3>
PUBLIC	??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<7,0>
PUBLIC	??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<7,0>
PUBLIC	??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<7,0,10>
PUBLIC	??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JR_cc<7,0>
PUBLIC	??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD_16bit<3,3>
PUBLIC	??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDIreg$reg<1,3>
PUBLIC	??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_16bit<3>
PUBLIC	??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<6,0>
PUBLIC	??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<6,0>
PUBLIC	??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<6,0,10>
PUBLIC	??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JR_cc<4,1>
PUBLIC	??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::LDrd16<4>
PUBLIC	??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDD$regreg<3,1>
PUBLIC	??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_16bit<4>
PUBLIC	??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<3,1>
PUBLIC	??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<3,1>
PUBLIC	??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<3,0,11>
PUBLIC	??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JR_cc<4,0>
PUBLIC	??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD_16bit<3,4>
PUBLIC	??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDDreg$reg<1,3>
PUBLIC	??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_16bit<4>
PUBLIC	??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::INC_8bit<1,0>
PUBLIC	??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::DEC_8bit<1,0>
PUBLIC	??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<1,0,10>
PUBLIC	??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,3>
PUBLIC	??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,2>
PUBLIC	??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,5>
PUBLIC	??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,4>
PUBLIC	??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,7>
PUBLIC	??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,6>
PUBLIC	??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<3,3>
PUBLIC	??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<3,1>
PUBLIC	??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,3>
PUBLIC	??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,2>
PUBLIC	??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,5>
PUBLIC	??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,4>
PUBLIC	??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,7>
PUBLIC	??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,6>
PUBLIC	??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<2,3>
PUBLIC	??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<2,1>
PUBLIC	??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,3>
PUBLIC	??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,2>
PUBLIC	??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,5>
PUBLIC	??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,4>
PUBLIC	??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,7>
PUBLIC	??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,6>
PUBLIC	??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<5,3>
PUBLIC	??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<5,1>
PUBLIC	??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,3>
PUBLIC	??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,2>
PUBLIC	??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,5>
PUBLIC	??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,4>
PUBLIC	??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,7>
PUBLIC	??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,6>
PUBLIC	??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<4,3>
PUBLIC	??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<4,1>
PUBLIC	??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,3>
PUBLIC	??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,2>
PUBLIC	??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,5>
PUBLIC	??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,4>
PUBLIC	??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,7>
PUBLIC	??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,6>
PUBLIC	??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<7,3>
PUBLIC	??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<7,1>
PUBLIC	??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,3>
PUBLIC	??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,2>
PUBLIC	??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,5>
PUBLIC	??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,4>
PUBLIC	??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,7>
PUBLIC	??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,6>
PUBLIC	??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<6,3>
PUBLIC	??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<6,1>
PUBLIC	??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,3>
PUBLIC	??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,2>
PUBLIC	??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,5>
PUBLIC	??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,4>
PUBLIC	??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,7>
PUBLIC	??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,6>
PUBLIC	??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$rr<3,1>
PUBLIC	??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,3>
PUBLIC	??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,2>
PUBLIC	??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,5>
PUBLIC	??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,4>
PUBLIC	??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,7>
PUBLIC	??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,6>
PUBLIC	??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$r<1,3>
PUBLIC	??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDrr<1,1>
PUBLIC	??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,3,0>
PUBLIC	??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,2,0>
PUBLIC	??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,5,0>
PUBLIC	??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,4,0>
PUBLIC	??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,7,0>
PUBLIC	??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,6,0>
PUBLIC	??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,3,1>
PUBLIC	??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,1,0>
PUBLIC	??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,3,0>
PUBLIC	??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,2,0>
PUBLIC	??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,5,0>
PUBLIC	??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,4,0>
PUBLIC	??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,7,0>
PUBLIC	??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,6,0>
PUBLIC	??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,3,1>
PUBLIC	??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,1,0>
PUBLIC	??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,3,0>
PUBLIC	??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,2,0>
PUBLIC	??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,5,0>
PUBLIC	??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,4,0>
PUBLIC	??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,7,0>
PUBLIC	??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,6,0>
PUBLIC	??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,3,1>
PUBLIC	??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,1,0>
PUBLIC	??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,3,0>
PUBLIC	??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,2,0>
PUBLIC	??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,5,0>
PUBLIC	??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,4,0>
PUBLIC	??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,7,0>
PUBLIC	??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,6,0>
PUBLIC	??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,3,1>
PUBLIC	??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,1,0>
PUBLIC	??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,3,0>
PUBLIC	??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,2,0>
PUBLIC	??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,5,0>
PUBLIC	??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,4,0>
PUBLIC	??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,7,0>
PUBLIC	??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,6,0>
PUBLIC	??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,3,1>
PUBLIC	??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,1,0>
PUBLIC	??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,3,0>
PUBLIC	??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,2,0>
PUBLIC	??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,5,0>
PUBLIC	??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,4,0>
PUBLIC	??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,7,0>
PUBLIC	??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,6,0>
PUBLIC	??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,3,1>
PUBLIC	??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,1,0>
PUBLIC	??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,3,0>
PUBLIC	??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,2,0>
PUBLIC	??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,5,0>
PUBLIC	??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,4,0>
PUBLIC	??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,7,0>
PUBLIC	??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,6,0>
PUBLIC	??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,3,1>
PUBLIC	??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,1,0>
PUBLIC	??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<3>
PUBLIC	??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<2>
PUBLIC	??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<5>
PUBLIC	??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<4>
PUBLIC	??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<7>
PUBLIC	??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<6>
PUBLIC	??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CP_reg<1>
PUBLIC	??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::RET_cc<7,1>
PUBLIC	??$POP@$00@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::POP<1>
PUBLIC	??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JP_cc<7,1>
PUBLIC	??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::CALL_cc<7,1>
PUBLIC	??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::PUSH<1>
PUBLIC	??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADD<1,0,2>
PUBLIC	??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::RET_cc<7,0>
PUBLIC	??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JP_cc<7,0>
PUBLIC	??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::CALL_cc<7,0>
PUBLIC	??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::ADC<1,0,2>
PUBLIC	??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::RET_cc<4,1>
PUBLIC	??$POP@$01@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::POP<2>
PUBLIC	??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JP_cc<4,1>
PUBLIC	??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::CALL_cc<4,1>
PUBLIC	??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::PUSH<2>
PUBLIC	??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SUB<1,0,2>
PUBLIC	??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::RET_cc<4,0>
PUBLIC	??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::JP_cc<4,0>
PUBLIC	??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::CALL_cc<4,0>
PUBLIC	??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::SBC<1,0,2>
PUBLIC	??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<0,1,12>
PUBLIC	??$POP@$02@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::POP<3>
PUBLIC	??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD$FF00rr<2,1>
PUBLIC	??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::PUSH<3>
PUBLIC	??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::AND<1,0,2>
PUBLIC	??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<0,1,14>
PUBLIC	??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::XOR<1,0,2>
PUBLIC	??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<1,0,13>
PUBLIC	??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::POP<0>
PUBLIC	??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LDr$FF00r<1,2>
PUBLIC	??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::PUSH<0>
PUBLIC	??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::OR<1,0,2>
PUBLIC	??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::LD<1,0,15>
PUBLIC	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>
PUBLIC	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>
PUBLIC	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>
PUBLIC	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>
PUBLIC	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>
PUBLIC	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>
PUBLIC	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>
PUBLIC	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>
PUBLIC	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>
PUBLIC	??_7Component@gb@emulation@@6B@			; emulation::gb::Component::`vftable'
PUBLIC	??_7Cpu@gb@emulation@@6B@			; emulation::gb::Cpu::`vftable'
PUBLIC	??_R1A@?0A@EA@Component@gb@emulation@@8		; emulation::gb::Component::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVComponent@gb@emulation@@@8		; emulation::gb::Component `RTTI Type Descriptor'
PUBLIC	??_R3Component@gb@emulation@@8			; emulation::gb::Component::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Component@gb@emulation@@8			; emulation::gb::Component::`RTTI Base Class Array'
PUBLIC	??_R4Cpu@gb@emulation@@6B@			; emulation::gb::Cpu::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCpu@gb@emulation@@@8			; emulation::gb::Cpu `RTTI Type Descriptor'
PUBLIC	??_R3Cpu@gb@emulation@@8			; emulation::gb::Cpu::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Cpu@gb@emulation@@8			; emulation::gb::Cpu::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Cpu@gb@emulation@@8		; emulation::gb::Cpu::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Component@gb@emulation@@6B@		; emulation::gb::Component::`RTTI Complete Object Locator'
EXTRN	memset:PROC
EXTRN	?Read8@Memory@gb@emulation@@QEAAEG@Z:PROC	; emulation::gb::Memory::Read8
EXTRN	?Write8@Memory@gb@emulation@@QEAAXGE@Z:PROC	; emulation::gb::Memory::Write8
EXTRN	?Tick@Memory@gb@emulation@@QEAAXXZ:PROC		; emulation::gb::Memory::Tick
EXTRN	?Step@LCDDriver@gb@emulation@@QEAAXN@Z:PROC	; emulation::gb::LCDDriver::Step
EXTRN	?Step@SoundController@gb@emulation@@QEAAXN@Z:PROC ; emulation::gb::SoundController::Step
EXTRN	?Tick@Timer@gb@emulation@@QEAAXXZ:PROC		; emulation::gb::Timer::Tick
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
_BSS	SEGMENT
piecewise_construct DB 01H DUP (?)
allocator_arg DB 01H DUP (?)
ignore	DB	01H DUP (?)
_Tuple_alloc DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Epiecewise_construct@std@@YAXXZ DD imagerel ??__Epiecewise_construct@std@@YAXXZ
	DD	imagerel ??__Epiecewise_construct@std@@YAXXZ+43
	DD	imagerel $unwind$??__Epiecewise_construct@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eallocator_arg@std@@YAXXZ DD imagerel ??__Eallocator_arg@std@@YAXXZ
	DD	imagerel ??__Eallocator_arg@std@@YAXXZ+43
	DD	imagerel $unwind$??__Eallocator_arg@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Ignore@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0_Ignore@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Eignore@std@@YAXXZ DD imagerel ??__Eignore@std@@YAXXZ
	DD	imagerel ??__Eignore@std@@YAXXZ+39
	DD	imagerel $unwind$??__Eignore@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E_Tuple_alloc@std@@YAXXZ DD imagerel ??__E_Tuple_alloc@std@@YAXXZ
	DD	imagerel ??__E_Tuple_alloc@std@@YAXXZ+43
	DD	imagerel $unwind$??__E_Tuple_alloc@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Deinitialize@Component@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?Deinitialize@Component@gb@emulation@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Reset@Component@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?Reset@Component@gb@emulation@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Component@gb@emulation@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0Component@gb@emulation@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0Cpu@gb@emulation@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+7106
	DD	imagerel $unwind$??0Cpu@gb@emulation@@QEAA@XZ
$pdata$??1Cpu@gb@emulation@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$??1Cpu@gb@emulation@@QEAA@XZ
$pdata$?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z
$pdata$?Deinitialize@Cpu@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?Deinitialize@Cpu@gb@emulation@@UEAAXXZ
$pdata$?Reset@Cpu@gb@emulation@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?Reset@Cpu@gb@emulation@@UEAAXXZ
$pdata$?Tick@Cpu@gb@emulation@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$?Tick@Cpu@gb@emulation@@QEAAXXZ
$pdata$?Step@Cpu@gb@emulation@@QEAAXN@Z DD imagerel $LN19
	DD	imagerel $LN19+798
	DD	imagerel $unwind$?Step@Cpu@gb@emulation@@QEAAXN@Z
$pdata$?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z DD imagerel $LN9
	DD	imagerel $LN9+218
	DD	imagerel $unwind$?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z DD imagerel $LN9
	DD	imagerel $LN9+227
	DD	imagerel $unwind$?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push@Cpu@gb@emulation@@AEAAXE@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?push@Cpu@gb@emulation@@AEAAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop@Cpu@gb@emulation@@AEAAEXZ DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?pop@Cpu@gb@emulation@@AEAAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pushPC@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$?pushPC@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?NOP@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$?NOP@Cpu@gb@emulation@@AEAAXXZ
$pdata$?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RST@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?RST@Cpu@gb@emulation@@AEAAXXZ
$pdata$?LDSPHL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?LDSPHL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+308
	DD	imagerel $unwind$?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ
$pdata$?LDa16SP@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+285
	DD	imagerel $unwind$?LDa16SP@Cpu@gb@emulation@@AEAAXXZ
$pdata$?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+350
	DD	imagerel $unwind$?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ
$pdata$?SCF@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?SCF@Cpu@gb@emulation@@AEAAXXZ
$pdata$?CCF@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?CCF@Cpu@gb@emulation@@AEAAXXZ
$pdata$?HALT@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?HALT@Cpu@gb@emulation@@AEAAXXZ
$pdata$?STOP@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?STOP@Cpu@gb@emulation@@AEAAXXZ
$pdata$?CPL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?CPL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN26
	DD	imagerel $LN26+2709
	DD	imagerel $unwind$?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ
$pdata$?JR@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$?JR@Cpu@gb@emulation@@AEAAXXZ
$pdata$?JP@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+253
	DD	imagerel $unwind$?JP@Cpu@gb@emulation@@AEAAXXZ
$pdata$?JP_HL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?JP_HL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?CALL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+263
	DD	imagerel $unwind$?CALL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RET@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$?RET@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RLCA@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+229
	DD	imagerel $unwind$?RLCA@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RRCA@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$?RRCA@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RLA@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+235
	DD	imagerel $unwind$?RLA@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RRA@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+233
	DD	imagerel $unwind$?RRA@Cpu@gb@emulation@@AEAAXXZ
$pdata$?CP@Cpu@gb@emulation@@AEAAXEE@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?CP@Cpu@gb@emulation@@AEAAXEE@Z
$pdata$?CP_d8@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?CP_d8@Cpu@gb@emulation@@AEAAXXZ
$pdata$?CP_HL@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?CP_HL@Cpu@gb@emulation@@AEAAXXZ
$pdata$?DI@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?DI@Cpu@gb@emulation@@AEAAXXZ
$pdata$?EI@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?EI@Cpu@gb@emulation@@AEAAXXZ
$pdata$?RETI@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?RETI@Cpu@gb@emulation@@AEAAXXZ
$pdata$?DAA@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN12
	DD	imagerel $LN12+355
	DD	imagerel $unwind$?DAA@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+359
	DD	imagerel $unwind$??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+359
	DD	imagerel $unwind$??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+359
	DD	imagerel $unwind$??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+199
	DD	imagerel $unwind$??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+359
	DD	imagerel $unwind$??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+299
	DD	imagerel $unwind$??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+394
	DD	imagerel $unwind$??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+199
	DD	imagerel $unwind$??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN9
	DD	imagerel $LN9+395
	DD	imagerel $unwind$??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+171
	DD	imagerel $unwind$??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$POP@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+186
	DD	imagerel $unwind$??$POP@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+296
	DD	imagerel $unwind$??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+296
	DD	imagerel $unwind$??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+219
	DD	imagerel $unwind$??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+171
	DD	imagerel $unwind$??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+296
	DD	imagerel $unwind$??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+296
	DD	imagerel $unwind$??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+462
	DD	imagerel $unwind$??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+167
	DD	imagerel $unwind$??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$POP@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+186
	DD	imagerel $unwind$??$POP@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+167
	DD	imagerel $unwind$??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+375
	DD	imagerel $unwind$??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$POP@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+186
	DD	imagerel $unwind$??$POP@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+183
	DD	imagerel $unwind$??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+187
	DD	imagerel $unwind$??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+965
	DD	imagerel $unwind$??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z DD imagerel ??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z
	DD	imagerel ??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z+52
	DD	imagerel $unwind$??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z
$pdata$??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ DD imagerel ??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ
	DD	imagerel ??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ+135
	DD	imagerel $unwind$??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ
$pdata$??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z DD imagerel ??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z
	DD	imagerel ??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z+52
	DD	imagerel $unwind$??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z
$pdata$??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z DD imagerel ??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z
	DD	imagerel ??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z+147
	DD	imagerel $unwind$??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z DD imagerel $LN8
	DD	imagerel $LN8+307
	DD	imagerel $unwind$??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z
pdata	ENDS
CRT$XCU	SEGMENT
piecewise_construct$initializer$ DQ FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4Component@gb@emulation@@6B@
rdata$r	SEGMENT
??_R4Component@gb@emulation@@6B@ DD 01H			; emulation::gb::Component::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVComponent@gb@emulation@@@8
	DD	imagerel ??_R3Component@gb@emulation@@8
	DD	imagerel ??_R4Component@gb@emulation@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Cpu@gb@emulation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Cpu@gb@emulation@@8 DD imagerel ??_R0?AVCpu@gb@emulation@@@8 ; emulation::gb::Cpu::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Cpu@gb@emulation@@8
rdata$r	ENDS
;	COMDAT ??_R2Cpu@gb@emulation@@8
rdata$r	SEGMENT
??_R2Cpu@gb@emulation@@8 DD imagerel ??_R1A@?0A@EA@Cpu@gb@emulation@@8 ; emulation::gb::Cpu::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Component@gb@emulation@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Cpu@gb@emulation@@8
rdata$r	SEGMENT
??_R3Cpu@gb@emulation@@8 DD 00H				; emulation::gb::Cpu::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Cpu@gb@emulation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCpu@gb@emulation@@@8
_DATA	SEGMENT
??_R0?AVCpu@gb@emulation@@@8 DQ FLAT:??_7type_info@@6B@	; emulation::gb::Cpu `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVCpu@gb@emulation@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Cpu@gb@emulation@@6B@
rdata$r	SEGMENT
??_R4Cpu@gb@emulation@@6B@ DD 01H			; emulation::gb::Cpu::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVCpu@gb@emulation@@@8
	DD	imagerel ??_R3Cpu@gb@emulation@@8
	DD	imagerel ??_R4Cpu@gb@emulation@@6B@
rdata$r	ENDS
;	COMDAT ??_R2Component@gb@emulation@@8
rdata$r	SEGMENT
??_R2Component@gb@emulation@@8 DD imagerel ??_R1A@?0A@EA@Component@gb@emulation@@8 ; emulation::gb::Component::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Component@gb@emulation@@8
rdata$r	SEGMENT
??_R3Component@gb@emulation@@8 DD 00H			; emulation::gb::Component::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Component@gb@emulation@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVComponent@gb@emulation@@@8
_DATA	SEGMENT
??_R0?AVComponent@gb@emulation@@@8 DQ FLAT:??_7type_info@@6B@ ; emulation::gb::Component `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVComponent@gb@emulation@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Component@gb@emulation@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Component@gb@emulation@@8 DD imagerel ??_R0?AVComponent@gb@emulation@@@8 ; emulation::gb::Component::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Component@gb@emulation@@8
rdata$r	ENDS
;	COMDAT ??_7Cpu@gb@emulation@@6B@
CONST	SEGMENT
??_7Cpu@gb@emulation@@6B@ DQ FLAT:??_R4Cpu@gb@emulation@@6B@ ; emulation::gb::Cpu::`vftable'
	DQ	FLAT:?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z
	DQ	FLAT:?Deinitialize@Cpu@gb@emulation@@UEAAXXZ
	DQ	FLAT:?Reset@Cpu@gb@emulation@@UEAAXXZ
CONST	ENDS
;	COMDAT ??_7Component@gb@emulation@@6B@
CONST	SEGMENT
??_7Component@gb@emulation@@6B@ DQ FLAT:??_R4Component@gb@emulation@@6B@ ; emulation::gb::Component::`vftable'
	DQ	FLAT:?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z
	DQ	FLAT:?Deinitialize@Component@gb@emulation@@UEAAXXZ
	DQ	FLAT:?Reset@Component@gb@emulation@@UEAAXXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,0,2>
	DB	00H
	ORG $+2
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,0,2>
	DB	00H
	ORG $+10
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,0,2>
	DD	01H
	DQ	FLAT:??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,0,2>
	DD	00H
	DQ	FLAT:??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,0,2>
	DB	00H
	ORG $+2
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,0,2>
	DB	00H
	ORG $+10
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,0,2>
	DD	01H
	DQ	FLAT:??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,0,2>
	DD	00H
	DQ	FLAT:??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,0,2>
	DB	00H
	ORG $+2
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,0,2>
	DB	00H
	ORG $+10
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,0,2>
	DD	01H
	DQ	FLAT:??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,0,2>
	DD	00H
	DQ	FLAT:??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$POP@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,0,2>
	DB	00H
	ORG $+2
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,0,2>
	DB	00H
	ORG $+10
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,0,2>
	DD	01H
	DQ	FLAT:??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,0,2>
	DD	00H
	DQ	FLAT:??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::CALL_cc<4,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::CALL_cc<4,0>
	DD	08H
	DQ	FLAT:??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::CALL_cc<4,0>
	DD	00H
	DQ	FLAT:??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JP_cc<4,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JP_cc<4,0>
	DD	08H
	DQ	FLAT:??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JP_cc<4,0>
	DD	00H
	DQ	FLAT:??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::RET_cc<4,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::RET_cc<4,0>
	DD	08H
	DQ	FLAT:??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::RET_cc<4,0>
	DD	00H
	DQ	FLAT:??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,0,2>
	DB	00H
	ORG $+2
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,0,2>
	DB	00H
	ORG $+10
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,0,2>
	DD	01H
	DQ	FLAT:??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,0,2>
	DD	00H
	DQ	FLAT:??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::CALL_cc<4,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::CALL_cc<4,1>
	DD	08H
	DQ	FLAT:??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::CALL_cc<4,1>
	DD	00H
	DQ	FLAT:??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JP_cc<4,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JP_cc<4,1>
	DD	08H
	DQ	FLAT:??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JP_cc<4,1>
	DD	00H
	DQ	FLAT:??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$POP@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::RET_cc<4,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::RET_cc<4,1>
	DD	08H
	DQ	FLAT:??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::RET_cc<4,1>
	DD	00H
	DQ	FLAT:??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,0,2>
	DB	00H
	ORG $+2
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,0,2>
	DB	00H
	ORG $+10
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,0,2>
	DD	01H
	DQ	FLAT:??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,0,2>
	DD	00H
	DQ	FLAT:??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::CALL_cc<7,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::CALL_cc<7,0>
	DD	08H
	DQ	FLAT:??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::CALL_cc<7,0>
	DD	00H
	DQ	FLAT:??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JP_cc<7,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JP_cc<7,0>
	DD	08H
	DQ	FLAT:??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JP_cc<7,0>
	DD	00H
	DQ	FLAT:??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::RET_cc<7,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::RET_cc<7,0>
	DD	08H
	DQ	FLAT:??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::RET_cc<7,0>
	DD	00H
	DQ	FLAT:??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,0,2>
	DB	00H
	ORG $+2
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,0,2>
	DB	00H
	ORG $+10
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,0,2>
	DD	01H
	DQ	FLAT:??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,0,2>
	DD	00H
	DQ	FLAT:??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::CALL_cc<7,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::CALL_cc<7,1>
	DD	08H
	DQ	FLAT:??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::CALL_cc<7,1>
	DD	00H
	DQ	FLAT:??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JP_cc<7,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JP_cc<7,1>
	DD	08H
	DQ	FLAT:??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JP_cc<7,1>
	DD	00H
	DQ	FLAT:??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$POP@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::RET_cc<7,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::RET_cc<7,1>
	DD	08H
	DQ	FLAT:??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::RET_cc<7,1>
	DD	00H
	DQ	FLAT:??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,1,0>
	DB	00H
	ORG $+2
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,1,0>
	DB	00H
	ORG $+10
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,1,0>
	DD	01H
	DQ	FLAT:??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,1,0>
	DD	00H
	DQ	FLAT:??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,3,1>
	DB	00H
	ORG $+2
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,3,1>
	DB	00H
	ORG $+10
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,3,1>
	DD	01H
	DQ	FLAT:??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,3,1>
	DD	00H
	DQ	FLAT:??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,6,0>
	DB	00H
	ORG $+2
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,6,0>
	DB	00H
	ORG $+10
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,6,0>
	DD	01H
	DQ	FLAT:??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,6,0>
	DD	00H
	DQ	FLAT:??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,7,0>
	DB	00H
	ORG $+2
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,7,0>
	DB	00H
	ORG $+10
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,7,0>
	DD	01H
	DQ	FLAT:??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,7,0>
	DD	00H
	DQ	FLAT:??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,4,0>
	DB	00H
	ORG $+2
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,4,0>
	DB	00H
	ORG $+10
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,4,0>
	DD	01H
	DQ	FLAT:??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,4,0>
	DD	00H
	DQ	FLAT:??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,5,0>
	DB	00H
	ORG $+2
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,5,0>
	DB	00H
	ORG $+10
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,5,0>
	DD	01H
	DQ	FLAT:??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,5,0>
	DD	00H
	DQ	FLAT:??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,2,0>
	DB	00H
	ORG $+2
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,2,0>
	DB	00H
	ORG $+10
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,2,0>
	DD	01H
	DQ	FLAT:??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,2,0>
	DD	00H
	DQ	FLAT:??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::OR<1,3,0>
	DB	00H
	ORG $+2
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::OR<1,3,0>
	DB	00H
	ORG $+10
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::OR<1,3,0>
	DD	01H
	DQ	FLAT:??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::OR<1,3,0>
	DD	00H
	DQ	FLAT:??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,1,0>
	DB	00H
	ORG $+2
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,1,0>
	DB	00H
	ORG $+10
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,1,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,1,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,3,1>
	DB	00H
	ORG $+2
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,3,1>
	DB	00H
	ORG $+10
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,3,1>
	DD	01H
	DQ	FLAT:??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,3,1>
	DD	00H
	DQ	FLAT:??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,6,0>
	DB	00H
	ORG $+2
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,6,0>
	DB	00H
	ORG $+10
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,6,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,6,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,7,0>
	DB	00H
	ORG $+2
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,7,0>
	DB	00H
	ORG $+10
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,7,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,7,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,4,0>
	DB	00H
	ORG $+2
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,4,0>
	DB	00H
	ORG $+10
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,4,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,4,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,5,0>
	DB	00H
	ORG $+2
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,5,0>
	DB	00H
	ORG $+10
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,5,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,5,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,2,0>
	DB	00H
	ORG $+2
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,2,0>
	DB	00H
	ORG $+10
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,2,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,2,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::XOR<1,3,0>
	DB	00H
	ORG $+2
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::XOR<1,3,0>
	DB	00H
	ORG $+10
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::XOR<1,3,0>
	DD	01H
	DQ	FLAT:??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::XOR<1,3,0>
	DD	00H
	DQ	FLAT:??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,1,0>
	DB	00H
	ORG $+2
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,1,0>
	DB	00H
	ORG $+10
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,1,0>
	DD	01H
	DQ	FLAT:??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,1,0>
	DD	00H
	DQ	FLAT:??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,3,1>
	DB	00H
	ORG $+2
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,3,1>
	DB	00H
	ORG $+10
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,3,1>
	DD	01H
	DQ	FLAT:??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,3,1>
	DD	00H
	DQ	FLAT:??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,6,0>
	DB	00H
	ORG $+2
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,6,0>
	DB	00H
	ORG $+10
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,6,0>
	DD	01H
	DQ	FLAT:??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,6,0>
	DD	00H
	DQ	FLAT:??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,7,0>
	DB	00H
	ORG $+2
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,7,0>
	DB	00H
	ORG $+10
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,7,0>
	DD	01H
	DQ	FLAT:??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,7,0>
	DD	00H
	DQ	FLAT:??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,4,0>
	DB	00H
	ORG $+2
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,4,0>
	DB	00H
	ORG $+10
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,4,0>
	DD	01H
	DQ	FLAT:??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,4,0>
	DD	00H
	DQ	FLAT:??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,5,0>
	DB	00H
	ORG $+2
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,5,0>
	DB	00H
	ORG $+10
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,5,0>
	DD	01H
	DQ	FLAT:??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,5,0>
	DD	00H
	DQ	FLAT:??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,2,0>
	DB	00H
	ORG $+2
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,2,0>
	DB	00H
	ORG $+10
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,2,0>
	DD	01H
	DQ	FLAT:??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,2,0>
	DD	00H
	DQ	FLAT:??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::AND<1,3,0>
	DB	00H
	ORG $+2
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::AND<1,3,0>
	DB	00H
	ORG $+10
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::AND<1,3,0>
	DD	01H
	DQ	FLAT:??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::AND<1,3,0>
	DD	00H
	DQ	FLAT:??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,1,0>
	DB	00H
	ORG $+2
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,1,0>
	DB	00H
	ORG $+10
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,1,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,1,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,3,1>
	DB	00H
	ORG $+2
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,3,1>
	DB	00H
	ORG $+10
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,3,1>
	DD	01H
	DQ	FLAT:??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,3,1>
	DD	00H
	DQ	FLAT:??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,6,0>
	DB	00H
	ORG $+2
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,6,0>
	DB	00H
	ORG $+10
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,6,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,6,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,7,0>
	DB	00H
	ORG $+2
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,7,0>
	DB	00H
	ORG $+10
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,7,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,7,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,4,0>
	DB	00H
	ORG $+2
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,4,0>
	DB	00H
	ORG $+10
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,4,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,4,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,5,0>
	DB	00H
	ORG $+2
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,5,0>
	DB	00H
	ORG $+10
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,5,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,5,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,2,0>
	DB	00H
	ORG $+2
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,2,0>
	DB	00H
	ORG $+10
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,2,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,2,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SBC<1,3,0>
	DB	00H
	ORG $+2
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SBC<1,3,0>
	DB	00H
	ORG $+10
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SBC<1,3,0>
	DD	01H
	DQ	FLAT:??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SBC<1,3,0>
	DD	00H
	DQ	FLAT:??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,1,0>
	DB	00H
	ORG $+2
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,1,0>
	DB	00H
	ORG $+10
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,1,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,1,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,3,1>
	DB	00H
	ORG $+2
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,3,1>
	DB	00H
	ORG $+10
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,3,1>
	DD	01H
	DQ	FLAT:??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,3,1>
	DD	00H
	DQ	FLAT:??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,6,0>
	DB	00H
	ORG $+2
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,6,0>
	DB	00H
	ORG $+10
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,6,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,6,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,7,0>
	DB	00H
	ORG $+2
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,7,0>
	DB	00H
	ORG $+10
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,7,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,7,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,4,0>
	DB	00H
	ORG $+2
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,4,0>
	DB	00H
	ORG $+10
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,4,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,4,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,5,0>
	DB	00H
	ORG $+2
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,5,0>
	DB	00H
	ORG $+10
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,5,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,5,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,2,0>
	DB	00H
	ORG $+2
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,2,0>
	DB	00H
	ORG $+10
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,2,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,2,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::SUB<1,3,0>
	DB	00H
	ORG $+2
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::SUB<1,3,0>
	DB	00H
	ORG $+10
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::SUB<1,3,0>
	DD	01H
	DQ	FLAT:??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::SUB<1,3,0>
	DD	00H
	DQ	FLAT:??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,1,0>
	DB	00H
	ORG $+2
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,1,0>
	DB	00H
	ORG $+10
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,1,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,1,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,3,1>
	DB	00H
	ORG $+2
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,3,1>
	DB	00H
	ORG $+10
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,3,1>
	DD	01H
	DQ	FLAT:??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,3,1>
	DD	00H
	DQ	FLAT:??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,6,0>
	DB	00H
	ORG $+2
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,6,0>
	DB	00H
	ORG $+10
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,6,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,6,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,7,0>
	DB	00H
	ORG $+2
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,7,0>
	DB	00H
	ORG $+10
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,7,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,7,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,4,0>
	DB	00H
	ORG $+2
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,4,0>
	DB	00H
	ORG $+10
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,4,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,4,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,5,0>
	DB	00H
	ORG $+2
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,5,0>
	DB	00H
	ORG $+10
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,5,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,5,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,2,0>
	DB	00H
	ORG $+2
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,2,0>
	DB	00H
	ORG $+10
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,2,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,2,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADC<1,3,0>
	DB	00H
	ORG $+2
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADC<1,3,0>
	DB	00H
	ORG $+10
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADC<1,3,0>
	DD	01H
	DQ	FLAT:??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADC<1,3,0>
	DD	00H
	DQ	FLAT:??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,1,0>
	DB	00H
	ORG $+2
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,1,0>
	DB	00H
	ORG $+10
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,1,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,1,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,3,1>
	DB	00H
	ORG $+2
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,3,1>
	DB	00H
	ORG $+10
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,3,1>
	DD	01H
	DQ	FLAT:??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,3,1>
	DD	00H
	DQ	FLAT:??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,6,0>
	DB	00H
	ORG $+2
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,6,0>
	DB	00H
	ORG $+10
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,6,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,6,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,7,0>
	DB	00H
	ORG $+2
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,7,0>
	DB	00H
	ORG $+10
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,7,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,7,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,4,0>
	DB	00H
	ORG $+2
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,4,0>
	DB	00H
	ORG $+10
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,4,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,4,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,5,0>
	DB	00H
	ORG $+2
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,5,0>
	DB	00H
	ORG $+10
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,5,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,5,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,2,0>
	DB	00H
	ORG $+2
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,2,0>
	DB	00H
	ORG $+10
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,2,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,2,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006b20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 061H ; emulation::gb::Cpu::ADD<1,3,0>
	DB	00H
	ORG $+2
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 062H ; emulation::gb::Cpu::ADD<1,3,0>
	DB	00H
	ORG $+10
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 044H ; emulation::gb::Cpu::ADD<1,3,0>
	DD	01H
	DQ	FLAT:??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+96
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 02H ; emulation::gb::Cpu::ADD<1,3,0>
	DD	00H
	DQ	FLAT:??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JR_cc<4,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JR_cc<4,0>
	DD	08H
	DQ	FLAT:??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JR_cc<4,0>
	DD	00H
	DQ	FLAT:??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JR_cc<4,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JR_cc<4,1>
	DD	08H
	DQ	FLAT:??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JR_cc<4,1>
	DD	00H
	DQ	FLAT:??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JR_cc<7,0>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JR_cc<7,0>
	DD	08H
	DQ	FLAT:??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JR_cc<7,0>
	DD	00H
	DQ	FLAT:??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 074H ; emulation::gb::Cpu::JR_cc<7,1>
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+10
??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 028H ; emulation::gb::Cpu::JR_cc<7,1>
	DD	08H
	DQ	FLAT:??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
	ORG $+48
??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 01H ; emulation::gb::Cpu::JR_cc<7,1>
	DD	00H
	DQ	FLAT:??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$0 DB 063H	; emulation::gb::Cpu::PREFIX_CB
	DB	06fH
	DB	064H
	DB	065H
	DB	00H
	ORG $+3
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$1 DB 067H	; emulation::gb::Cpu::PREFIX_CB
	DB	065H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$2 DB 073H	; emulation::gb::Cpu::PREFIX_CB
	DB	065H
	DB	074H
	DB	072H
	DB	00H
	ORG $+3
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData DD 03H ; emulation::gb::Cpu::PREFIX_CB
	DD	00H
	DQ	FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc
	ORG $+8
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcVarDesc DD 078H	; emulation::gb::Cpu::PREFIX_CB
	DD	010H
	DQ	FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$2
	DD	048H
	DD	010H
	DQ	FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$1
	DD	024H
	DD	01H
	DQ	FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pushPC@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop@Cpu@gb@emulation@@AEAAEXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push@Cpu@gb@emulation@@AEAAXE@Z DD 022201H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z DD 022201H
	DD	0700a120eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z DD 022c01H
	DD	070141218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z DD 022c01H
	DD	070141218H
xdata	ENDS
xdata	SEGMENT
$unwind$??0Cpu@gb@emulation@@QEAA@XZ DD 021e01H
	DD	07006320aH
$unwind$??1Cpu@gb@emulation@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z DD 022301H
	DD	0700b320fH
$unwind$?Deinitialize@Cpu@gb@emulation@@UEAAXXZ DD 010601H
	DD	07006H
$unwind$?Reset@Cpu@gb@emulation@@UEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?Tick@Cpu@gb@emulation@@QEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?Step@Cpu@gb@emulation@@QEAAXN@Z DD 022401H
	DD	0700c9210H
$unwind$?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?NOP@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006120aH
$unwind$?RST@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?LDSPHL@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?LDa16SP@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?SCF@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?CCF@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?HALT@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?STOP@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?CPL@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ DD 032401H
	DD	018010dH
	DD	07006H
$unwind$?JR@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?JP@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?JP_HL@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?CALL@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?RET@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?RLCA@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006120aH
$unwind$?RRCA@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006120aH
$unwind$?RLA@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006120aH
$unwind$?RRA@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006120aH
$unwind$?CP@Cpu@gb@emulation@@AEAAXEE@Z DD 022701H
	DD	0700f3213H
$unwind$?CP_d8@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$?CP_HL@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?DI@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?EI@Cpu@gb@emulation@@AEAAXXZ DD 010601H
	DD	07006H
$unwind$?RETI@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006320aH
$unwind$?DAA@Cpu@gb@emulation@@AEAAXXZ DD 021e01H
	DD	07006520aH
$unwind$??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z DD 011001H
	DD	07010H
$unwind$??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ DD 021e01H
	DD	07006320aH
$unwind$??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z DD 011001H
	DD	07010H
$unwind$??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Component@gb@emulation@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Reset@Component@gb@emulation@@UEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Deinitialize@Component@gb@emulation@@UEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E_Tuple_alloc@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eignore@std@@YAXXZ DD 021501H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Ignore@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Eallocator_arg@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Epiecewise_construct@std@@YAXXZ DD 021501H
	DD	070021206H
xdata	ENDS
CRT$XCU	SEGMENT
allocator_arg$initializer$ DQ FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
ignore$initializer$ DQ FLAT:??__Eignore@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_Tuple_alloc$initializer$ DQ FLAT:??__E_Tuple_alloc@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,0,2>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,1,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,3,1>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,6,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,7,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,4,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,5,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,2,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z
_TEXT	SEGMENT
tv133 = 32
this$ = 64
a$ = 72
b$ = 80
??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z PROC ; emulation::gb::Cpu::arithmeticMode<1,3,0>, COMDAT

; 124  :   void arithmeticMode(uint8_t& a, uint8_t& b) {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 125  : 	  if (mode == 0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@arithmetic

; 126  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 127  :       b = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@arithmetic
$LN5@arithmetic:

; 128  :     } else if (mode == 1) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN3@arithmetic

; 129  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 130  :       b = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@arithmetic
$LN3@arithmetic:

; 131  :     } else if (mode == 2) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@arithmetic

; 132  :       a = reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rdx+rax+2096]
	mov	BYTE PTR [rcx], al

; 133  :       b = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv133[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv133[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR b$[rsp]
	mov	BYTE PTR [rcx], al
$LN1@arithmetic:
$LN2@arithmetic:
$LN4@arithmetic:

; 134  :     }
; 135  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ENDP ; emulation::gb::Cpu::arithmeticMode<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
r$ = 56
??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z PROC ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 656  :   auto setr = [=](uint8_t r) {

	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 657  :     if ((code&0x7) != 6) {

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 7
	cmp	eax, 6
	je	SHORT $LN2@operator

; 658  :       reg.raw8[reg_index[code&0x7]] = r;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 7
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:reg_index
	movsxd	rcx, DWORD PTR [rdx+rcx*4]
	movzx	edx, BYTE PTR r$[rsp]
	mov	BYTE PTR [rax+rcx+2096], dl

; 659  :     } else {

	jmp	SHORT $LN1@operator
$LN2@operator:

; 660  :       mem_->Write8(reg.HL,r);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	r8d, BYTE PTR r$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rcx, QWORD PTR [rcx+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN1@operator:

; 661  :     }
; 662  :   };

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ENDP ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
_Code$ = 24
_This$ = 32
??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z PROC ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::<lambda_dcf6fcf4240e7a010887eba0f732f129>

; 662  :   };

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Code$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _This$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z ENDP ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::<lambda_dcf6fcf4240e7a010887eba0f732f129>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ PROC ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()

; 647  :   auto getr = [=]() {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 648  :     if ((code&0x7) != 6) {

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 7
	cmp	eax, 6
	je	SHORT $LN2@operator

; 649  :       return reg.raw8[reg_index[code&0x7]];

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 7
	movsxd	rcx, ecx
	lea	rdx, OFFSET FLAT:reg_index
	movsxd	rcx, DWORD PTR [rdx+rcx*4]
	movzx	eax, BYTE PTR [rax+rcx+2096]
	jmp	SHORT $LN3@operator

; 650  :     } else {

	jmp	SHORT $LN1@operator
$LN2@operator:

; 651  : 
; 652  :       return mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	edx, WORD PTR [rax+2102]
	mov	rcx, QWORD PTR [rcx+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
$LN1@operator:
$LN3@operator:

; 653  :     }
; 654  :   };

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ENDP ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
_Code$ = 24
_This$ = 32
??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z PROC ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::<lambda_e6006dac0a8482b356b9f0c5ff6de944>

; 654  :   };

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Code$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _This$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z ENDP ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::<lambda_e6006dac0a8482b356b9f0c5ff6de944>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD<1,0,15>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 1
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	cmp	eax, 1
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD<1,0,15>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,0,2>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::PUSH<0>, COMDAT

; 903  : void Cpu::PUSH() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 904  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 905  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	sar	eax, 8
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 906  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 907  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 908  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::PUSH<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LDr$FF00r<1,2>, COMDAT

; 407  : void Cpu::LDr$FF00r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 408  : 	reg.raw8[dest] = mem_->Read8(0xFF00+reg.raw8[src]);

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 409  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LDr$FF00r<1,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::POP<0>, COMDAT

; 911  : void Cpu::POP() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 912  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 913  :   reg.raw16[dest] = pop();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 914  :   reg.raw16[dest] |= pop() << 8;

	mov	eax, 2
	imul	rax, 0
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR tv74[rsp]
	movzx	ecx, WORD PTR [rcx+rdx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 915  :   if (dest == RegAF)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@POP

; 916  :     reg.F._unused = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 240					; 000000f0H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@POP:

; 917  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::POP<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD<1,0,13>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 1
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD<1,0,13>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,0,2>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD<0,1,14>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 0
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	cmp	eax, 1
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD<0,1,14>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,0,2>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::PUSH<3>, COMDAT

; 903  : void Cpu::PUSH() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 904  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 905  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	sar	eax, 8
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 906  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 907  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 908  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::PUSH<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD$FF00rr<2,1>, COMDAT

; 402  : void Cpu::LD$FF00rr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 403  : 	mem_->Write8(0xFF00+reg.raw8[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+2096]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 404  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD$FF00rr<2,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
??$POP@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::POP<3>, COMDAT

; 911  : void Cpu::POP() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 912  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 913  :   reg.raw16[dest] = pop();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 914  :   reg.raw16[dest] |= pop() << 8;

	mov	eax, 2
	imul	rax, 3
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR tv74[rsp]
	movzx	ecx, WORD PTR [rcx+rdx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 915  :   if (dest == RegAF)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@POP

; 916  :     reg.F._unused = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 240					; 000000f0H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@POP:

; 917  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$POP@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::POP<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD<0,1,12>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 0
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	cmp	eax, 1
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD<0,1,12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,0,2>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::CALL_cc<4,0>, COMDAT

; 869  : void Cpu::CALL_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 870  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 871  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 872  : 
; 873  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@CALL_cc

; 874  :     CALL();

	mov	rcx, QWORD PTR this$[rsp]
	call	?CALL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CALL

; 875  :   } else {

	jmp	$LN1@CALL_cc
$LN2@CALL_cc:

; 876  :     uint16_t nn;
; 877  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 878  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@CALL_cc:

; 879  :   }
; 880  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::CALL_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JP_cc<4,0>, COMDAT

; 840  : void Cpu::JP_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 841  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 842  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 843  : 
; 844  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JP_cc

; 845  :     JP();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JP@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JP

; 846  :   } else {

	jmp	$LN1@JP_cc
$LN2@JP_cc:

; 847  :     uint16_t nn;
; 848  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 849  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@JP_cc:

; 850  :   }
; 851  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JP_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
this$ = 80
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::RET_cc<4,0>, COMDAT

; 889  : void Cpu::RET_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 890  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 891  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 892  : 
; 893  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@RET_cc

; 894  :     RET();

	mov	rcx, QWORD PTR this$[rsp]
	call	?RET@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::RET
$LN2@RET_cc:

; 895  :   } else {
; 896  :    
; 897  :   }
; 898  :    Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 899  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::RET_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,0,2>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::PUSH<2>, COMDAT

; 903  : void Cpu::PUSH() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 904  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 905  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	sar	eax, 8
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 906  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 907  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 908  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::PUSH<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::CALL_cc<4,1>, COMDAT

; 869  : void Cpu::CALL_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 870  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 871  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 872  : 
; 873  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@CALL_cc

; 874  :     CALL();

	mov	rcx, QWORD PTR this$[rsp]
	call	?CALL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CALL

; 875  :   } else {

	jmp	$LN1@CALL_cc
$LN2@CALL_cc:

; 876  :     uint16_t nn;
; 877  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 878  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@CALL_cc:

; 879  :   }
; 880  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::CALL_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JP_cc<4,1>, COMDAT

; 840  : void Cpu::JP_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 841  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 842  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 843  : 
; 844  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JP_cc

; 845  :     JP();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JP@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JP

; 846  :   } else {

	jmp	$LN1@JP_cc
$LN2@JP_cc:

; 847  :     uint16_t nn;
; 848  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 849  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@JP_cc:

; 850  :   }
; 851  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JP_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
??$POP@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::POP<2>, COMDAT

; 911  : void Cpu::POP() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 912  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 913  :   reg.raw16[dest] = pop();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 914  :   reg.raw16[dest] |= pop() << 8;

	mov	eax, 2
	imul	rax, 2
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR tv74[rsp]
	movzx	ecx, WORD PTR [rcx+rdx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 915  :   if (dest == RegAF)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@POP

; 916  :     reg.F._unused = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 240					; 000000f0H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@POP:

; 917  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$POP@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::POP<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
this$ = 80
??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::RET_cc<4,1>, COMDAT

; 889  : void Cpu::RET_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 890  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 891  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 892  : 
; 893  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@RET_cc

; 894  :     RET();

	mov	rcx, QWORD PTR this$[rsp]
	call	?RET@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::RET
$LN2@RET_cc:

; 895  :   } else {
; 896  :    
; 897  :   }
; 898  :    Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 899  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::RET_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,0,2>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::CALL_cc<7,0>, COMDAT

; 869  : void Cpu::CALL_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 870  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 871  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 872  : 
; 873  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@CALL_cc

; 874  :     CALL();

	mov	rcx, QWORD PTR this$[rsp]
	call	?CALL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CALL

; 875  :   } else {

	jmp	$LN1@CALL_cc
$LN2@CALL_cc:

; 876  :     uint16_t nn;
; 877  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 878  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@CALL_cc:

; 879  :   }
; 880  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::CALL_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JP_cc<7,0>, COMDAT

; 840  : void Cpu::JP_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 841  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 842  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 843  : 
; 844  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JP_cc

; 845  :     JP();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JP@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JP

; 846  :   } else {

	jmp	$LN1@JP_cc
$LN2@JP_cc:

; 847  :     uint16_t nn;
; 848  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 849  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@JP_cc:

; 850  :   }
; 851  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JP_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
this$ = 80
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::RET_cc<7,0>, COMDAT

; 889  : void Cpu::RET_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 890  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 891  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 892  : 
; 893  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@RET_cc

; 894  :     RET();

	mov	rcx, QWORD PTR this$[rsp]
	call	?RET@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::RET
$LN2@RET_cc:

; 895  :   } else {
; 896  :    
; 897  :   }
; 898  :    Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 899  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::RET_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,0,2>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$0A@$01@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,0,2>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,0,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::PUSH<1>, COMDAT

; 903  : void Cpu::PUSH() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 904  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 905  :   push(reg.raw16[src]>>8);

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	sar	eax, 8
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 906  :   push(reg.raw16[src]&0xFF);

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 907  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 908  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::PUSH<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::CALL_cc<7,1>, COMDAT

; 869  : void Cpu::CALL_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 870  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 871  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 872  : 
; 873  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@CALL_cc

; 874  :     CALL();

	mov	rcx, QWORD PTR this$[rsp]
	call	?CALL@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::CALL

; 875  :   } else {

	jmp	$LN1@CALL_cc
$LN2@CALL_cc:

; 876  :     uint16_t nn;
; 877  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 878  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@CALL_cc:

; 879  :   }
; 880  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::CALL_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
nn$4 = 52
tv92 = 56
tv137 = 58
this$ = 80
??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JP_cc<7,1>, COMDAT

; 840  : void Cpu::JP_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 841  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 842  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 843  : 
; 844  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JP_cc

; 845  :     JP();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JP@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JP

; 846  :   } else {

	jmp	$LN1@JP_cc
$LN2@JP_cc:

; 847  :     uint16_t nn;
; 848  :     nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$4[rsp], ax

; 849  :     nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv137[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv137[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$4[rsp], ax
$LN1@JP_cc:

; 850  :   }
; 851  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JP_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$POP@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
??$POP@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::POP<1>, COMDAT

; 911  : void Cpu::POP() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 912  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 913  :   reg.raw16[dest] = pop();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 914  :   reg.raw16[dest] |= pop() << 8;

	mov	eax, 2
	imul	rax, 1
	mov	QWORD PTR tv74[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR tv74[rsp]
	movzx	ecx, WORD PTR [rcx+rdx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 915  :   if (dest == RegAF)

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN1@POP

; 916  :     reg.F._unused = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 240					; 000000f0H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@POP:

; 917  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$POP@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::POP<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
this$ = 80
??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::RET_cc<7,1>, COMDAT

; 889  : void Cpu::RET_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 890  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 891  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 892  : 
; 893  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@RET_cc

; 894  :     RET();

	mov	rcx, QWORD PTR this$[rsp]
	call	?RET@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::RET
$LN2@RET_cc:

; 895  :   } else {
; 896  :    
; 897  :   }
; 898  :    Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 899  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::RET_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<1>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<6>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<7>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<4>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<5>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<2>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::CP_reg<3>, COMDAT

; 969  : void Cpu::CP_reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 970  :   CP(reg.A,reg.raw8[r]);

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 971  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::CP_reg<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,1,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,3,1>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,6,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,7,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,4,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,5,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,2,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::OR<1,3,0>, COMDAT

; 608  : void Cpu::OR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 609  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 610  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 611  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 612  :   reg.raw8[dest] = a | b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	or	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 613  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 614  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::OR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,1,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::XOR<1,3,1>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::XOR<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,6,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,7,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,4,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,5,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,2,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::XOR<1,3,0>, COMDAT

; 599  : void Cpu::XOR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 600  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 601  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 602  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 603  :   reg.raw8[dest] = a ^ b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	xor	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 604  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 605  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::XOR<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,1,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::AND<1,3,1>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::AND<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,6,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,7,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,4,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,5,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,2,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::AND<1,3,0>, COMDAT

; 588  : void Cpu::AND() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 589  :   reg.F.raw = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2096], 0

; 590  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 591  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 592  :   reg.raw8[dest] = a & b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	and	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 593  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 594  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 595  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::AND<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,1,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::SBC<1,3,1>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::SBC<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,6,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,7,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,4,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,5,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,2,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SBC<1,3,0>, COMDAT

; 572  : void Cpu::SBC() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 573  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 574  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 575  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 576  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 577  :   reg.raw8[dest] = a - b - carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 578  :   updateCpuFlagC(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 579  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SBC

; 580  :     updateCpuFlagC(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN2@SBC:

; 581  :   updateCpuFlagH(a,carry,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 582  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SBC

; 583  :     updateCpuFlagH(a-carry,b,1);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	sub	eax, ecx
	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN1@SBC:

; 584  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 585  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SBC<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,1,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::SUB<1,3,1>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::SUB<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,6,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,7,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,4,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,5,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,2,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::SUB<1,3,0>, COMDAT

; 561  : void Cpu::SUB() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 562  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 563  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 564  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 565  :   reg.raw8[dest] = a - b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 566  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 567  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 568  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 569  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::SUB<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,1,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::ADC<1,3,1>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::ADC<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,6,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,7,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,4,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,5,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,2,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
carry$ = 84
this$ = 112
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADC<1,3,0>, COMDAT

; 536  : void Cpu::ADC() {

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 537  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 538  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 539  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 540  :   uint8_t carry = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR carry$[rsp], al

; 541  :   reg.raw8[dest] = a + b + carry;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 542  : 
; 543  :   updateCpuFlagC(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 544  :   if (reg.F.C==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ADC

; 545  :     updateCpuFlagC(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC
$LN3@ADC:

; 546  :   updateCpuFlagH(a,carry,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR carry$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 547  :   if (reg.F.H==0)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ADC

; 548  :     updateCpuFlagH(a+carry,b,0);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR carry$[rsp]
	add	eax, ecx
	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH
$LN2@ADC:

; 549  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 550  : 
; 551  :   if (opcode == 0x8E){

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	cmp	eax, 142				; 0000008eH
	jne	SHORT $LN1@ADC

; 552  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 553  :           Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN1@ADC:

; 554  :   }
; 555  :   
; 556  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADC<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,1,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$00$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,1,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::ADD<1,3,1>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$00@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,1>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::ADD<1,3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,6,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$05$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,6,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,7,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$06$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,7,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,4,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$03$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,4,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,5,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$04$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,5,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,2,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$01$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,2,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 36
b$ = 68
this$ = 112
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD<1,3,0>, COMDAT

; 499  : void Cpu::ADD() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 500  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 501  :   uint8_t a=0,b=0;

	mov	BYTE PTR a$[rsp], 0
	mov	BYTE PTR b$[rsp], 0

; 502  :   arithmeticMode<dest,src,mode>(a,b);

	lea	r8, QWORD PTR b$[rsp]
	lea	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$arithmeticMode@$00$02$0A@@Cpu@gb@emulation@@AEAAXAEAE0@Z ; emulation::gb::Cpu::arithmeticMode<1,3,0>

; 503  :   reg.raw8[dest] = a + b;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 504  :   updateCpuFlagC(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 505  :   updateCpuFlagH(a,b,0);

	xor	r9d, r9d
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 506  :   updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 507  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD<1,3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<1,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<1,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<1,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<1,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,1>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,6>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,7>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,4>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,5>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,2>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<3,3>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<6,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<6,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<6,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<6,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<7,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<7,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<7,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<7,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<4,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<4,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<4,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<4,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<5,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<5,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<5,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<5,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<2,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<2,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<2,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<2,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,1>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<3,3>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,6>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 6
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,6>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,7>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 7
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,7>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,4>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 4
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,5>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 5
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,5>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,2>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 2
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 16
??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrr<3,3>, COMDAT

; 387  : void Cpu::LDrr() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 388  : 	reg.raw8[dest] = reg.raw8[src];

	mov	eax, 1
	imul	rax, 3
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [r8+rax+2096]
	mov	BYTE PTR [rdx+rcx+2096], al

; 389  : }

	pop	rdi
	ret	0
??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrr<3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<1,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 1
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<1,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<1,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<1,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 1
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::DEC_16bit<4>, COMDAT

; 824  : void Cpu::DEC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 825  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 826  :   --reg.raw16[dest];

	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 827  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 828  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LDDreg$reg<1,3>, COMDAT

; 439  : void Cpu::LDDreg$reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 440  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 441  :   reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 442  :   --reg.raw16[src];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 443  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LDDreg$reg<1,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 36
r1$ = 40
r2$ = 44
tv130 = 48
tv148 = 52
this$ = 80
??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,4>, COMDAT

; 510  : void Cpu::ADD_16bit() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 511  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 512  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR a$[rsp], ax
	xor	eax, eax
	mov	WORD PTR b$[rsp], ax

; 513  :   a = reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR a$[rsp], ax

; 514  :   b = reg.raw16[src];

	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR b$[rsp], ax

; 515  :   reg.raw16[dest] = a + b;

	movzx	eax, WORD PTR a$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 516  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 4095				; 00000fffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 4095				; 00000fffH
	add	eax, ecx
	mov	WORD PTR r1$[rsp], ax

; 517  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR r1$[rsp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[rsp], 0
$LN4@ADD_16bit:
	movzx	eax, BYTE PTR tv130[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 518  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR r2$[rsp], eax

; 519  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR r2$[rsp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[rsp], 0
$LN6@ADD_16bit:
	movzx	eax, BYTE PTR tv148[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 520  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 521  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
disp8$4 = 52
tv92 = 54
this$ = 80
??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JR_cc<4,0>, COMDAT

; 757  : void Cpu::JR_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 758  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 759  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 760  : 
; 761  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JR_cc

; 762  : 		JR();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JR@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JR

; 763  :   } else {

	jmp	SHORT $LN1@JR_cc
$LN2@JR_cc:

; 764  :     int8_t disp8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR disp8$4[rsp], al
$LN1@JR_cc:

; 765  :   }
; 766  : 
; 767  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JR_cc<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LD<3,0,11>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 3
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LD<3,0,11>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<3,1>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	test	eax, eax
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<3,1>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 3
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::INC_16bit<4>, COMDAT

; 789  : void Cpu::INC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 790  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 791  :   ++reg.raw16[dest];

	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 792  :   Tick();Tick();Tick();Tick(); 

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 793  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::INC_16bit<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LDD$regreg<3,1>, COMDAT

; 426  : void Cpu::LDD$regreg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 427  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 428  : 	--reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 429  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LDD$regreg<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv78 = 32
tv95 = 34
this$ = 64
??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrd16<4>, COMDAT

; 412  : void Cpu::LDrd16() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 413  : 	reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv78[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv78[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 414  : 	reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv95[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv95[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 415  :   if (dest != RegAF && (reg.raw16[dest]>=0xFE00&&reg.raw16[dest]<=0xFEFF) && emu_->lcd_driver()->lcdc().lcd_enable == 1)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN1@LDrd16
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN1@LDrd16

; 416  :     sprite_bug = 2;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 2
$LN1@LDrd16:

; 417  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrd16<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
disp8$4 = 52
tv92 = 54
this$ = 80
??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JR_cc<4,1>, COMDAT

; 757  : void Cpu::JR_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 758  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	mov	DWORD PTR table$[rsp], eax

; 759  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 16
	sar	eax, 4
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 760  : 
; 761  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JR_cc

; 762  : 		JR();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JR@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JR

; 763  :   } else {

	jmp	SHORT $LN1@JR_cc
$LN2@JR_cc:

; 764  :     int8_t disp8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR disp8$4[rsp], al
$LN1@JR_cc:

; 765  :   }
; 766  : 
; 767  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JR_cc<4,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<6,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 6
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<6,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<6,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<6,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 6
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 6
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<6,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::DEC_16bit<3>, COMDAT

; 824  : void Cpu::DEC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 825  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 826  :   --reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 827  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 828  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LDIreg$reg<1,3>, COMDAT

; 432  : void Cpu::LDIreg$reg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 433  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 434  :   reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 435  :   ++reg.raw16[src];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 436  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LDIreg$reg<1,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 36
r1$ = 40
r2$ = 44
tv130 = 48
tv148 = 52
this$ = 80
??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,3>, COMDAT

; 510  : void Cpu::ADD_16bit() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 511  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 512  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR a$[rsp], ax
	xor	eax, eax
	mov	WORD PTR b$[rsp], ax

; 513  :   a = reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR a$[rsp], ax

; 514  :   b = reg.raw16[src];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR b$[rsp], ax

; 515  :   reg.raw16[dest] = a + b;

	movzx	eax, WORD PTR a$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 516  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 4095				; 00000fffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 4095				; 00000fffH
	add	eax, ecx
	mov	WORD PTR r1$[rsp], ax

; 517  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR r1$[rsp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[rsp], 0
$LN4@ADD_16bit:
	movzx	eax, BYTE PTR tv130[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 518  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR r2$[rsp], eax

; 519  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR r2$[rsp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[rsp], 0
$LN6@ADD_16bit:
	movzx	eax, BYTE PTR tv148[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 520  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 521  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
disp8$4 = 52
tv92 = 54
this$ = 80
??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JR_cc<7,0>, COMDAT

; 757  : void Cpu::JR_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 758  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 759  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 760  : 
; 761  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 0
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JR_cc

; 762  : 		JR();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JR@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JR

; 763  :   } else {

	jmp	SHORT $LN1@JR_cc
$LN2@JR_cc:

; 764  :     int8_t disp8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR disp8$4[rsp], al
$LN1@JR_cc:

; 765  :   }
; 766  : 
; 767  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JR_cc<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<7,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 7
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<7,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<7,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<7,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 7
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 7
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<7,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::INC_16bit<3>, COMDAT

; 789  : void Cpu::INC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 790  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 791  :   ++reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 792  :   Tick();Tick();Tick();Tick(); 

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 793  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::INC_16bit<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::LDI$regreg<3,1>, COMDAT

; 420  : void Cpu::LDI$regreg() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 421  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 422  : 	++reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 423  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::LDI$regreg<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv78 = 32
tv95 = 34
this$ = 64
??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrd16<3>, COMDAT

; 412  : void Cpu::LDrd16() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 413  : 	reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv78[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv78[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 414  : 	reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv95[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv95[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 415  :   if (dest != RegAF && (reg.raw16[dest]>=0xFE00&&reg.raw16[dest]<=0xFEFF) && emu_->lcd_driver()->lcdc().lcd_enable == 1)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN1@LDrd16
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN1@LDrd16

; 416  :     sprite_bug = 2;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 2
$LN1@LDrd16:

; 417  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrd16<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
table$ = 40
disp8$4 = 52
tv92 = 54
this$ = 80
??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::JR_cc<7,1>, COMDAT

; 757  : void Cpu::JR_cc() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 758  :   int table[2] = {((reg.F.raw & (1<<condbit))>>condbit),

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	mov	DWORD PTR table$[rsp], eax

; 759  :     ~((reg.F.raw & (1<<condbit))>>condbit)};

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	eax, 128				; 00000080H
	sar	eax, 7
	not	eax
	mov	DWORD PTR table$[rsp+4], eax

; 760  : 
; 761  :   if (table[inv]&1) {

	mov	eax, 4
	imul	rax, 1
	mov	eax, DWORD PTR table$[rsp+rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@JR_cc

; 762  : 		JR();

	mov	rcx, QWORD PTR this$[rsp]
	call	?JR@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::JR

; 763  :   } else {

	jmp	SHORT $LN1@JR_cc
$LN2@JR_cc:

; 764  :     int8_t disp8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR disp8$4[rsp], al
$LN1@JR_cc:

; 765  :   }
; 766  : 
; 767  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::JR_cc<7,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<4,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 4
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<4,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<4,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<4,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 4
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 4
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::DEC_16bit<2>, COMDAT

; 824  : void Cpu::DEC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 825  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 826  :   --reg.raw16[dest];

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 827  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 828  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<1,2>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<1,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 36
r1$ = 40
r2$ = 44
tv130 = 48
tv148 = 52
this$ = 80
??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,2>, COMDAT

; 510  : void Cpu::ADD_16bit() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 511  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 512  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR a$[rsp], ax
	xor	eax, eax
	mov	WORD PTR b$[rsp], ax

; 513  :   a = reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR a$[rsp], ax

; 514  :   b = reg.raw16[src];

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR b$[rsp], ax

; 515  :   reg.raw16[dest] = a + b;

	movzx	eax, WORD PTR a$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 516  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 4095				; 00000fffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 4095				; 00000fffH
	add	eax, ecx
	mov	WORD PTR r1$[rsp], ax

; 517  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR r1$[rsp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[rsp], 0
$LN4@ADD_16bit:
	movzx	eax, BYTE PTR tv130[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 518  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR r2$[rsp], eax

; 519  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR r2$[rsp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[rsp], 0
$LN6@ADD_16bit:
	movzx	eax, BYTE PTR tv148[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 520  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 521  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<5,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 5
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<5,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<5,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<5,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 5
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 5
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<5,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::INC_16bit<2>, COMDAT

; 789  : void Cpu::INC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 790  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 791  :   ++reg.raw16[dest];

	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 792  :   Tick();Tick();Tick();Tick(); 

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 793  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::INC_16bit<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<2,1>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<2,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv78 = 32
tv95 = 34
this$ = 64
??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrd16<2>, COMDAT

; 412  : void Cpu::LDrd16() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 413  : 	reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv78[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv78[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 414  : 	reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv95[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv95[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 415  :   if (dest != RegAF && (reg.raw16[dest]>=0xFE00&&reg.raw16[dest]<=0xFEFF) && emu_->lcd_driver()->lcdc().lcd_enable == 1)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN1@LDrd16
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN1@LDrd16

; 416  :     sprite_bug = 2;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 2
$LN1@LDrd16:

; 417  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrd16<2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<2,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 2
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<2,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<2,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<2,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 2
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::DEC_16bit<1>, COMDAT

; 824  : void Cpu::DEC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 825  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 826  :   --reg.raw16[dest];

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	dec	ax
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 827  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 828  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::DEC_16bit<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDr$r<1,1>, COMDAT

; 397  : void Cpu::LDr$r() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 398  : 	reg.raw8[dest] = mem_->Read8(reg.raw16[src]);

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 399  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDr$r<1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 36
r1$ = 40
r2$ = 44
tv130 = 48
tv148 = 52
this$ = 80
??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::ADD_16bit<3,1>, COMDAT

; 510  : void Cpu::ADD_16bit() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 511  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 512  :   uint16_t a=0,b=0;

	xor	eax, eax
	mov	WORD PTR a$[rsp], ax
	xor	eax, eax
	mov	WORD PTR b$[rsp], ax

; 513  :   a = reg.raw16[dest];

	mov	eax, 2
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR a$[rsp], ax

; 514  :   b = reg.raw16[src];

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	mov	WORD PTR b$[rsp], ax

; 515  :   reg.raw16[dest] = a + b;

	movzx	eax, WORD PTR a$[rsp]
	movzx	ecx, WORD PTR b$[rsp]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 516  :   uint16_t r1 = (a&0xFFF) + (b&0xFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 4095				; 00000fffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 4095				; 00000fffH
	add	eax, ecx
	mov	WORD PTR r1$[rsp], ax

; 517  :   reg.F.H = r1>0xFFF?1:0;

	movzx	eax, WORD PTR r1$[rsp]
	cmp	eax, 4095				; 00000fffH
	jle	SHORT $LN3@ADD_16bit
	mov	DWORD PTR tv130[rsp], 1
	jmp	SHORT $LN4@ADD_16bit
$LN3@ADD_16bit:
	mov	DWORD PTR tv130[rsp], 0
$LN4@ADD_16bit:
	movzx	eax, BYTE PTR tv130[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 518  :   uint32_t r2 = (a&0xFFFF) + (b&0xFFFF);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, WORD PTR b$[rsp]
	and	ecx, 65535				; 0000ffffH
	add	eax, ecx
	mov	DWORD PTR r2$[rsp], eax

; 519  :   reg.F.C = r2>0xFFFF?1:0;

	cmp	DWORD PTR r2$[rsp], 65535		; 0000ffffH
	jbe	SHORT $LN5@ADD_16bit
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN6@ADD_16bit
$LN5@ADD_16bit:
	mov	DWORD PTR tv148[rsp], 0
$LN6@ADD_16bit:
	movzx	eax, BYTE PTR tv148[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 520  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 521  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::ADD_16bit<3,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
d8$1 = 32
a8$2 = 33
a8$3 = 34
d16$4 = 36
d16$5 = 40
tv79 = 44
tv92 = 46
tv145 = 48
tv169 = 50
tv193 = 52
tv206 = 54
tv232 = 56
tv245 = 58
this$ = 80
??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD<3,0,10>, COMDAT

; 446  : void Cpu::LD() {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 447  :   if (mode == 10) { //dest,d8

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN11@LD

; 448  : 		reg.raw8[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv79[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv79[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN10@LD
$LN11@LD:

; 449  : 	}else if (mode == 11) { //(dest),d8

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@LD

; 450  : 		auto d8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv92[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv92[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR d8$1[rsp], al

; 451  : 		mem_->Write8(reg.raw16[dest],d8);

	mov	eax, 2
	imul	rax, 3
	movzx	r8d, BYTE PTR d8$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rcx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN8@LD
$LN9@LD:

; 452  : 	} else if (mode == 12) { //0xFF00+d8 src

	xor	eax, eax
	test	eax, eax
	je	$LN7@LD

; 453  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv145[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv145[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$2[rsp], al

; 454  : 		mem_->Write8(0xFF00+a8,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	movzx	ecx, BYTE PTR a8$2[rsp]
	add	ecx, 65280				; 0000ff00H
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN6@LD
$LN7@LD:

; 455  : 	} else if (mode == 13) { //dest,0xFF00+d8 

	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@LD

; 456  :     uint8_t a8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv169[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv169[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR a8$3[rsp], al

; 457  : 		reg.raw8[dest] = mem_->Read8(0xFF00+a8);

	movzx	eax, BYTE PTR a8$3[rsp]
	add	eax, 65280				; 0000ff00H
	movzx	edx, ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
	jmp	$LN4@LD
$LN5@LD:

; 458  : 	} else if (mode == 14) { //(d16),src

	xor	eax, eax
	test	eax, eax
	je	$LN3@LD

; 459  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv193[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv193[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$4[rsp], ax

; 460  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv206[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv206[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$4[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$4[rsp], ax

; 461  :     mem_->Write8(d16,reg.raw8[src]);

	mov	eax, 1
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rcx+rax+2096]
	movzx	edx, WORD PTR d16$4[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
	jmp	$LN2@LD
$LN3@LD:

; 462  : 	} else if (mode == 15) { //src,(d16)

	xor	eax, eax
	test	eax, eax
	je	$LN1@LD

; 463  : 		uint16_t d16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv232[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv232[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR d16$5[rsp], ax

; 464  : 		d16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv245[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv245[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR d16$5[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR d16$5[rsp], ax

; 465  :     reg.raw8[dest] = mem_->Read8(d16);

	movzx	edx, WORD PTR d16$5[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al
$LN1@LD:
$LN2@LD:
$LN4@LD:
$LN6@LD:
$LN8@LD:
$LN10@LD:

; 466  : 	}
; 467  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD<3,0,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::DEC_8bit<3,0>, COMDAT

; 796  : void Cpu::DEC_8bit() {

$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 797  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 798  : 
; 799  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	$LN6@DEC_8bit

; 800  :     //updateCpuFlagH(reg.raw8[dest],1,1);
; 801  :     --reg.raw8[dest];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	dec	al
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 802  :     if ((reg.raw8[dest]&0xF)==0xF)

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN5@DEC_8bit

; 803  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 804  :     else 

	jmp	SHORT $LN4@DEC_8bit
$LN5@DEC_8bit:

; 805  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN4@DEC_8bit:

; 806  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 807  :   } else {

	jmp	$LN3@DEC_8bit
$LN6@DEC_8bit:

; 808  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 809  : 
; 810  :     //updateCpuFlagH(data,1,1);
; 811  :     --data;

	movzx	eax, BYTE PTR data$1[rsp]
	dec	al
	mov	BYTE PTR data$1[rsp], al

; 812  :     if ((data&0xF)==0xF)

	movzx	eax, BYTE PTR data$1[rsp]
	and	eax, 15
	cmp	eax, 15
	jne	SHORT $LN2@DEC_8bit

; 813  :       reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 814  :     else

	jmp	SHORT $LN1@DEC_8bit
$LN2@DEC_8bit:

; 815  :       reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DEC_8bit:

; 816  :     updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 817  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8
$LN3@DEC_8bit:

; 818  : 
; 819  :   }
; 820  :   
; 821  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::DEC_8bit<3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
data$1 = 32
this$ = 64
??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::INC_8bit<3,0>, COMDAT

; 770  : void Cpu::INC_8bit() {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 771  :   reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 772  : 
; 773  :   if (mode==0) {

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@INC_8bit

; 774  :     updateCpuFlagH(reg.raw8[dest],1,0);

	mov	eax, 1
	imul	rax, 3
	xor	r9d, r9d
	mov	r8b, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 775  :     ++reg.raw8[dest];

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+2096]
	inc	al
	mov	ecx, 1
	imul	rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rdx+rcx+2096], al

; 776  :     updateCpuFlagZ(reg.raw8[dest]);

	mov	eax, 1
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rcx+rax+2096]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 777  :   } else {

	jmp	SHORT $LN1@INC_8bit
$LN2@INC_8bit:

; 778  :     uint8_t data = mem_->Read8(reg.HL);

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR data$1[rsp], al

; 779  : 		updateCpuFlagH(data,1,0);

	xor	r9d, r9d
	mov	r8b, 1
	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 780  :     ++data;

	movzx	eax, BYTE PTR data$1[rsp]
	inc	al
	mov	BYTE PTR data$1[rsp], al

; 781  :     mem_->Write8(reg.HL,data);

	movzx	r8d, BYTE PTR data$1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 782  :      updateCpuFlagZ(data);

	movzx	edx, BYTE PTR data$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@INC_8bit:

; 783  :   }
; 784  :     
; 785  :  
; 786  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::INC_8bit<3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::INC_16bit<1>, COMDAT

; 789  : void Cpu::INC_16bit() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 790  :   simulateSpriteBug();

	mov	rcx, QWORD PTR this$[rsp]
	call	?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::simulateSpriteBug

; 791  :   ++reg.raw16[dest];

	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	inc	ax
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 792  :   Tick();Tick();Tick();Tick(); 

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 793  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::INC_16bit<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LD$rr<1,1>, COMDAT

; 392  : void Cpu::LD$rr() { //(dest), src

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 393  : 	mem_->Write8(reg.raw16[dest],reg.raw8[src]);

	mov	eax, 1
	imul	rax, 1
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	movzx	r8d, BYTE PTR [rdx+rax+2096]
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+rcx+2096]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 394  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LD$rr<1,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
;	COMDAT ??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
tv78 = 32
tv95 = 34
this$ = 64
??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDrd16<1>, COMDAT

; 412  : void Cpu::LDrd16() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 413  : 	reg.raw16[dest] = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv78[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv78[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 414  : 	reg.raw16[dest] |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv95[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv95[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx+2096]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	WORD PTR [rdx+rcx+2096], ax

; 415  :   if (dest != RegAF && (reg.raw16[dest]>=0xFE00&&reg.raw16[dest]<=0xFEFF) && emu_->lcd_driver()->lcdc().lcd_enable == 1)

	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65024				; 0000fe00H
	jl	SHORT $LN1@LDrd16
	mov	eax, 2
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rcx+rax+2096]
	cmp	eax, 65279				; 0000feffH
	jg	SHORT $LN1@LDrd16
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, rax
	call	?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ; emulation::gb::LCDDriver::lcdc
	movzx	eax, BYTE PTR [rax]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN1@LDrd16

; 416  :     sprite_bug = 2;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 2
$LN1@LDrd16:

; 417  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDrd16<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ
_TEXT	SEGMENT
this$ = 16
?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ PROC	; emulation::gb::Emu::timer, COMDAT

; 24   : 	Timer* timer() { return &timer_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 3096				; 00000c18H
	pop	rdi
	ret	0
?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ ENDP	; emulation::gb::Emu::timer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ
_TEXT	SEGMENT
this$ = 16
?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ PROC ; emulation::gb::Emu::sc, COMDAT

; 23   : 	SoundController* sc() { return &sc_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2808				; 00000af8H
	pop	rdi
	ret	0
?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ENDP ; emulation::gb::Emu::sc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ
_TEXT	SEGMENT
this$ = 16
?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ PROC ; emulation::gb::Emu::lcd_driver, COMDAT

; 22   :   LCDDriver* lcd_driver() { return &lcd_driver_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2712				; 00000a98H
	pop	rdi
	ret	0
?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ENDP ; emulation::gb::Emu::lcd_driver
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ
_TEXT	SEGMENT
this$ = 16
?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ PROC	; emulation::gb::Emu::memory, COMDAT

; 21   :   Memory* memory() { return &memory_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2232				; 000008b8H
	pop	rdi
	ret	0
?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ENDP	; emulation::gb::Emu::memory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\emu.h
;	COMDAT ?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ
_TEXT	SEGMENT
this$ = 16
?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ PROC ; emulation::gb::Emu::cartridge, COMDAT

; 19   :   Cartridge* cartridge() { return &cartridge_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 64					; 00000040H
	pop	rdi
	ret	0
?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ENDP ; emulation::gb::Emu::cartridge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
a$ = 32
this$ = 64
?DAA@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::DAA

; 995  : void Cpu::DAA() {

$LN12:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 996  :  int a = reg.A;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2097]
	mov	DWORD PTR a$[rsp], eax

; 997  : 
; 998  :   if (!reg.F.N)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@DAA

; 999  :   {
; 1000 :       if (reg.F.H || (a & 0xF) > 9)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@DAA
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 15
	cmp	eax, 9
	jle	SHORT $LN8@DAA
$LN7@DAA:

; 1001 :           a += 0x06;

	mov	eax, DWORD PTR a$[rsp]
	add	eax, 6
	mov	DWORD PTR a$[rsp], eax
$LN8@DAA:

; 1002 :       if (reg.F.C || a > 0x9F)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@DAA
	cmp	DWORD PTR a$[rsp], 159			; 0000009fH
	jle	SHORT $LN6@DAA
$LN5@DAA:

; 1003 :           a += 0x60;

	mov	eax, DWORD PTR a$[rsp]
	add	eax, 96					; 00000060H
	mov	DWORD PTR a$[rsp], eax
$LN6@DAA:

; 1004 :   }
; 1005 :   else

	jmp	SHORT $LN4@DAA
$LN9@DAA:

; 1006 :   {
; 1007 :     if (reg.F.H)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@DAA

; 1008 :       a = (a - 6) & 0xFF;

	mov	eax, DWORD PTR a$[rsp]
	sub	eax, 6
	and	eax, 255				; 000000ffH
	mov	DWORD PTR a$[rsp], eax
$LN3@DAA:

; 1009 :       if (reg.F.C)

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@DAA

; 1010 :           a -= 0x60;

	mov	eax, DWORD PTR a$[rsp]
	sub	eax, 96					; 00000060H
	mov	DWORD PTR a$[rsp], eax
$LN2@DAA:
$LN4@DAA:

; 1011 :   }
; 1012 : 
; 1013 : 
; 1014 :   if ((a & 0x100) == 0x100)

	mov	eax, DWORD PTR a$[rsp]
	and	eax, 256				; 00000100H
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN1@DAA

; 1015 :       reg.F.C = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@DAA:

; 1016 : 
; 1017 :   a &= 0xFF;

	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR a$[rsp], eax

; 1018 : 
; 1019 :   updateCpuFlagZ(a);

	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 1020 :   reg.F.H = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 1021 :   reg.A = (uint8_t)a;

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax+2097], cl

; 1022 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?DAA@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::DAA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?RETI@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RETI

; 990  : void Cpu::RETI() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 991  : 	EI();

	mov	rcx, QWORD PTR this$[rsp]
	call	?EI@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::EI

; 992  : 	RET();

	mov	rcx, QWORD PTR this$[rsp]
	call	?RET@Cpu@gb@emulation@@AEAAXXZ		; emulation::gb::Cpu::RET

; 993  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?RETI@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RETI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?EI@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::EI

; 985  : void Cpu::EI() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 986  :   ime = true;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2120], 1

; 987  : }

	pop	rdi
	ret	0
?EI@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::EI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?DI@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::DI

; 981  : void Cpu::DI() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 982  :   ime = false;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2120], 0

; 983  : }

	pop	rdi
	ret	0
?DI@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::DI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?CP_HL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::CP_HL

; 977  : void Cpu::CP_HL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 978  :   CP(reg.A,mem_->Read8(reg.HL));

	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, WORD PTR [rax+2102]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	r8d, al
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 979  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?CP_HL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::CP_HL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv75 = 32
this$ = 64
?CP_d8@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::CP_d8

; 973  : void Cpu::CP_d8() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 974  :   CP(reg.A,mem_->Read8(reg.PC++));

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv75[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv75[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	r8d, al
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR [rax+2097]
	mov	rcx, QWORD PTR this$[rsp]
	call	?CP@Cpu@gb@emulation@@AEAAXEE@Z		; emulation::gb::Cpu::CP

; 975  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?CP_d8@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::CP_d8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
a$ = 56
b$ = 64
?CP@Cpu@gb@emulation@@AEAAXEE@Z PROC			; emulation::gb::Cpu::CP

; 961  : void Cpu::CP(uint8_t a, uint8_t b) {

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 962  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 963  :   updateCpuFlagC(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 964  :   updateCpuFlagH(a,b,1);

	mov	r9d, 1
	movzx	r8d, BYTE PTR b$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 965  :   updateCpuFlagZ(a-b);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	sub	eax, ecx
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ

; 966  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?CP@Cpu@gb@emulation@@AEAAXEE@Z ENDP			; emulation::gb::Cpu::CP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
r$ = 0
oldC$ = 8
this$ = 32
?RRA@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RRA

; 950  : void Cpu::RRA() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 951  :   uint8_t& r = reg.A;;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2097				; 00000831H
	mov	QWORD PTR r$[rsp], rax

; 952  :   uint8_t oldC = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR oldC$[rsp], al

; 953  :   reg.F.C = r & 1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 954  :   r = r >> 1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	sar	eax, 1
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 955  :   r |= oldC << 7;

	movzx	eax, BYTE PTR oldC$[rsp]
	shl	eax, 7
	mov	rcx, QWORD PTR r$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 956  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 957  :   reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 958  :   //updateCpuFlagZ(r);
; 959  : }

	add	rsp, 16
	pop	rdi
	ret	0
?RRA@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RRA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
r$ = 0
oldC$ = 8
this$ = 32
?RLA@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RLA

; 939  : void Cpu::RLA() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 940  :   uint8_t& r = reg.A;;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2097				; 00000831H
	mov	QWORD PTR r$[rsp], rax

; 941  :   uint8_t oldC = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR oldC$[rsp], al

; 942  :   reg.F.C = (r&0x80)>>7;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 128				; 00000080H
	sar	eax, 7
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 943  :   r = r << 1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	shl	eax, 1
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 944  :   r |= oldC;

	movzx	eax, BYTE PTR oldC$[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 945  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 946  :     reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 947  :   //updateCpuFlagZ(r);
; 948  : }

	add	rsp, 16
	pop	rdi
	ret	0
?RLA@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RLA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
r$ = 0
this$ = 32
?RRCA@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RRCA

; 929  : void Cpu::RRCA() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 930  :   uint8_t& r = reg.A;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2097				; 00000831H
	mov	QWORD PTR r$[rsp], rax

; 931  :   reg.F.C = r&1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 932  :   r = r >> 1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	sar	eax, 1
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 933  :   r |= reg.F.C<<7;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	shl	eax, 7
	mov	rcx, QWORD PTR r$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 934  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 935  :     reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 936  :   //updateCpuFlagZ(r);
; 937  : }

	add	rsp, 16
	pop	rdi
	ret	0
?RRCA@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RRCA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
r$ = 0
this$ = 32
?RLCA@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RLCA

; 919  : void Cpu::RLCA() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 920  :   uint8_t& r = reg.A;

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2097				; 00000831H
	mov	QWORD PTR r$[rsp], rax

; 921  :   reg.F.C = (r&0x80)>>7;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 128				; 00000080H
	sar	eax, 7
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 922  :   r = r << 1;

	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	shl	eax, 1
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 923  :   r |= reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	mov	rcx, QWORD PTR r$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$[rsp]
	mov	BYTE PTR [rcx], al

; 924  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 925  :     reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 926  :  // updateCpuFlagZ(r);
; 927  : }

	add	rsp, 16
	pop	rdi
	ret	0
?RLCA@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RLCA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?RET@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RET

; 882  : void Cpu::RET() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 883  :   reg.PC = pop();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 884  :   reg.PC |= pop() << 8;

	mov	rcx, QWORD PTR this$[rsp]
	call	?pop@Cpu@gb@emulation@@AEAAEXZ		; emulation::gb::Cpu::pop
	movzx	eax, al
	shl	eax, 8
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+2106]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 885  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 886  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?RET@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RET
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
nn$ = 32
tv74 = 36
tv87 = 38
this$ = 64
?CALL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::CALL

; 858  : void Cpu::CALL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 859  :   uint16_t nn;
; 860  :   nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv74[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv74[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$[rsp], ax

; 861  :   nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv87[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv87[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$[rsp], ax

; 862  :   pushPC();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pushPC@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::pushPC

; 863  :   reg.PC = nn;

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR nn$[rsp]
	mov	WORD PTR [rax+2106], cx

; 864  : 
; 865  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 866  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?CALL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::CALL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?JP_HL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::JP_HL

; 853  : void Cpu::JP_HL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 854  :   reg.PC = reg.HL;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+2102]
	mov	WORD PTR [rax+2106], cx

; 855  : }

	pop	rdi
	ret	0
?JP_HL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::JP_HL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
nn$ = 32
tv74 = 36
tv87 = 38
this$ = 64
?JP@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::JP

; 830  : void Cpu::JP() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 831  :   uint16_t nn;
; 832  :   nn = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv74[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv74[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR nn$[rsp], ax

; 833  :   nn |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv87[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv87[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR nn$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR nn$[rsp], ax

; 834  :   reg.PC = nn;

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR nn$[rsp]
	mov	WORD PTR [rax+2106], cx

; 835  : 
; 836  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 837  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?JP@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::JP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
disp8$ = 32
tv74 = 34
this$ = 64
?JR@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::JR

; 750  : void Cpu::JR() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 751  : 	 int8_t disp8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv74[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv74[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR disp8$[rsp], al

; 752  :    reg.PC += disp8;

	movsx	eax, BYTE PTR disp8$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+2106]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 753  :    Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 754  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?JR@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::JR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
code$ = 36
getr$ = 72
setr$ = 120
test$6 = 148
bitshift$7 = 149
test$8 = 150
bitshift$9 = 151
test$10 = 152
bitshift$11 = 153
r$12 = 154
n0$13 = 155
n1$14 = 156
r$15 = 157
r$16 = 158
r$17 = 159
oldC$18 = 160
r$19 = 161
oldC$20 = 162
r$21 = 163
r$22 = 164
r$23 = 165
tv80 = 166
tv625 = 168
tv633 = 172
tv248 = 176
this$ = 208
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::PREFIX_CB

; 644  : void Cpu::PREFIX_CB() {

$LN26:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rdi, rsp
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]

; 645  : 	uint8_t code = emu_->memory()->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv80[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	movzx	edx, WORD PTR tv80[rsp]
	mov	rcx, rax
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR code$[rsp], al

; 646  : 
; 647  :   auto getr = [=]() {
; 648  :     if ((code&0x7) != 6) {
; 649  :       return reg.raw8[reg_index[code&0x7]];
; 650  :     } else {
; 651  : 
; 652  :       return mem_->Read8(reg.HL);
; 653  :     }
; 654  :   };

	mov	r8, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR code$[rsp]
	lea	rcx, QWORD PTR getr$[rsp]
	call	??0<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::<lambda_e6006dac0a8482b356b9f0c5ff6de944>

; 655  : 
; 656  :   auto setr = [=](uint8_t r) {
; 657  :     if ((code&0x7) != 6) {
; 658  :       reg.raw8[reg_index[code&0x7]] = r;
; 659  :     } else {
; 660  :       mem_->Write8(reg.HL,r);
; 661  :     }
; 662  :   };

	mov	r8, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR code$[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??0<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEAA@AEBEPEAVCpu@gb@emulation@@@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::<lambda_dcf6fcf4240e7a010887eba0f732f129>

; 663  : 
; 664  :    if ((code & 0xC0) == 0x40) { //bit

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	$LN21@PREFIX_CB

; 665  :     uint8_t test = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR test$6[rsp], al

; 666  :     uint8_t bitshift = (code&0x38) >> 3;

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 56					; 00000038H
	sar	eax, 3
	mov	BYTE PTR bitshift$7[rsp], al

; 667  :     reg.F.Z = (~(((test&(1<<bitshift))>>bitshift))&0x1);

	movzx	eax, BYTE PTR test$6[rsp]
	movzx	ecx, BYTE PTR bitshift$7[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	movzx	ecx, BYTE PTR bitshift$7[rsp]
	sar	eax, cl
	not	eax
	and	eax, 1
	and	al, 1
	shl	al, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 127					; 0000007fH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 668  :     reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 669  :     reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	jmp	$LN20@PREFIX_CB
$LN21@PREFIX_CB:

; 670  : 
; 671  :   } else if ((code & 0xC0) == 0x80) { //res

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 192				; 000000c0H
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN19@PREFIX_CB

; 672  :     uint8_t test = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR test$8[rsp], al

; 673  :     uint8_t bitshift = (code&0x38) >> 3;

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 56					; 00000038H
	sar	eax, 3
	mov	BYTE PTR bitshift$9[rsp], al

; 674  :     test &= ~(1<<bitshift);

	movzx	eax, BYTE PTR bitshift$9[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv625[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv625[rsp]
	shl	eax, cl
	not	eax
	movzx	ecx, BYTE PTR test$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR test$8[rsp], al

; 675  :     setr(test);

	movzx	edx, BYTE PTR test$8[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()
	jmp	$LN18@PREFIX_CB
$LN19@PREFIX_CB:

; 676  :   } else if ((code & 0xC0) == 0xC0) { //set

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN17@PREFIX_CB

; 677  :     uint8_t test = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR test$10[rsp], al

; 678  :     uint8_t bitshift = (code&0x38) >> 3;

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 56					; 00000038H
	sar	eax, 3
	mov	BYTE PTR bitshift$11[rsp], al

; 679  :     test |= (1<<bitshift);

	movzx	eax, BYTE PTR bitshift$11[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv633[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv633[rsp]
	shl	eax, cl
	movzx	ecx, BYTE PTR test$10[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR test$10[rsp], al

; 680  :     setr(test);

	movzx	edx, BYTE PTR test$10[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()
	jmp	$LN16@PREFIX_CB
$LN17@PREFIX_CB:

; 681  :   } else  if ((code & 0xF8) == 0x30) { //swap

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 48					; 00000030H
	jne	$LN15@PREFIX_CB

; 682  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$12[rsp], al

; 683  :     uint8_t n0 = r&0xF;

	movzx	eax, BYTE PTR r$12[rsp]
	and	eax, 15
	mov	BYTE PTR n0$13[rsp], al

; 684  :     uint8_t n1 = (r&0xF0)>>4;

	movzx	eax, BYTE PTR r$12[rsp]
	and	eax, 240				; 000000f0H
	sar	eax, 4
	mov	BYTE PTR n1$14[rsp], al

; 685  :     r = n1 | (n0<<4);

	movzx	eax, BYTE PTR n1$14[rsp]
	movzx	ecx, BYTE PTR n0$13[rsp]
	shl	ecx, 4
	or	eax, ecx
	mov	BYTE PTR r$12[rsp], al

; 686  :     setr(r);

	movzx	edx, BYTE PTR r$12[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 687  :     reg.F.H  = reg.F.N = reg.F.C = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 239					; 000000efH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 688  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$12[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN14@PREFIX_CB
$LN15@PREFIX_CB:

; 689  :   } else if ((code&0xF8) == 0) { //RLC r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	test	eax, eax
	jne	$LN13@PREFIX_CB

; 690  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$15[rsp], al

; 691  :     reg.F.C = (r&0x80)!=0?1:0;

	movzx	eax, BYTE PTR r$15[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN24@PREFIX_CB
	mov	DWORD PTR tv248[rsp], 1
	jmp	SHORT $LN25@PREFIX_CB
$LN24@PREFIX_CB:
	mov	DWORD PTR tv248[rsp], 0
$LN25@PREFIX_CB:
	movzx	eax, BYTE PTR tv248[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 692  :     r = r << 1;

	movzx	eax, BYTE PTR r$15[rsp]
	shl	eax, 1
	mov	BYTE PTR r$15[rsp], al

; 693  :     r |= reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	movzx	ecx, BYTE PTR r$15[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR r$15[rsp], al

; 694  :     setr(r);

	movzx	edx, BYTE PTR r$15[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 695  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 696  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$15[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN12@PREFIX_CB
$LN13@PREFIX_CB:

; 697  :   } else if ((code&0xF8) == 0x08) { //RRC r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 8
	jne	$LN11@PREFIX_CB

; 698  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$16[rsp], al

; 699  :     reg.F.C = r&1;

	movzx	eax, BYTE PTR r$16[rsp]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 700  :     r = r >> 1;

	movzx	eax, BYTE PTR r$16[rsp]
	sar	eax, 1
	mov	BYTE PTR r$16[rsp], al

; 701  :     r |= reg.F.C<<7;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	shl	eax, 7
	movzx	ecx, BYTE PTR r$16[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR r$16[rsp], al

; 702  :     setr(r);

	movzx	edx, BYTE PTR r$16[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 703  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 704  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$16[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN10@PREFIX_CB
$LN11@PREFIX_CB:

; 705  :   } else if ((code&0xF8) == 0x10) { //RL r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 16
	jne	$LN9@PREFIX_CB

; 706  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$17[rsp], al

; 707  :     uint8_t oldC = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR oldC$18[rsp], al

; 708  :     reg.F.C = ((r&0x80)>>7);

	movzx	eax, BYTE PTR r$17[rsp]
	and	eax, 128				; 00000080H
	sar	eax, 7
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 709  :     r = r << 1;

	movzx	eax, BYTE PTR r$17[rsp]
	shl	eax, 1
	mov	BYTE PTR r$17[rsp], al

; 710  :     r |= oldC;

	movzx	eax, BYTE PTR oldC$18[rsp]
	movzx	ecx, BYTE PTR r$17[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR r$17[rsp], al

; 711  :     setr(r);

	movzx	edx, BYTE PTR r$17[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 712  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 713  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$17[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN8@PREFIX_CB
$LN9@PREFIX_CB:

; 714  :   } else if ((code&0xF8) == 0x18) { //RR r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 24
	jne	$LN7@PREFIX_CB

; 715  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$19[rsp], al

; 716  :     uint8_t oldC = reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	mov	BYTE PTR oldC$20[rsp], al

; 717  :     reg.F.C = r&1;

	movzx	eax, BYTE PTR r$19[rsp]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 718  :     r = r >> 1;

	movzx	eax, BYTE PTR r$19[rsp]
	sar	eax, 1
	mov	BYTE PTR r$19[rsp], al

; 719  :     r |= oldC<<7;

	movzx	eax, BYTE PTR oldC$20[rsp]
	shl	eax, 7
	movzx	ecx, BYTE PTR r$19[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR r$19[rsp], al

; 720  :     setr(r);

	movzx	edx, BYTE PTR r$19[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 721  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 722  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$19[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN6@PREFIX_CB
$LN7@PREFIX_CB:

; 723  : 
; 724  :   } else if ((code&0xF8) == 0x20) { //SLA r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 32					; 00000020H
	jne	$LN5@PREFIX_CB

; 725  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$21[rsp], al

; 726  :     reg.F.C = ((r&0x80)>>7);

	movzx	eax, BYTE PTR r$21[rsp]
	and	eax, 128				; 00000080H
	sar	eax, 7
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 727  :     r = r << 1;

	movzx	eax, BYTE PTR r$21[rsp]
	shl	eax, 1
	mov	BYTE PTR r$21[rsp], al

; 728  :     r &= ~0x01;

	movzx	eax, BYTE PTR r$21[rsp]
	and	eax, -2
	mov	BYTE PTR r$21[rsp], al

; 729  :     setr(r);

	movzx	edx, BYTE PTR r$21[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 730  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 731  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$21[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN4@PREFIX_CB
$LN5@PREFIX_CB:

; 732  :   } else if ((code&0xF8) == 0x28) { //SRA r

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 40					; 00000028H
	jne	$LN3@PREFIX_CB

; 733  :     uint8_t r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$22[rsp], al

; 734  :     reg.F.C = r&1;

	movzx	eax, BYTE PTR r$22[rsp]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 735  :     r = (r&0x80) + (r >> 1);

	movzx	eax, BYTE PTR r$22[rsp]
	and	eax, 128				; 00000080H
	movzx	ecx, BYTE PTR r$22[rsp]
	sar	ecx, 1
	add	eax, ecx
	mov	BYTE PTR r$22[rsp], al

; 736  :     setr(r);

	movzx	edx, BYTE PTR r$22[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 737  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 738  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$22[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
	jmp	$LN2@PREFIX_CB
$LN3@PREFIX_CB:

; 739  :   } else if ((code & 0xF8) == 0x38) { //SRL n

	movzx	eax, BYTE PTR code$[rsp]
	and	eax, 248				; 000000f8H
	cmp	eax, 56					; 00000038H
	jne	$LN1@PREFIX_CB

; 740  :     auto r = getr();

	lea	rcx, QWORD PTR getr$[rsp]
	call	??R<lambda_e6006dac0a8482b356b9f0c5ff6de944>@@QEBAEXZ ; <lambda_e6006dac0a8482b356b9f0c5ff6de944>::operator()
	mov	BYTE PTR r$23[rsp], al

; 741  :     reg.F.C = r&1;

	movzx	eax, BYTE PTR r$23[rsp]
	and	eax, 1
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 742  :     r >>= 1;

	movzx	eax, BYTE PTR r$23[rsp]
	shr	al, 1
	mov	BYTE PTR r$23[rsp], al

; 743  :     setr(r);

	movzx	edx, BYTE PTR r$23[rsp]
	lea	rcx, QWORD PTR setr$[rsp]
	call	??R<lambda_dcf6fcf4240e7a010887eba0f732f129>@@QEBAXE@Z ; <lambda_dcf6fcf4240e7a010887eba0f732f129>::operator()

; 744  :     reg.F.H  = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 745  :     updateCpuFlagZ(r);

	movzx	edx, BYTE PTR r$23[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ; emulation::gb::Cpu::updateCpuFlagZ
$LN1@PREFIX_CB:
$LN2@PREFIX_CB:
$LN4@PREFIX_CB:
$LN6@PREFIX_CB:
$LN8@PREFIX_CB:
$LN10@PREFIX_CB:
$LN12@PREFIX_CB:
$LN14@PREFIX_CB:
$LN16@PREFIX_CB:
$LN18@PREFIX_CB:
$LN20@PREFIX_CB:

; 746  :   }
; 747  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 748  : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::PREFIX_CB
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?CPL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::CPL

; 634  : void Cpu::CPL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 635  :   reg.F.H = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 636  :   reg.F.N = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 637  :   reg.A = ~reg.A;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2097]
	not	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2097], al

; 638  : }

	pop	rdi
	ret	0
?CPL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::CPL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?STOP@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::STOP

; 630  : void Cpu::STOP() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 631  :   cpumode_ = CpuModeStop;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+32], 2

; 632  : }

	pop	rdi
	ret	0
?STOP@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::STOP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?HALT@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::HALT

; 626  : void Cpu::HALT() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 627  :   cpumode_ = CpuModeHalt;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+32], 1

; 628  : }

	pop	rdi
	ret	0
?HALT@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::HALT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?CCF@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::CCF

; 621  : void Cpu::CCF() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 622  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 623  :   reg.F.C = ~reg.F.C;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	not	eax
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 624  : }

	pop	rdi
	ret	0
?CCF@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::CCF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?SCF@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::SCF

; 616  : void Cpu::SCF() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 617  :   reg.F.H = reg.F.N = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 618  :   reg.F.C = 1;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	or	al, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 619  : }

	pop	rdi
	ret	0
?SCF@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::SCF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
a$ = 32
r8$ = 36
tv90 = 38
this$ = 64
?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::ADD_SPr8

; 523  : void Cpu::ADD_SPr8() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 524  :   reg.F.N  = reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 525  : 	uint16_t a = reg.SP;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	mov	WORD PTR a$[rsp], ax

; 526  : 	int8_t r8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv90[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv90[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR r8$[rsp], al

; 527  : 	reg.SP += r8;

	movsx	eax, BYTE PTR r8$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+2104]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2104], ax

; 528  : 
; 529  :   updateCpuFlagC(a&0xFF,r8,0);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	xor	r9d, r9d
	movzx	r8d, BYTE PTR r8$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 530  :   updateCpuFlagH(a&0xFF,r8,0);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	xor	r9d, r9d
	movzx	r8d, BYTE PTR r8$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 531  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 532  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 533  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::ADD_SPr8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
a16$ = 32
tv74 = 36
tv87 = 38
this$ = 64
?LDa16SP@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::LDa16SP

; 491  : void Cpu::LDa16SP() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 492  :   uint16_t a16 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv74[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv74[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	mov	WORD PTR a16$[rsp], ax

; 493  :   a16 |= (mem_->Read8(reg.PC++))<<8;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv87[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv87[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	movzx	eax, al
	shl	eax, 8
	movzx	ecx, WORD PTR a16$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	WORD PTR a16$[rsp], ax

; 494  :   mem_->Write8(a16,reg.SP&0xFF);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	and	eax, 255				; 000000ffH
	movzx	r8d, al
	movzx	edx, WORD PTR a16$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 495  :   mem_->Write8(a16+1,reg.SP>>8);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	sar	eax, 8
	movzx	ecx, WORD PTR a16$[rsp]
	inc	ecx
	movzx	r8d, al
	movzx	edx, cx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 496  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?LDa16SP@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::LDa16SP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
a$ = 32
r8$ = 36
tv90 = 38
this$ = 64
?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ PROC		; emulation::gb::Cpu::LDHLSPr8

; 474  : void Cpu::LDHLSPr8() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 475  : 
; 476  : 
; 477  : 
; 478  :   reg.F.N  = reg.F.Z = 0;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2096]
	and	al, 191					; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 479  : 	uint16_t a = reg.SP;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	mov	WORD PTR a$[rsp], ax

; 480  : 	int8_t r8 = mem_->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv90[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	movzx	edx, WORD PTR tv90[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	BYTE PTR r8$[rsp], al

; 481  : 	reg.HL = (reg.SP + r8);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	movsx	ecx, BYTE PTR r8$[rsp]
	add	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2102], ax

; 482  :   updateCpuFlagC(a&0xFF,r8,0);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	xor	r9d, r9d
	movzx	r8d, BYTE PTR r8$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagC

; 483  :   updateCpuFlagH(a&0xFF,r8,0);

	movzx	eax, WORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	xor	r9d, r9d
	movzx	r8d, BYTE PTR r8$[rsp]
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ; emulation::gb::Cpu::updateCpuFlagH

; 484  :   /*uint16_t r1 = (a&0xFFF) + (r8&0xFFF);
; 485  :   reg.F.H = r1>0xFFF?1:0;
; 486  :   uint32_t r2 = (a&0xFFFF) + (r8&0xFFFF);
; 487  :   reg.F.C = r2>0xFFFF?1:0;*/
; 488  : 	Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 489  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ ENDP		; emulation::gb::Cpu::LDHLSPr8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?LDSPHL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::LDSPHL

; 469  : void Cpu::LDSPHL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 470  :   reg.SP = reg.HL;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR [rcx+2102]
	mov	WORD PTR [rax+2104], cx

; 471  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 472  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?LDSPHL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::LDSPHL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
t$ = 32
this$ = 64
?RST@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::RST

; 379  : void Cpu::RST() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 380  :   pushPC();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pushPC@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::pushPC

; 381  :   uint8_t t = (opcode&0x38)>>3;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	and	eax, 56					; 00000038H
	sar	eax, 3
	mov	BYTE PTR t$[rsp], al

; 382  :   reg.PC = t*8;

	movzx	eax, BYTE PTR t$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 383  :   Tick();Tick();Tick();Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick

; 384  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?RST@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::RST
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
a$ = 0
this$ = 32
?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::ILLEGAL

; 375  : void Cpu::ILLEGAL() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 376  : 	int a = 1;

	mov	DWORD PTR a$[rsp], 1

; 377  : }

	add	rsp, 16
	pop	rdi
	ret	0
?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::ILLEGAL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?NOP@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::NOP

; 368  : void Cpu::NOP() { 

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 369  :   //Tick();
; 370  :   //Tick();
; 371  :   //Tick();
; 372  :   //Tick();
; 373  : }

	pop	rdi
	ret	0
?NOP@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::NOP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?pushPC@Cpu@gb@emulation@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?pushPC@Cpu@gb@emulation@@AEAAXXZ PROC			; emulation::gb::Cpu::pushPC, COMDAT

; 137  :   void pushPC() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 138  :     push((reg.PC&0xFF00)>>8);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 139  :     push(reg.PC&0xFF);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	and	eax, 255				; 000000ffH
	movzx	edx, al
	mov	rcx, QWORD PTR this$[rsp]
	call	?push@Cpu@gb@emulation@@AEAAXE@Z	; emulation::gb::Cpu::push

; 140  :   }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?pushPC@Cpu@gb@emulation@@AEAAXXZ ENDP			; emulation::gb::Cpu::pushPC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?pop@Cpu@gb@emulation@@AEAAEXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
?pop@Cpu@gb@emulation@@AEAAEXZ PROC			; emulation::gb::Cpu::pop, COMDAT

; 119  :   uint8_t pop() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 120  :     return mem_->Read8(reg.SP++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	mov	WORD PTR tv74[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2104], ax
	movzx	edx, WORD PTR tv74[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8

; 121  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?pop@Cpu@gb@emulation@@AEAAEXZ ENDP			; emulation::gb::Cpu::pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?push@Cpu@gb@emulation@@AEAAXE@Z
_TEXT	SEGMENT
tv71 = 32
this$ = 64
data$ = 72
?push@Cpu@gb@emulation@@AEAAXE@Z PROC			; emulation::gb::Cpu::push, COMDAT

; 115  :   void push(uint8_t data) {

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 116  :     mem_->Write8(--reg.SP,data);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2104]
	dec	ax
	mov	WORD PTR tv71[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR tv71[rsp]
	mov	WORD PTR [rax+2104], cx
	movzx	r8d, BYTE PTR data$[rsp]
	movzx	edx, WORD PTR tv71[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+2112]
	call	?Write8@Memory@gb@emulation@@QEAAXGE@Z	; emulation::gb::Memory::Write8

; 117  :   }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?push@Cpu@gb@emulation@@AEAAXE@Z ENDP			; emulation::gb::Cpu::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z
_TEXT	SEGMENT
tv69 = 0
this$ = 32
r$ = 40
?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z PROC		; emulation::gb::Cpu::updateCpuFlagZ, COMDAT

; 111  :   void updateCpuFlagZ(uint8_t r) {

$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 112  :     reg.F.Z = r == 0?1:0;

	movzx	eax, BYTE PTR r$[rsp]
	test	eax, eax
	jne	SHORT $LN3@updateCpuF
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN4@updateCpuF
$LN3@updateCpuF:
	mov	DWORD PTR tv69[rsp], 0
$LN4@updateCpuF:
	movzx	eax, BYTE PTR tv69[rsp]
	and	al, 1
	shl	al, 7
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 127					; 0000007fH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 113  :   }

	add	rsp, 16
	pop	rdi
	ret	0
?updateCpuFlagZ@Cpu@gb@emulation@@AEAAXE@Z ENDP		; emulation::gb::Cpu::updateCpuFlagZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z
_TEXT	SEGMENT
r1$1 = 0
tv76 = 4
tv93 = 8
this$ = 32
a$ = 40
b$ = 48
mode$ = 56
?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z PROC	; emulation::gb::Cpu::updateCpuFlagH, COMDAT

; 98   :   void updateCpuFlagH(uint8_t a,uint8_t b,int mode) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 99   :     /*if((dest^b^a)&0x10)
; 100  :       reg.F.H=1;
; 101  :     else
; 102  :       reg.F.H=0;*/
; 103  :     if (mode == 0) {

	cmp	DWORD PTR mode$[rsp], 0
	jne	SHORT $LN2@updateCpuF

; 104  :       uint8_t r1 = (a&0xF) + (b&0xF);

	movzx	eax, BYTE PTR a$[rsp]
	and	eax, 15
	movzx	ecx, BYTE PTR b$[rsp]
	and	ecx, 15
	add	eax, ecx
	mov	BYTE PTR r1$1[rsp], al

; 105  :       reg.F.H = r1>0xF?1:0;

	movzx	eax, BYTE PTR r1$1[rsp]
	cmp	eax, 15
	jle	SHORT $LN5@updateCpuF
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN6@updateCpuF
$LN5@updateCpuF:
	mov	DWORD PTR tv76[rsp], 0
$LN6@updateCpuF:
	movzx	eax, BYTE PTR tv76[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 106  :     } else {

	jmp	SHORT $LN1@updateCpuF
$LN2@updateCpuF:

; 107  :       reg.F.H = (a&0xF) < (b&0xF) ? 1 : 0;

	movzx	eax, BYTE PTR a$[rsp]
	and	eax, 15
	movzx	ecx, BYTE PTR b$[rsp]
	and	ecx, 15
	cmp	eax, ecx
	jge	SHORT $LN7@updateCpuF
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN8@updateCpuF
$LN7@updateCpuF:
	mov	DWORD PTR tv93[rsp], 0
$LN8@updateCpuF:
	movzx	eax, BYTE PTR tv93[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@updateCpuF:

; 108  :     }
; 109  :   }

	add	rsp, 16
	pop	rdi
	ret	0
?updateCpuFlagH@Cpu@gb@emulation@@AEAAXEEH@Z ENDP	; emulation::gb::Cpu::updateCpuFlagH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.h
;	COMDAT ?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z
_TEXT	SEGMENT
r2$1 = 0
tv74 = 4
tv89 = 8
this$ = 32
a$ = 40
b$ = 48
mode$ = 56
?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z PROC	; emulation::gb::Cpu::updateCpuFlagC, COMDAT

; 89   :   void updateCpuFlagC(uint8_t a,uint8_t b,int mode) {

$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 90   :     if (mode == 0) {

	cmp	DWORD PTR mode$[rsp], 0
	jne	SHORT $LN2@updateCpuF

; 91   :       uint16_t r2 = (a) + (b);

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	add	eax, ecx
	mov	WORD PTR r2$1[rsp], ax

; 92   :       reg.F.C = r2>0xFF?1:0;

	movzx	eax, WORD PTR r2$1[rsp]
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN5@updateCpuF
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN6@updateCpuF
$LN5@updateCpuF:
	mov	DWORD PTR tv74[rsp], 0
$LN6@updateCpuF:
	movzx	eax, BYTE PTR tv74[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al

; 93   :     } else {

	jmp	SHORT $LN1@updateCpuF
$LN2@updateCpuF:

; 94   :       reg.F.C = a < b ? 1 : 0;

	movzx	eax, BYTE PTR a$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	cmp	eax, ecx
	jge	SHORT $LN7@updateCpuF
	mov	DWORD PTR tv89[rsp], 1
	jmp	SHORT $LN8@updateCpuF
$LN7@updateCpuF:
	mov	DWORD PTR tv89[rsp], 0
$LN8@updateCpuF:
	movzx	eax, BYTE PTR tv89[rsp]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR [rcx+2096]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2096], al
$LN1@updateCpuF:

; 95   :     }
; 96   :   }

	add	rsp, 16
	pop	rdi
	ret	0
?updateCpuFlagC@Cpu@gb@emulation@@AEAAXEEH@Z ENDP	; emulation::gb::Cpu::updateCpuFlagC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ PROC	; emulation::gb::Cpu::simulateSpriteBug

; 1024 : void Cpu::simulateSpriteBug() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 1025 :    
; 1026 :   if (sprite_bug == 1) {

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+16]
	cmp	eax, 1
	jne	SHORT $LN1@simulateSp

; 1027 :     emu_->lcd_driver()->sprite_bug_counter = 80;//20cycles

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	BYTE PTR [rax+16], 80			; 00000050H

; 1028 :     //auto oam = emu_->memory()->oam();
; 1029 :     //for (int i=8;i<0xA0;++i)
; 1030 :     //  oam[i] = rand()&0xFF;
; 1031 :     sprite_bug = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 0
$LN1@simulateSp:

; 1032 :   }
; 1033 :   
; 1034 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?simulateSpriteBug@Cpu@gb@emulation@@AEAAXXZ ENDP	; emulation::gb::Cpu::simulateSpriteBug
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
test$1 = 32
tv94 = 34
tv150 = 36
tv182 = 40
tv200 = 48
tv218 = 56
tv236 = 64
tv254 = 72
this$ = 96
dt$ = 104
?Step@Cpu@gb@emulation@@QEAAXN@Z PROC			; emulation::gb::Cpu::Step

; 323  : void Cpu::Step(double dt) {

$LN19:
	movsdx	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 324  :   this->dt = dt;

	mov	rax, QWORD PTR this$[rsp]
	movsdx	xmm0, QWORD PTR dt$[rsp]
	movsdx	QWORD PTR [rax+40], xmm0

; 325  : 	cycles = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 326  :   //reg.F._unused = 0;//always 0 according to docs
; 327  :   //StopAt(0xC47A);
; 328  :   //StopAt(0x0100);
; 329  :   //StopAt(0x0073);
; 330  :   if (cpumode_ == CpuModeStop) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+32], 2
	jne	SHORT $LN16@Step

; 331  :     cycles = 1;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 1

; 332  :     return;

	jmp	$LN17@Step
$LN16@Step:

; 333  :   }
; 334  :   if (cpumode_ == CpuModeNormal) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	$LN15@Step

; 335  :     if (sprite_bug!=0) --sprite_bug;

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+16]
	test	eax, eax
	je	SHORT $LN14@Step
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+16]
	dec	al
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+16], al
$LN14@Step:

; 336  :     opcode = emu_->memory()->Read8(reg.PC++);

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	mov	WORD PTR tv94[rsp], ax
	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, WORD PTR [rax+2106]
	inc	ax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	movzx	edx, WORD PTR tv94[rsp]
	mov	rcx, rax
	call	?Read8@Memory@gb@emulation@@QEAAEG@Z	; emulation::gb::Memory::Read8
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2121], al

; 337  :     (this->*(instructions[opcode]))();

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2121]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	call	QWORD PTR [rdx+rax*8+48]
	jmp	SHORT $LN13@Step
$LN15@Step:

; 338  :   } else if (cpumode_ == CpuModeHalt) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax+32], 1
	jne	SHORT $LN12@Step

; 339  :     Tick();

	mov	rcx, QWORD PTR this$[rsp]
	call	?Tick@Cpu@gb@emulation@@QEAAXXZ		; emulation::gb::Cpu::Tick
$LN12@Step:
$LN13@Step:

; 340  :   }
; 341  : 
; 342  :   if (ime) {

	mov	rax, QWORD PTR this$[rsp]
	movzx	eax, BYTE PTR [rax+2120]
	test	eax, eax
	je	$LN11@Step

; 343  :     uint8_t test = emu_->memory()->interrupt_enable() & emu_->memory()->interrupt_flag();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_enable
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv150[rsp], eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR tv150[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR test$1[rsp], al

; 344  : 		if (test) {

	movzx	eax, BYTE PTR test$1[rsp]
	test	eax, eax
	je	$LN10@Step

; 345  : 			ime = false;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2120], 0

; 346  :       cpumode_ = CpuModeNormal;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+32], 0

; 347  : 			pushPC();

	mov	rcx, QWORD PTR this$[rsp]
	call	?pushPC@Cpu@gb@emulation@@AEAAXXZ	; emulation::gb::Cpu::pushPC

; 348  : 			if (test & 0x1) { //vblank

	movzx	eax, BYTE PTR test$1[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@Step

; 349  : 				reg.PC = 0x0040;

	mov	eax, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 350  : 				emu_->memory()->interrupt_flag() &= ~0x1;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv182[rsp], rax
	mov	rax, QWORD PTR tv182[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -2
	mov	rcx, QWORD PTR tv182[rsp]
	mov	BYTE PTR [rcx], al
	jmp	$LN8@Step
$LN9@Step:

; 351  : 			} else if (test & 0x2) {

	movzx	eax, BYTE PTR test$1[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN7@Step

; 352  : 				reg.PC = 0x0048; //lcdc status

	mov	eax, 72					; 00000048H
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 353  : 				emu_->memory()->interrupt_flag() &= ~0x2;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv200[rsp], rax
	mov	rax, QWORD PTR tv200[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -3
	mov	rcx, QWORD PTR tv200[rsp]
	mov	BYTE PTR [rcx], al
	jmp	$LN6@Step
$LN7@Step:

; 354  : 			} else if (test & 0x4) {

	movzx	eax, BYTE PTR test$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN5@Step

; 355  : 				reg.PC = 0x0050; //timer overflow

	mov	eax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 356  : 				emu_->memory()->interrupt_flag() &= ~0x4;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv218[rsp], rax
	mov	rax, QWORD PTR tv218[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -5
	mov	rcx, QWORD PTR tv218[rsp]
	mov	BYTE PTR [rcx], al
	jmp	$LN4@Step
$LN5@Step:

; 357  : 			} else if (test & 0x8) {

	movzx	eax, BYTE PTR test$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN3@Step

; 358  : 				reg.PC = 0x0058; //serial transfer

	mov	eax, 88					; 00000058H
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 359  : 				emu_->memory()->interrupt_flag() &= ~0x8;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv236[rsp], rax
	mov	rax, QWORD PTR tv236[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -9
	mov	rcx, QWORD PTR tv236[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN2@Step
$LN3@Step:

; 360  : 			} else if (test & 0x10) {

	movzx	eax, BYTE PTR test$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN1@Step

; 361  : 				reg.PC = 0x0060; //hi-lo p10-p13

	mov	eax, 96					; 00000060H
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 362  : 				emu_->memory()->interrupt_flag() &= ~0x10;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ; emulation::gb::Memory::interrupt_flag
	mov	QWORD PTR tv254[rsp], rax
	mov	rax, QWORD PTR tv254[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -17
	mov	rcx, QWORD PTR tv254[rsp]
	mov	BYTE PTR [rcx], al
$LN1@Step:
$LN2@Step:
$LN4@Step:
$LN6@Step:
$LN8@Step:
$LN10@Step:
$LN11@Step:
$LN17@Step:

; 363  : 			}
; 364  : 		}
; 365  :   }
; 366  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?Step@Cpu@gb@emulation@@QEAAXN@Z ENDP			; emulation::gb::Cpu::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
tv85 = 32
this$ = 64
?Tick@Cpu@gb@emulation@@QEAAXXZ PROC			; emulation::gb::Cpu::Tick

; 313  : void Cpu::Tick() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 314  :   ++cycles;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+24]
	inc	rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 315  : 	emu_->timer()->Tick();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?timer@Emu@gb@emulation@@QEAAPEAVTimer@23@XZ ; emulation::gb::Emu::timer
	mov	rcx, rax
	call	?Tick@Timer@gb@emulation@@QEAAXXZ	; emulation::gb::Timer::Tick

; 316  :   emu_->cartridge()->mbc->Tick();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?cartridge@Emu@gb@emulation@@QEAAPEAVCartridge@23@XZ ; emulation::gb::Emu::cartridge
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	rax, QWORD PTR tv85[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv85[rsp]
	call	QWORD PTR [rax+32]

; 317  : 	emu_->memory()->Tick();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, rax
	call	?Tick@Memory@gb@emulation@@QEAAXXZ	; emulation::gb::Memory::Tick

; 318  :   emu_->lcd_driver()->Step(dt);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?lcd_driver@Emu@gb@emulation@@QEAAPEAVLCDDriver@23@XZ ; emulation::gb::Emu::lcd_driver
	mov	rcx, QWORD PTR this$[rsp]
	movsdx	xmm1, QWORD PTR [rcx+40]
	mov	rcx, rax
	call	?Step@LCDDriver@gb@emulation@@QEAAXN@Z	; emulation::gb::LCDDriver::Step

; 319  : 	emu_->sc()->Step(dt);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?sc@Emu@gb@emulation@@QEAAPEAVSoundController@23@XZ ; emulation::gb::Emu::sc
	mov	rcx, QWORD PTR this$[rsp]
	movsdx	xmm1, QWORD PTR [rcx+40]
	mov	rcx, rax
	call	?Step@SoundController@gb@emulation@@QEAAXN@Z ; emulation::gb::SoundController::Step

; 320  : 
; 321  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Tick@Cpu@gb@emulation@@QEAAXXZ ENDP			; emulation::gb::Cpu::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
?Reset@Cpu@gb@emulation@@UEAAXXZ PROC			; emulation::gb::Cpu::Reset

; 304  : void Cpu::Reset() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 305  : 	memset(&reg,0,sizeof(reg));

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 2096				; 00000830H
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 306  :   reg.PC = 0;

	xor	eax, eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2106], ax

; 307  :   cycles = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0

; 308  :   ime = false;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+2120], 0

; 309  :   cpumode_ = CpuModeNormal;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+32], 0

; 310  :   sprite_bug = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	BYTE PTR [rax+16], 0

; 311  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Reset@Cpu@gb@emulation@@UEAAXXZ ENDP			; emulation::gb::Cpu::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
?Deinitialize@Cpu@gb@emulation@@UEAAXXZ PROC		; emulation::gb::Cpu::Deinitialize

; 300  : void Cpu::Deinitialize() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 301  : 
; 302  : }

	pop	rdi
	ret	0
?Deinitialize@Cpu@gb@emulation@@UEAAXXZ ENDP		; emulation::gb::Cpu::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
emu$ = 56
?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z PROC	; emulation::gb::Cpu::Initialize

; 294  : void Cpu::Initialize(Emu* emu) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 295  :   Component::Initialize(emu);

	mov	rdx, QWORD PTR emu$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ; emulation::gb::Component::Initialize

; 296  :   mem_ = emu_->memory();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?memory@Emu@gb@emulation@@QEAAPEAVMemory@23@XZ ; emulation::gb::Emu::memory
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+2112], rax

; 297  :   Reset();

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	QWORD PTR [rax+16]

; 298  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Initialize@Cpu@gb@emulation@@UEAAXPEAVEmu@23@@Z ENDP	; emulation::gb::Cpu::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 16
??1Cpu@gb@emulation@@QEAA@XZ PROC			; emulation::gb::Cpu::~Cpu

; 290  : Cpu::~Cpu() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Cpu@gb@emulation@@6B@
	mov	QWORD PTR [rax], rcx

; 291  : 
; 292  : }

	pop	rdi
	ret	0
??1Cpu@gb@emulation@@QEAA@XZ ENDP			; emulation::gb::Cpu::~Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\cpu.cpp
_TEXT	SEGMENT
this$ = 48
??0Cpu@gb@emulation@@QEAA@XZ PROC			; emulation::gb::Cpu::Cpu

; 15   : Cpu::Cpu() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0Component@gb@emulation@@QEAA@XZ
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Cpu@gb@emulation@@6B@
	mov	QWORD PTR [rax], rcx

; 16   : 	instructions[0x00] = &Cpu::NOP;

	mov	eax, 8
	imul	rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?NOP@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::NOP
	mov	QWORD PTR [rcx+rax+48], rdx

; 17   : 	instructions[0x01] = &Cpu::LDrd16<RegBC>;

	mov	eax, 8
	imul	rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrd16@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrd16<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 18   : 	instructions[0x02] = &Cpu::LD$rr<RegBC,RegA>;

	mov	eax, 8
	imul	rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$00$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<1,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 19   : 	instructions[0x03] = &Cpu::INC_16bit<RegBC>;

	mov	eax, 8
	imul	rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_16bit<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 20   : 	instructions[0x04] = &Cpu::INC_8bit<RegB,0>;

	mov	eax, 8
	imul	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 21   : 	instructions[0x05] = &Cpu::DEC_8bit<RegB,0>;

	mov	eax, 8
	imul	rax, 5
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 22   : 	instructions[0x06] = &Cpu::LD<RegB,0,10>;

	mov	eax, 8
	imul	rax, 6
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$02$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<3,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 23   : 	instructions[0x07] = &Cpu::RLCA;

	mov	eax, 8
	imul	rax, 7
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RLCA@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RLCA
	mov	QWORD PTR [rcx+rax+48], rdx

; 24   : 	instructions[0x08] = &Cpu::LDa16SP;

	mov	eax, 8
	imul	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?LDa16SP@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDa16SP
	mov	QWORD PTR [rcx+rax+48], rdx

; 25   : 	instructions[0x09] = &Cpu::ADD_16bit<RegHL,RegBC>;

	mov	eax, 8
	imul	rax, 9
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD_16bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD_16bit<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 26   : 	instructions[0x0A] = &Cpu::LDr$r<RegA,RegBC>;

	mov	eax, 8
	imul	rax, 10
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$00$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<1,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 27   : 	instructions[0x0B] = &Cpu::DEC_16bit<RegBC>;

	mov	eax, 8
	imul	rax, 11
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_16bit@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_16bit<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 28   : 	instructions[0x0C] = &Cpu::INC_8bit<RegC,0>;

	mov	eax, 8
	imul	rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 29   : 	instructions[0x0D] = &Cpu::DEC_8bit<RegC,0>;

	mov	eax, 8
	imul	rax, 13
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 30   : 	instructions[0x0E] = &Cpu::LD<RegC,0,10>;

	mov	eax, 8
	imul	rax, 14
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$01$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<2,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 31   : 	instructions[0x0F] = &Cpu::RRCA;

	mov	eax, 8
	imul	rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RRCA@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RRCA
	mov	QWORD PTR [rcx+rax+48], rdx

; 32   : 
; 33   : 	instructions[0x10] = &Cpu::STOP;

	mov	eax, 8
	imul	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?STOP@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::STOP
	mov	QWORD PTR [rcx+rax+48], rdx

; 34   : 	instructions[0x11] = &Cpu::LDrd16<RegDE>;

	mov	eax, 8
	imul	rax, 17
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrd16@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrd16<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 35   : 	instructions[0x12] = &Cpu::LD$rr<RegDE,RegA>;

	mov	eax, 8
	imul	rax, 18
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$01$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<2,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 36   : 	instructions[0x13] = &Cpu::INC_16bit<RegDE>;

	mov	eax, 8
	imul	rax, 19
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_16bit<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 37   : 	instructions[0x14] = &Cpu::INC_8bit<RegD,0>;

	mov	eax, 8
	imul	rax, 20
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 38   : 	instructions[0x15] = &Cpu::DEC_8bit<RegD,0>;

	mov	eax, 8
	imul	rax, 21
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 39   : 	instructions[0x16] = &Cpu::LD<RegD,0,10>;

	mov	eax, 8
	imul	rax, 22
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$04$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<5,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 40   : 	instructions[0x17] = &Cpu::RLA;

	mov	eax, 8
	imul	rax, 23
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RLA@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RLA
	mov	QWORD PTR [rcx+rax+48], rdx

; 41   : 	instructions[0x18] = &Cpu::JR;

	mov	eax, 8
	imul	rax, 24
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?JR@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JR
	mov	QWORD PTR [rcx+rax+48], rdx

; 42   : 	instructions[0x19] = &Cpu::ADD_16bit<RegHL,RegDE>;

	mov	eax, 8
	imul	rax, 25
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD_16bit@$02$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD_16bit<3,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 43   : 	instructions[0x1A] = &Cpu::LDr$r<RegA,RegDE>;

	mov	eax, 8
	imul	rax, 26
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$00$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<1,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 44   : 	instructions[0x1B] = &Cpu::DEC_16bit<RegDE>;

	mov	eax, 8
	imul	rax, 27
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_16bit@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_16bit<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 45   : 	instructions[0x1C] = &Cpu::INC_8bit<RegE,0>;

	mov	eax, 8
	imul	rax, 28
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 46   : 	instructions[0x1D] = &Cpu::DEC_8bit<RegE,0>;

	mov	eax, 8
	imul	rax, 29
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 47   : 	instructions[0x1E] = &Cpu::LD<RegE,0,10>;

	mov	eax, 8
	imul	rax, 30
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$03$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<4,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 48   : 	instructions[0x1F] = &Cpu::RRA;

	mov	eax, 8
	imul	rax, 31
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RRA@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RRA
	mov	QWORD PTR [rcx+rax+48], rdx

; 49   : 	
; 50   : 	instructions[0x20] = &Cpu::JR_cc<CpuFlagsZ,1>;

	mov	eax, 8
	imul	rax, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JR_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JR_cc<7,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 51   : 	instructions[0x21] = &Cpu::LDrd16<RegHL>;

	mov	eax, 8
	imul	rax, 33					; 00000021H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrd16@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrd16<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 52   : 	instructions[0x22] = &Cpu::LDI$regreg<RegHL,RegA>;

	mov	eax, 8
	imul	rax, 34					; 00000022H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDI$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDI$regreg<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 53   : 	instructions[0x23] = &Cpu::INC_16bit<RegHL>;

	mov	eax, 8
	imul	rax, 35					; 00000023H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_16bit<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 54   : 	instructions[0x24] = &Cpu::INC_8bit<RegH,0>;

	mov	eax, 8
	imul	rax, 36					; 00000024H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 55   : 	instructions[0x25] = &Cpu::DEC_8bit<RegH,0>;

	mov	eax, 8
	imul	rax, 37					; 00000025H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 56   : 	instructions[0x26] = &Cpu::LD<RegH,0,10>;

	mov	eax, 8
	imul	rax, 38					; 00000026H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$06$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<7,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 57   :   instructions[0x27] = &Cpu::DAA;

	mov	eax, 8
	imul	rax, 39					; 00000027H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?DAA@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DAA
	mov	QWORD PTR [rcx+rax+48], rdx

; 58   : 	instructions[0x28] = &Cpu::JR_cc<CpuFlagsZ,0>;

	mov	eax, 8
	imul	rax, 40					; 00000028H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JR_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JR_cc<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 59   : 	instructions[0x29] = &Cpu::ADD_16bit<RegHL,RegHL>;

	mov	eax, 8
	imul	rax, 41					; 00000029H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD_16bit@$02$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD_16bit<3,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 60   : 	instructions[0x2A] = &Cpu::LDIreg$reg<RegA,RegHL>;

	mov	eax, 8
	imul	rax, 42					; 0000002aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDIreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDIreg$reg<1,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 61   : 	instructions[0x2B] = &Cpu::DEC_16bit<RegHL>;

	mov	eax, 8
	imul	rax, 43					; 0000002bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_16bit@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_16bit<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 62   : 	instructions[0x2C] = &Cpu::INC_8bit<RegL,0>;

	mov	eax, 8
	imul	rax, 44					; 0000002cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 63   : 	instructions[0x2D] = &Cpu::DEC_8bit<RegL,0>;

	mov	eax, 8
	imul	rax, 45					; 0000002dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 64   : 	instructions[0x2E] = &Cpu::LD<RegL,0,10>;

	mov	eax, 8
	imul	rax, 46					; 0000002eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$05$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<6,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 65   : 	instructions[0x2F] = &Cpu::CPL;

	mov	eax, 8
	imul	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?CPL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CPL
	mov	QWORD PTR [rcx+rax+48], rdx

; 66   : 
; 67   : 	instructions[0x30] = &Cpu::JR_cc<CpuFlagsC,1>;

	mov	eax, 8
	imul	rax, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JR_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JR_cc<4,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 68   : 	instructions[0x31] = &Cpu::LDrd16<RegSP>;

	mov	eax, 8
	imul	rax, 49					; 00000031H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrd16@$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrd16<4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 69   : 	instructions[0x32] = &Cpu::LDD$regreg<RegHL,RegA>;

	mov	eax, 8
	imul	rax, 50					; 00000032H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDD$regreg@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDD$regreg<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 70   : 	instructions[0x33] = &Cpu::INC_16bit<RegSP>;

	mov	eax, 8
	imul	rax, 51					; 00000033H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_16bit<4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 71   : 	instructions[0x34] = &Cpu::INC_8bit<RegHL,1>;

	mov	eax, 8
	imul	rax, 52					; 00000034H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 72   : 	instructions[0x35] = &Cpu::DEC_8bit<RegHL,1>;

	mov	eax, 8
	imul	rax, 53					; 00000035H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 73   : 	instructions[0x36] = &Cpu::LD<RegHL,0,11>;

	mov	eax, 8
	imul	rax, 54					; 00000036H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$02$0A@$0L@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<3,0,11>
	mov	QWORD PTR [rcx+rax+48], rdx

; 74   : 	instructions[0x37] = &Cpu::SCF;

	mov	eax, 8
	imul	rax, 55					; 00000037H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?SCF@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SCF
	mov	QWORD PTR [rcx+rax+48], rdx

; 75   : 	instructions[0x38] = &Cpu::JR_cc<CpuFlagsC,0>;

	mov	eax, 8
	imul	rax, 56					; 00000038H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JR_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JR_cc<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 76   : 	instructions[0x39] = &Cpu::ADD_16bit<RegHL,RegSP>;

	mov	eax, 8
	imul	rax, 57					; 00000039H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD_16bit@$02$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD_16bit<3,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 77   : 	instructions[0x3A] = &Cpu::LDDreg$reg<RegA,RegHL>;

	mov	eax, 8
	imul	rax, 58					; 0000003aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDDreg$reg@$00$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDDreg$reg<1,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 78   : 	instructions[0x3B] = &Cpu::DEC_16bit<RegSP>;

	mov	eax, 8
	imul	rax, 59					; 0000003bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_16bit@$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_16bit<4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 79   : 	instructions[0x3C] = &Cpu::INC_8bit<RegA,0>;

	mov	eax, 8
	imul	rax, 60					; 0000003cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$INC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::INC_8bit<1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 80   : 	instructions[0x3D] = &Cpu::DEC_8bit<RegA,0>;

	mov	eax, 8
	imul	rax, 61					; 0000003dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$DEC_8bit@$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DEC_8bit<1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 81   : 	instructions[0x3E] = &Cpu::LD<RegA,0,10>;

	mov	eax, 8
	imul	rax, 62					; 0000003eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$00$0A@$09@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<1,0,10>
	mov	QWORD PTR [rcx+rax+48], rdx

; 82   :   instructions[0x3F] = &Cpu::CCF;

	mov	eax, 8
	imul	rax, 63					; 0000003fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?CCF@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CCF
	mov	QWORD PTR [rcx+rax+48], rdx

; 83   : 
; 84   : 	instructions[0x40] = &Cpu::LDrr<RegB,RegB>;

	mov	eax, 8
	imul	rax, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 85   : 	instructions[0x41] = &Cpu::LDrr<RegB,RegC>;

	mov	eax, 8
	imul	rax, 65					; 00000041H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 86   : 	instructions[0x42] = &Cpu::LDrr<RegB,RegD>;

	mov	eax, 8
	imul	rax, 66					; 00000042H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 87   : 	instructions[0x43] = &Cpu::LDrr<RegB,RegE>;

	mov	eax, 8
	imul	rax, 67					; 00000043H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 88   : 	instructions[0x44] = &Cpu::LDrr<RegB,RegH>;

	mov	eax, 8
	imul	rax, 68					; 00000044H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 89   : 	instructions[0x45] = &Cpu::LDrr<RegB,RegL>;

	mov	eax, 8
	imul	rax, 69					; 00000045H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 90   : 	instructions[0x46] = &Cpu::LDr$r<RegB,RegHL>;

	mov	eax, 8
	imul	rax, 70					; 00000046H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$02$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<3,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 91   : 	instructions[0x47] = &Cpu::LDrr<RegB,RegA>;

	mov	eax, 8
	imul	rax, 71					; 00000047H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 92   : 	instructions[0x48] = &Cpu::LDrr<RegC,RegB>;

	mov	eax, 8
	imul	rax, 72					; 00000048H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 93   : 	instructions[0x49] = &Cpu::LDrr<RegC,RegC>;

	mov	eax, 8
	imul	rax, 73					; 00000049H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 94   : 	instructions[0x4A] = &Cpu::LDrr<RegC,RegD>;

	mov	eax, 8
	imul	rax, 74					; 0000004aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 95   : 	instructions[0x4B] = &Cpu::LDrr<RegC,RegE>;

	mov	eax, 8
	imul	rax, 75					; 0000004bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 96   : 	instructions[0x4C] = &Cpu::LDrr<RegC,RegH>;

	mov	eax, 8
	imul	rax, 76					; 0000004cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 97   : 	instructions[0x4D] = &Cpu::LDrr<RegC,RegL>;

	mov	eax, 8
	imul	rax, 77					; 0000004dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 98   : 	instructions[0x4E] = &Cpu::LDr$r<RegC,RegHL>;

	mov	eax, 8
	imul	rax, 78					; 0000004eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$01$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<2,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 99   : 	instructions[0x4F] = &Cpu::LDrr<RegC,RegA>;

	mov	eax, 8
	imul	rax, 79					; 0000004fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$01$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<2,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 100  : 
; 101  : 	instructions[0x50] = &Cpu::LDrr<RegD,RegB>;

	mov	eax, 8
	imul	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 102  : 	instructions[0x51] = &Cpu::LDrr<RegD,RegC>;

	mov	eax, 8
	imul	rax, 81					; 00000051H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 103  : 	instructions[0x52] = &Cpu::LDrr<RegD,RegD>;

	mov	eax, 8
	imul	rax, 82					; 00000052H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 104  : 	instructions[0x53] = &Cpu::LDrr<RegD,RegE>;

	mov	eax, 8
	imul	rax, 83					; 00000053H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 105  : 	instructions[0x54] = &Cpu::LDrr<RegD,RegH>;

	mov	eax, 8
	imul	rax, 84					; 00000054H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 106  : 	instructions[0x55] = &Cpu::LDrr<RegD,RegL>;

	mov	eax, 8
	imul	rax, 85					; 00000055H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 107  : 	instructions[0x56] = &Cpu::LDr$r<RegD,RegHL>;

	mov	eax, 8
	imul	rax, 86					; 00000056H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$04$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<5,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 108  : 	instructions[0x57] = &Cpu::LDrr<RegD,RegA>;

	mov	eax, 8
	imul	rax, 87					; 00000057H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$04$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<5,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 109  : 	instructions[0x58] = &Cpu::LDrr<RegE,RegB>;

	mov	eax, 8
	imul	rax, 88					; 00000058H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 110  : 	instructions[0x59] = &Cpu::LDrr<RegE,RegC>;

	mov	eax, 8
	imul	rax, 89					; 00000059H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 111  : 	instructions[0x5A] = &Cpu::LDrr<RegE,RegD>;

	mov	eax, 8
	imul	rax, 90					; 0000005aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 112  : 	instructions[0x5B] = &Cpu::LDrr<RegE,RegE>;

	mov	eax, 8
	imul	rax, 91					; 0000005bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 113  : 	instructions[0x5C] = &Cpu::LDrr<RegE,RegH>;

	mov	eax, 8
	imul	rax, 92					; 0000005cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 114  : 	instructions[0x5D] = &Cpu::LDrr<RegE,RegL>;

	mov	eax, 8
	imul	rax, 93					; 0000005dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 115  : 	instructions[0x5E] = &Cpu::LDr$r<RegE,RegHL>;

	mov	eax, 8
	imul	rax, 94					; 0000005eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$03$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<4,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 116  : 	instructions[0x5F] = &Cpu::LDrr<RegE,RegA>;

	mov	eax, 8
	imul	rax, 95					; 0000005fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$03$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<4,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 117  : 
; 118  : 	instructions[0x60] = &Cpu::LDrr<RegH,RegB>;

	mov	eax, 8
	imul	rax, 96					; 00000060H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 119  : 	instructions[0x61] = &Cpu::LDrr<RegH,RegC>;

	mov	eax, 8
	imul	rax, 97					; 00000061H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 120  : 	instructions[0x62] = &Cpu::LDrr<RegH,RegD>;

	mov	eax, 8
	imul	rax, 98					; 00000062H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 121  : 	instructions[0x63] = &Cpu::LDrr<RegH,RegE>;

	mov	eax, 8
	imul	rax, 99					; 00000063H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 122  : 	instructions[0x64] = &Cpu::LDrr<RegH,RegH>;

	mov	eax, 8
	imul	rax, 100				; 00000064H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 123  : 	instructions[0x65] = &Cpu::LDrr<RegH,RegL>;

	mov	eax, 8
	imul	rax, 101				; 00000065H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 124  : 	instructions[0x66] = &Cpu::LDr$r<RegH,RegHL>;

	mov	eax, 8
	imul	rax, 102				; 00000066H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$06$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<7,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 125  : 	instructions[0x67] = &Cpu::LDrr<RegH,RegA>;

	mov	eax, 8
	imul	rax, 103				; 00000067H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$06$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<7,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 126  : 	instructions[0x68] = &Cpu::LDrr<RegL,RegB>;

	mov	eax, 8
	imul	rax, 104				; 00000068H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 127  : 	instructions[0x69] = &Cpu::LDrr<RegL,RegC>;

	mov	eax, 8
	imul	rax, 105				; 00000069H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 128  : 	instructions[0x6A] = &Cpu::LDrr<RegL,RegD>;

	mov	eax, 8
	imul	rax, 106				; 0000006aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 129  : 	instructions[0x6B] = &Cpu::LDrr<RegL,RegE>;

	mov	eax, 8
	imul	rax, 107				; 0000006bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 130  : 	instructions[0x6C] = &Cpu::LDrr<RegL,RegH>;

	mov	eax, 8
	imul	rax, 108				; 0000006cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 131  : 	instructions[0x6D] = &Cpu::LDrr<RegL,RegL>;

	mov	eax, 8
	imul	rax, 109				; 0000006dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 132  : 	instructions[0x6E] = &Cpu::LDr$r<RegL,RegHL>;

	mov	eax, 8
	imul	rax, 110				; 0000006eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$05$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<6,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 133  : 	instructions[0x6F] = &Cpu::LDrr<RegL,RegA>;

	mov	eax, 8
	imul	rax, 111				; 0000006fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$05$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<6,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 134  : 
; 135  : 	instructions[0x70] = &Cpu::LD$rr<RegHL,RegB>;

	mov	eax, 8
	imul	rax, 112				; 00000070H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 136  : 	instructions[0x71] = &Cpu::LD$rr<RegHL,RegC>;

	mov	eax, 8
	imul	rax, 113				; 00000071H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 137  : 	instructions[0x72] = &Cpu::LD$rr<RegHL,RegD>;

	mov	eax, 8
	imul	rax, 114				; 00000072H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 138  : 	instructions[0x73] = &Cpu::LD$rr<RegHL,RegE>;

	mov	eax, 8
	imul	rax, 115				; 00000073H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 139  : 	instructions[0x74] = &Cpu::LD$rr<RegHL,RegH>;

	mov	eax, 8
	imul	rax, 116				; 00000074H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 140  : 	instructions[0x75] = &Cpu::LD$rr<RegHL,RegL>;

	mov	eax, 8
	imul	rax, 117				; 00000075H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 141  : 	instructions[0x76] = &Cpu::HALT;

	mov	eax, 8
	imul	rax, 118				; 00000076H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?HALT@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::HALT
	mov	QWORD PTR [rcx+rax+48], rdx

; 142  : 	instructions[0x77] = &Cpu::LD$rr<RegHL,RegA>;

	mov	eax, 8
	imul	rax, 119				; 00000077H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$rr@$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$rr<3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 143  : 	instructions[0x78] = &Cpu::LDrr<RegA,RegB>;

	mov	eax, 8
	imul	rax, 120				; 00000078H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 144  : 	instructions[0x79] = &Cpu::LDrr<RegA,RegC>;

	mov	eax, 8
	imul	rax, 121				; 00000079H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 145  : 	instructions[0x7A] = &Cpu::LDrr<RegA,RegD>;

	mov	eax, 8
	imul	rax, 122				; 0000007aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 146  : 	instructions[0x7B] = &Cpu::LDrr<RegA,RegE>;

	mov	eax, 8
	imul	rax, 123				; 0000007bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 147  : 	instructions[0x7C] = &Cpu::LDrr<RegA,RegH>;

	mov	eax, 8
	imul	rax, 124				; 0000007cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 148  : 	instructions[0x7D] = &Cpu::LDrr<RegA,RegL>;

	mov	eax, 8
	imul	rax, 125				; 0000007dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 149  : 	instructions[0x7E] = &Cpu::LDr$r<RegA,RegHL>;

	mov	eax, 8
	imul	rax, 126				; 0000007eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$r@$00$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$r<1,3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 150  : 	instructions[0x7F] = &Cpu::LDrr<RegA,RegA>;

	mov	eax, 8
	imul	rax, 127				; 0000007fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDrr@$00$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDrr<1,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 151  : 
; 152  : 	instructions[0x80] = &Cpu::ADD<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 128				; 00000080H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 153  : 	instructions[0x81] = &Cpu::ADD<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 129				; 00000081H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 154  : 	instructions[0x82] = &Cpu::ADD<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 130				; 00000082H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 155  : 	instructions[0x83] = &Cpu::ADD<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 131				; 00000083H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 156  : 	instructions[0x84] = &Cpu::ADD<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 132				; 00000084H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 157  : 	instructions[0x85] = &Cpu::ADD<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 133				; 00000085H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 158  : 	instructions[0x86] = &Cpu::ADD<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 134				; 00000086H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 159  : 	instructions[0x87] = &Cpu::ADD<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 135				; 00000087H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 160  : 	instructions[0x88] = &Cpu::ADC<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 161  : 	instructions[0x89] = &Cpu::ADC<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 137				; 00000089H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 162  : 	instructions[0x8A] = &Cpu::ADC<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 138				; 0000008aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 163  : 	instructions[0x8B] = &Cpu::ADC<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 139				; 0000008bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 164  : 	instructions[0x8C] = &Cpu::ADC<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 140				; 0000008cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 165  : 	instructions[0x8D] = &Cpu::ADC<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 141				; 0000008dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 166  : 	instructions[0x8E] = &Cpu::ADC<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 142				; 0000008eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 167  : 	instructions[0x8F] = &Cpu::ADC<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 143				; 0000008fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 168  : 
; 169  : 	instructions[0x90] = &Cpu::SUB<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 144				; 00000090H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 170  : 	instructions[0x91] = &Cpu::SUB<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 145				; 00000091H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 171  : 	instructions[0x92] = &Cpu::SUB<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 146				; 00000092H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 172  : 	instructions[0x93] = &Cpu::SUB<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 147				; 00000093H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 173  : 	instructions[0x94] = &Cpu::SUB<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 148				; 00000094H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 174  : 	instructions[0x95] = &Cpu::SUB<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 149				; 00000095H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 175  : 	instructions[0x96] = &Cpu::SUB<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 150				; 00000096H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 176  : 	instructions[0x97] = &Cpu::SUB<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 151				; 00000097H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 177  : 	instructions[0x98] = &Cpu::SBC<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 178  : 	instructions[0x99] = &Cpu::SBC<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 153				; 00000099H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 179  : 	instructions[0x9A] = &Cpu::SBC<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 154				; 0000009aH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 180  : 	instructions[0x9B] = &Cpu::SBC<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 155				; 0000009bH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 181  : 	instructions[0x9C] = &Cpu::SBC<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 156				; 0000009cH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 182  : 	instructions[0x9D] = &Cpu::SBC<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 157				; 0000009dH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 183  : 	instructions[0x9E] = &Cpu::SBC<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 158				; 0000009eH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 184  : 	instructions[0x9F] = &Cpu::SBC<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 159				; 0000009fH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 185  : 
; 186  : 	instructions[0xA0] = &Cpu::AND<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 160				; 000000a0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 187  : 	instructions[0xA1] = &Cpu::AND<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 161				; 000000a1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 188  : 	instructions[0xA2] = &Cpu::AND<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 162				; 000000a2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 189  : 	instructions[0xA3] = &Cpu::AND<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 163				; 000000a3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 190  : 	instructions[0xA4] = &Cpu::AND<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 164				; 000000a4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 191  : 	instructions[0xA5] = &Cpu::AND<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 165				; 000000a5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 192  : 	instructions[0xA6] = &Cpu::AND<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 166				; 000000a6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 193  : 	instructions[0xA7] = &Cpu::AND<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 167				; 000000a7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 194  : 	instructions[0xA8] = &Cpu::XOR<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 168				; 000000a8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 195  : 	instructions[0xA9] = &Cpu::XOR<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 169				; 000000a9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 196  : 	instructions[0xAA] = &Cpu::XOR<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 170				; 000000aaH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 197  : 	instructions[0xAB] = &Cpu::XOR<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 171				; 000000abH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 198  : 	instructions[0xAC] = &Cpu::XOR<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 172				; 000000acH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 199  : 	instructions[0xAD] = &Cpu::XOR<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 173				; 000000adH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 200  : 	instructions[0xAE] = &Cpu::XOR<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 174				; 000000aeH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 201  : 	instructions[0xAF] = &Cpu::XOR<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 175				; 000000afH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 202  : 
; 203  : 	instructions[0xB0] = &Cpu::OR<RegA,RegB,0>;

	mov	eax, 8
	imul	rax, 176				; 000000b0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$02$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,3,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 204  : 	instructions[0xB1] = &Cpu::OR<RegA,RegC,0>;

	mov	eax, 8
	imul	rax, 177				; 000000b1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$01$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,2,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 205  : 	instructions[0xB2] = &Cpu::OR<RegA,RegD,0>;

	mov	eax, 8
	imul	rax, 178				; 000000b2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$04$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,5,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 206  : 	instructions[0xB3] = &Cpu::OR<RegA,RegE,0>;

	mov	eax, 8
	imul	rax, 179				; 000000b3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 207  : 	instructions[0xB4] = &Cpu::OR<RegA,RegH,0>;

	mov	eax, 8
	imul	rax, 180				; 000000b4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 208  : 	instructions[0xB5] = &Cpu::OR<RegA,RegL,0>;

	mov	eax, 8
	imul	rax, 181				; 000000b5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$05$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,6,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 209  : 	instructions[0xB6] = &Cpu::OR<RegA,RegHL,1>;

	mov	eax, 8
	imul	rax, 182				; 000000b6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$02$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,3,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 210  : 	instructions[0xB7] = &Cpu::OR<RegA,RegA,0>;

	mov	eax, 8
	imul	rax, 183				; 000000b7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$00$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,1,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 211  :   instructions[0xB8] = &Cpu::CP_reg<RegB>;

	mov	eax, 8
	imul	rax, 184				; 000000b8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 212  :   instructions[0xB9] = &Cpu::CP_reg<RegC>;

	mov	eax, 8
	imul	rax, 185				; 000000b9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 213  :   instructions[0xBA] = &Cpu::CP_reg<RegD>;

	mov	eax, 8
	imul	rax, 186				; 000000baH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$04@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<5>
	mov	QWORD PTR [rcx+rax+48], rdx

; 214  :   instructions[0xBB] = &Cpu::CP_reg<RegE>;

	mov	eax, 8
	imul	rax, 187				; 000000bbH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$03@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<4>
	mov	QWORD PTR [rcx+rax+48], rdx

; 215  :   instructions[0xBC] = &Cpu::CP_reg<RegH>;

	mov	eax, 8
	imul	rax, 188				; 000000bcH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$06@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<7>
	mov	QWORD PTR [rcx+rax+48], rdx

; 216  :   instructions[0xBD] = &Cpu::CP_reg<RegL>;

	mov	eax, 8
	imul	rax, 189				; 000000bdH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$05@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<6>
	mov	QWORD PTR [rcx+rax+48], rdx

; 217  :   instructions[0xBE] = &Cpu::CP_HL;

	mov	eax, 8
	imul	rax, 190				; 000000beH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?CP_HL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_HL
	mov	QWORD PTR [rcx+rax+48], rdx

; 218  :   instructions[0xBF] = &Cpu::CP_reg<RegA>;

	mov	eax, 8
	imul	rax, 191				; 000000bfH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CP_reg@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_reg<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 219  : 	
; 220  : 	instructions[0xC0] = &Cpu::RET_cc<CpuFlagsZ,1>;

	mov	eax, 8
	imul	rax, 192				; 000000c0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$RET_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RET_cc<7,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 221  : 	instructions[0xC1] = &Cpu::POP<RegBC>;

	mov	eax, 8
	imul	rax, 193				; 000000c1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$POP@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::POP<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 222  : 	instructions[0xC2] = &Cpu::JP_cc<CpuFlagsZ,1>;

	mov	eax, 8
	imul	rax, 194				; 000000c2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JP_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP_cc<7,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 223  : 	instructions[0xC3] = &Cpu::JP;

	mov	eax, 8
	imul	rax, 195				; 000000c3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?JP@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP
	mov	QWORD PTR [rcx+rax+48], rdx

; 224  : 	instructions[0xC4] = &Cpu::CALL_cc<CpuFlagsZ,1>;

	mov	eax, 8
	imul	rax, 196				; 000000c4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CALL_cc@$06$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CALL_cc<7,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 225  : 	instructions[0xC5] = &Cpu::PUSH<RegBC>;

	mov	eax, 8
	imul	rax, 197				; 000000c5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$PUSH@$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::PUSH<1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 226  :   instructions[0xC6] = &Cpu::ADD<RegA,0,2>;

	mov	eax, 8
	imul	rax, 198				; 000000c6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADD@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 227  : 	instructions[0xC7] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 199				; 000000c7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 228  : 	instructions[0xC8] = &Cpu::RET_cc<CpuFlagsZ,0>;

	mov	eax, 8
	imul	rax, 200				; 000000c8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$RET_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RET_cc<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 229  : 	instructions[0xC9] = &Cpu::RET;

	mov	eax, 8
	imul	rax, 201				; 000000c9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RET@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RET
	mov	QWORD PTR [rcx+rax+48], rdx

; 230  : 	instructions[0xCA] = &Cpu::JP_cc<CpuFlagsZ,0>;

	mov	eax, 8
	imul	rax, 202				; 000000caH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JP_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP_cc<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 231  : 	instructions[0xCB] = &Cpu::PREFIX_CB;

	mov	eax, 8
	imul	rax, 203				; 000000cbH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?PREFIX_CB@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::PREFIX_CB
	mov	QWORD PTR [rcx+rax+48], rdx

; 232  : 	instructions[0xCC] = &Cpu::CALL_cc<CpuFlagsZ,0>;

	mov	eax, 8
	imul	rax, 204				; 000000ccH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CALL_cc@$06$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CALL_cc<7,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 233  : 	instructions[0xCD] = &Cpu::CALL;

	mov	eax, 8
	imul	rax, 205				; 000000cdH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?CALL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CALL
	mov	QWORD PTR [rcx+rax+48], rdx

; 234  : 	instructions[0xCE] = &Cpu::ADC<RegA,0,2>;

	mov	eax, 8
	imul	rax, 206				; 000000ceH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$ADC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADC<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 235  : 	instructions[0xCF] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 207				; 000000cfH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 236  : 
; 237  : 	instructions[0xD0] = &Cpu::RET_cc<CpuFlagsC,1>;

	mov	eax, 8
	imul	rax, 208				; 000000d0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$RET_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RET_cc<4,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 238  : 	instructions[0xD1] = &Cpu::POP<RegDE>;

	mov	eax, 8
	imul	rax, 209				; 000000d1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$POP@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::POP<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 239  : 	instructions[0xD2] = &Cpu::JP_cc<CpuFlagsC,1>;

	mov	eax, 8
	imul	rax, 210				; 000000d2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JP_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP_cc<4,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 240  : 	instructions[0xD3] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 211				; 000000d3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 241  : 	instructions[0xD4] = &Cpu::CALL_cc<CpuFlagsC,1>;

	mov	eax, 8
	imul	rax, 212				; 000000d4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CALL_cc@$03$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CALL_cc<4,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 242  : 	instructions[0xD5] = &Cpu::PUSH<RegDE>;

	mov	eax, 8
	imul	rax, 213				; 000000d5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$PUSH@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::PUSH<2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 243  :   instructions[0xD6] = &Cpu::SUB<RegA,0,2>;

	mov	eax, 8
	imul	rax, 214				; 000000d6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SUB@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SUB<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 244  : 	instructions[0xD7] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 215				; 000000d7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 245  : 	instructions[0xD8] = &Cpu::RET_cc<CpuFlagsC,0>;

	mov	eax, 8
	imul	rax, 216				; 000000d8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$RET_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RET_cc<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 246  : 	instructions[0xD9] = &Cpu::RETI;

	mov	eax, 8
	imul	rax, 217				; 000000d9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RETI@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RETI
	mov	QWORD PTR [rcx+rax+48], rdx

; 247  : 	instructions[0xDA] = &Cpu::JP_cc<CpuFlagsC,0>;

	mov	eax, 8
	imul	rax, 218				; 000000daH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$JP_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP_cc<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 248  : 	instructions[0xDB] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 219				; 000000dbH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 249  : 	instructions[0xDC] = &Cpu::CALL_cc<CpuFlagsC,0>;

	mov	eax, 8
	imul	rax, 220				; 000000dcH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$CALL_cc@$03$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CALL_cc<4,0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 250  : 	instructions[0xDD] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 221				; 000000ddH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 251  : 	instructions[0xDE] = &Cpu::SBC<RegA,0,2>;

	mov	eax, 8
	imul	rax, 222				; 000000deH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$SBC@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::SBC<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 252  : 	instructions[0xDF] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 223				; 000000dfH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 253  : 	
; 254  : 	instructions[0xE0] = &Cpu::LD<0,RegA,12>;

	mov	eax, 8
	imul	rax, 224				; 000000e0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$0A@$00$0M@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<0,1,12>
	mov	QWORD PTR [rcx+rax+48], rdx

; 255  : 	instructions[0xE1] = &Cpu::POP<RegHL>;

	mov	eax, 8
	imul	rax, 225				; 000000e1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$POP@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::POP<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 256  : 	instructions[0xE2] = &Cpu::LD$FF00rr<RegC,RegA>;

	mov	eax, 8
	imul	rax, 226				; 000000e2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD$FF00rr@$01$00@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD$FF00rr<2,1>
	mov	QWORD PTR [rcx+rax+48], rdx

; 257  : 	instructions[0xE3] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 227				; 000000e3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 258  : 	instructions[0xE4] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 228				; 000000e4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 259  : 	instructions[0xE5] = &Cpu::PUSH<RegHL>;

	mov	eax, 8
	imul	rax, 229				; 000000e5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$PUSH@$02@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::PUSH<3>
	mov	QWORD PTR [rcx+rax+48], rdx

; 260  :   instructions[0xE6] = &Cpu::AND<RegA,0,2>;

	mov	eax, 8
	imul	rax, 230				; 000000e6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$AND@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::AND<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 261  : 	instructions[0xE7] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 231				; 000000e7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 262  : 	instructions[0xE8] = &Cpu::ADD_SPr8;

	mov	eax, 8
	imul	rax, 232				; 000000e8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ADD_SPr8@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ADD_SPr8
	mov	QWORD PTR [rcx+rax+48], rdx

; 263  : 	instructions[0xE9] = &Cpu::JP_HL;

	mov	eax, 8
	imul	rax, 233				; 000000e9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?JP_HL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::JP_HL
	mov	QWORD PTR [rcx+rax+48], rdx

; 264  : 	instructions[0xEA] = &Cpu::LD<0,RegA,14>;

	mov	eax, 8
	imul	rax, 234				; 000000eaH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$0A@$00$0O@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<0,1,14>
	mov	QWORD PTR [rcx+rax+48], rdx

; 265  : 	instructions[0xEB] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 235				; 000000ebH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 266  : 	instructions[0xEC] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 236				; 000000ecH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 267  : 	instructions[0xED] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 237				; 000000edH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 268  : 	instructions[0xEE] = &Cpu::XOR<RegA,0,2>;

	mov	eax, 8
	imul	rax, 238				; 000000eeH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$XOR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::XOR<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 269  : 	instructions[0xEF] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 239				; 000000efH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 270  : 
; 271  : 	instructions[0xF0] = &Cpu::LD<RegA,0,13>;

	mov	eax, 8
	imul	rax, 240				; 000000f0H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$00$0A@$0N@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<1,0,13>
	mov	QWORD PTR [rcx+rax+48], rdx

; 272  : 	instructions[0xF1] = &Cpu::POP<RegAF>;

	mov	eax, 8
	imul	rax, 241				; 000000f1H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$POP@$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::POP<0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 273  : 	instructions[0xF2] = &Cpu::LDr$FF00r<RegA,RegC>;

	mov	eax, 8
	imul	rax, 242				; 000000f2H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LDr$FF00r@$00$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDr$FF00r<1,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 274  : 	instructions[0xF3] = &Cpu::DI;

	mov	eax, 8
	imul	rax, 243				; 000000f3H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?DI@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::DI
	mov	QWORD PTR [rcx+rax+48], rdx

; 275  : 	instructions[0xF4] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 244				; 000000f4H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 276  : 	instructions[0xF5] = &Cpu::PUSH<RegAF>;

	mov	eax, 8
	imul	rax, 245				; 000000f5H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$PUSH@$0A@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::PUSH<0>
	mov	QWORD PTR [rcx+rax+48], rdx

; 277  :   instructions[0xF6] = &Cpu::OR<RegA,0,2>;

	mov	eax, 8
	imul	rax, 246				; 000000f6H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$OR@$00$0A@$01@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::OR<1,0,2>
	mov	QWORD PTR [rcx+rax+48], rdx

; 278  : 	instructions[0xF7] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 247				; 000000f7H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 279  : 	instructions[0xF8] = &Cpu::LDHLSPr8;

	mov	eax, 8
	imul	rax, 248				; 000000f8H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?LDHLSPr8@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDHLSPr8
	mov	QWORD PTR [rcx+rax+48], rdx

; 280  : 	instructions[0xF9] = &Cpu::LDSPHL;

	mov	eax, 8
	imul	rax, 249				; 000000f9H
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?LDSPHL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LDSPHL
	mov	QWORD PTR [rcx+rax+48], rdx

; 281  : 	instructions[0xFA] = &Cpu::LD<RegA,0,15>;

	mov	eax, 8
	imul	rax, 250				; 000000faH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:??$LD@$00$0A@$0P@@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::LD<1,0,15>
	mov	QWORD PTR [rcx+rax+48], rdx

; 282  : 	instructions[0xFB] = &Cpu::EI;

	mov	eax, 8
	imul	rax, 251				; 000000fbH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?EI@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::EI
	mov	QWORD PTR [rcx+rax+48], rdx

; 283  : 	instructions[0xFC] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 252				; 000000fcH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 284  : 	instructions[0xFD] = &Cpu::ILLEGAL;

	mov	eax, 8
	imul	rax, 253				; 000000fdH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?ILLEGAL@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::ILLEGAL
	mov	QWORD PTR [rcx+rax+48], rdx

; 285  : 	instructions[0xFE] = &Cpu::CP_d8;

	mov	eax, 8
	imul	rax, 254				; 000000feH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?CP_d8@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::CP_d8
	mov	QWORD PTR [rcx+rax+48], rdx

; 286  :   instructions[0xFF] = &Cpu::RST;

	mov	eax, 8
	imul	rax, 255				; 000000ffH
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdx, OFFSET FLAT:?RST@Cpu@gb@emulation@@AEAAXXZ ; emulation::gb::Cpu::RST
	mov	QWORD PTR [rcx+rax+48], rdx

; 287  : 	//-checked above
; 288  : }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0Cpu@gb@emulation@@QEAA@XZ ENDP			; emulation::gb::Cpu::Cpu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\lcd_driver.h
;	COMDAT ?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ
_TEXT	SEGMENT
this$ = 16
?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ PROC ; emulation::gb::LCDDriver::lcdc, COMDAT

; 52   : 	const LCDControlRegister& lcdc() { return lcdc_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 40					; 00000028H
	pop	rdi
	ret	0
?lcdc@LCDDriver@gb@emulation@@QEAAAEBTLCDControlRegister@23@XZ ENDP ; emulation::gb::LCDDriver::lcdc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ
_TEXT	SEGMENT
this$ = 16
?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ PROC	; emulation::gb::Memory::interrupt_flag, COMDAT

; 21   :   uint8_t& interrupt_flag() {  return ioports_[0x0F]; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	eax, 1
	imul	rax, 15
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax+208]
	pop	rdi
	ret	0
?interrupt_flag@Memory@gb@emulation@@QEAAAEAEXZ ENDP	; emulation::gb::Memory::interrupt_flag
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\memory.h
;	COMDAT ?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ
_TEXT	SEGMENT
this$ = 16
?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ PROC	; emulation::gb::Memory::interrupt_enable, COMDAT

; 20   :   uint8_t& interrupt_enable() { return interrupt_enable_register_; }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	add	rax, 463				; 000001cfH
	pop	rdi
	ret	0
?interrupt_enable@Memory@gb@emulation@@QEAAAEAEXZ ENDP	; emulation::gb::Memory::interrupt_enable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Component@gb@emulation@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0Component@gb@emulation@@QEAA@XZ PROC			; emulation::gb::Component::Component, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Component@gb@emulation@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0Component@gb@emulation@@QEAA@XZ ENDP			; emulation::gb::Component::Component
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Reset@Component@gb@emulation@@UEAAXXZ
_TEXT	SEGMENT
this$ = 16
?Reset@Component@gb@emulation@@UEAAXXZ PROC		; emulation::gb::Component::Reset, COMDAT

; 33   : 	virtual void Reset() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 34   : 	}

	pop	rdi
	ret	0
?Reset@Component@gb@emulation@@UEAAXXZ ENDP		; emulation::gb::Component::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Deinitialize@Component@gb@emulation@@UEAAXXZ
_TEXT	SEGMENT
this$ = 16
?Deinitialize@Component@gb@emulation@@UEAAXXZ PROC	; emulation::gb::Component::Deinitialize, COMDAT

; 31   : 	virtual void Deinitialize() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 32   : 	}

	pop	rdi
	ret	0
?Deinitialize@Component@gb@emulation@@UEAAXXZ ENDP	; emulation::gb::Component::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\emulation\gb\gb.h
;	COMDAT ?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z
_TEXT	SEGMENT
this$ = 16
emu$ = 24
?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z PROC ; emulation::gb::Component::Initialize, COMDAT

; 28   :   virtual void Initialize(Emu* emu) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 29   :     emu_ = emu;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR emu$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 30   :   }

	pop	rdi
	ret	0
?Initialize@Component@gb@emulation@@UEAAXPEAVEmu@23@@Z ENDP ; emulation::gb::Component::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 137  : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$yc	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 130  : const _Ignore ignore;

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rcx, OFFSET FLAT:ignore
	call	??0_Ignore@std@@QEAA@XZ			; std::_Ignore::_Ignore
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Ignore@std@@QEAA@XZ PROC				; std::_Ignore::_Ignore, COMDAT

; 120  : 	_Ignore()

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 121  : 		{	// construct
; 122  : 		}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Ignore@std@@QEAA@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = 0
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 1
	rep stosb
	add	rsp, 16
	pop	rdi
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END

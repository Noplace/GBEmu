; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?img_scale_eagle@@YAXPEAIHH0@Z			; img_scale_eagle
PUBLIC	?ScaleImageEagle2X@@YAXPEAIHH0@Z		; ScaleImageEagle2X
PUBLIC	__xmm@00000001000000010000000100000001
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
pdata	SEGMENT
$pdata$?img_scale_eagle@@YAXPEAIHH0@Z DD imagerel $LN23
	DD	imagerel $LN23+946
	DD	imagerel $unwind$?img_scale_eagle@@YAXPEAIHH0@Z
$pdata$?ScaleImageEagle2X@@YAXPEAIHH0@Z DD imagerel $LN9
	DD	imagerel $LN9+1267
	DD	imagerel $unwind$?ScaleImageEagle2X@@YAXPEAIHH0@Z
pdata	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcName$0 DB 070H	; ScaleImageEagle2X
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	073H
	DB	00H
	ORG $+9
?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcVarDesc DD 0180H	; ScaleImageEagle2X
	DD	010H
	DQ	FLAT:?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcName$0
	ORG $+48
?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcFrameData DD 01H	; ScaleImageEagle2X
	DD	00H
	DQ	FLAT:?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?img_scale_eagle@@YAXPEAIHH0@Z DD 022c01H
	DD	07014b218H
$unwind$?ScaleImageEagle2X@@YAXPEAIHH0@Z DD 043301H
	DD	03b011cH
	DD	030147015H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\eagle.cpp
_TEXT	SEGMENT
set_one$ = 32
$T4 = 48
y$5 = 64
line$6 = 72
output_line1$7 = 80
output_line2$8 = 88
x$9 = 96
r1$10 = 112
r2$11 = 128
r3$12 = 144
C_splat$13 = 160
$T14 = 176
$T15 = 192
$T16 = 208
$T17 = 224
factor$18 = 240
$T19 = 256
$T20 = 272
$T21 = 288
$T22 = 304
$T23 = 320
inv_factor$24 = 336
$T25 = 352
pixels$26 = 384
$T27 = 416
$T28 = 432
$T29 = 448
in_rgb$ = 496
in_width$ = 504
in_height$ = 512
output$ = 520
?ScaleImageEagle2X@@YAXPEAIHH0@Z PROC			; ScaleImageEagle2X

; 62   : void ScaleImageEagle2X(uint32_t* in_rgb,int in_width,int in_height,uint32_t* output) {

$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 472				; 000001d8H
	mov	rdi, rsp
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+496]

; 63   :   #define S  (line-in_width)[x-1]
; 64   :   #define T  (line-in_width)[x+0]
; 65   :   #define U  (line-in_width)[x+1]
; 66   :   #define V  line[x-1]
; 67   :   #define C  line[x+0]
; 68   :   #define W  line[x+1]
; 69   :   #define X  (line+in_width)[x-1]
; 70   :   #define Y  (line+in_width)[x+0]
; 71   :   #define Z  (line+in_width)[x+1]
; 72   :   const __m128i set_one = _mm_set1_epi32(1);

	movdqa	xmm0, XMMWORD PTR __xmm@00000001000000010000000100000001
	movdqa	XMMWORD PTR $T4[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T4[rsp]
	movdqa	XMMWORD PTR set_one$[rsp], xmm0

; 73   :   
; 74   :   for (int y=1;y<in_height-1;++y) {

	mov	DWORD PTR y$5[rsp], 1
	jmp	SHORT $LN6@ScaleImage
$LN5@ScaleImage:
	mov	eax, DWORD PTR y$5[rsp]
	inc	eax
	mov	DWORD PTR y$5[rsp], eax
$LN6@ScaleImage:
	mov	eax, DWORD PTR in_height$[rsp]
	dec	eax
	cmp	DWORD PTR y$5[rsp], eax
	jge	$LN4@ScaleImage

; 75   :     auto line = &in_rgb[y*in_width];

	mov	eax, DWORD PTR y$5[rsp]
	imul	eax, DWORD PTR in_width$[rsp]
	cdqe
	mov	rcx, QWORD PTR in_rgb$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR line$6[rsp], rax

; 76   :     auto output_line1 = &output[2+(y<<1)*(in_width<<1)];

	mov	eax, DWORD PTR y$5[rsp]
	add	eax, eax
	mov	ecx, DWORD PTR in_width$[rsp]
	shl	ecx, 1
	imul	eax, ecx
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR output_line1$7[rsp], rax

; 77   :     auto output_line2 = &output[2+(1+(y<<1))*(in_width<<1)];

	mov	eax, DWORD PTR y$5[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	mov	ecx, DWORD PTR in_width$[rsp]
	shl	ecx, 1
	imul	eax, ecx
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR output_line2$8[rsp], rax

; 78   :     for (int x=1;x<in_width-1;++x) {

	mov	DWORD PTR x$9[rsp], 1
	jmp	SHORT $LN3@ScaleImage
$LN2@ScaleImage:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN3@ScaleImage:
	mov	eax, DWORD PTR in_width$[rsp]
	dec	eax
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN1@ScaleImage

; 79   :       __m128i r1,r2,r3;
; 80   :       const __m128i C_splat = _mm_set1_epi32(C);

	mov	eax, DWORD PTR x$9[rsp]
	cdqe
	mov	rcx, QWORD PTR line$6[rsp]
	movd	xmm0, DWORD PTR [rcx+rax*4]
	pshufd	xmm0, xmm0, 0
	movdqa	XMMWORD PTR $T14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T14[rsp]
	movdqa	XMMWORD PTR C_splat$13[rsp], xmm0

; 81   :         
; 82   :       r1 = _mm_set_epi32(V,T,V,W);

	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR x$9[rsp]
	dec	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR in_width$[rsp]
	shl	rdx, 2
	mov	r8, QWORD PTR line$6[rsp]
	sub	r8, rdx
	mov	rdx, r8
	mov	r8d, DWORD PTR x$9[rsp]
	movsxd	r8, r8d
	mov	r9d, DWORD PTR x$9[rsp]
	dec	r9d
	movsxd	r9, r9d
	mov	r10, QWORD PTR line$6[rsp]
	movd	xmm0, DWORD PTR [r10+r9*4]
	movd	xmm1, DWORD PTR [rdx+r8*4]
	mov	rdx, QWORD PTR line$6[rsp]
	movd	xmm2, DWORD PTR [rdx+rcx*4]
	mov	rcx, QWORD PTR line$6[rsp]
	movd	xmm3, DWORD PTR [rcx+rax*4]
	punpckldq xmm3, xmm1
	punpckldq xmm2, xmm0
	movdqa	xmm0, xmm3
	punpckldq xmm0, xmm2
	movdqa	XMMWORD PTR $T15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[rsp]
	movdqa	XMMWORD PTR r1$10[rsp], xmm0

; 83   :       r2 = _mm_set_epi32(S,U,X,Z);

	movsxd	rax, DWORD PTR in_width$[rsp]
	mov	rcx, QWORD PTR line$6[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$9[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR in_width$[rsp]
	mov	r8, QWORD PTR line$6[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR x$9[rsp]
	dec	r8d
	movsxd	r8, r8d
	movsxd	r9, DWORD PTR in_width$[rsp]
	shl	r9, 2
	mov	r10, QWORD PTR line$6[rsp]
	sub	r10, r9
	mov	r9, r10
	mov	r10d, DWORD PTR x$9[rsp]
	inc	r10d
	movsxd	r10, r10d
	movsxd	r11, DWORD PTR in_width$[rsp]
	shl	r11, 2
	mov	rbx, QWORD PTR line$6[rsp]
	sub	rbx, r11
	mov	r11d, DWORD PTR x$9[rsp]
	dec	r11d
	movsxd	r11, r11d
	movd	xmm0, DWORD PTR [rbx+r11*4]
	movd	xmm1, DWORD PTR [r9+r10*4]
	movd	xmm2, DWORD PTR [rdx+r8*4]
	movd	xmm3, DWORD PTR [rax+rcx*4]
	punpckldq xmm3, xmm1
	punpckldq xmm2, xmm0
	movdqa	xmm0, xmm3
	punpckldq xmm0, xmm2
	movdqa	XMMWORD PTR $T16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[rsp]
	movdqa	XMMWORD PTR r2$11[rsp], xmm0

; 84   :       r3 = _mm_set_epi32(T,W,Y,Y);

	movsxd	rax, DWORD PTR in_width$[rsp]
	mov	rcx, QWORD PTR line$6[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$9[rsp]
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR in_width$[rsp]
	mov	rbx, QWORD PTR line$6[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR x$9[rsp]
	movsxd	rbx, ebx
	mov	r8d, DWORD PTR x$9[rsp]
	inc	r8d
	movsxd	r8, r8d
	movsxd	r9, DWORD PTR in_width$[rsp]
	shl	r9, 2
	mov	r10, QWORD PTR line$6[rsp]
	sub	r10, r9
	mov	r9, r10
	mov	r10d, DWORD PTR x$9[rsp]
	movsxd	r10, r10d
	movd	xmm0, DWORD PTR [r9+r10*4]
	mov	r9, QWORD PTR line$6[rsp]
	movd	xmm1, DWORD PTR [r9+r8*4]
	movd	xmm2, DWORD PTR [rdx+rbx*4]
	movd	xmm3, DWORD PTR [rax+rcx*4]
	punpckldq xmm3, xmm1
	punpckldq xmm2, xmm0
	movdqa	xmm0, xmm3
	punpckldq xmm0, xmm2
	movdqa	XMMWORD PTR $T17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[rsp]
	movdqa	XMMWORD PTR r3$12[rsp], xmm0

; 85   : 
; 86   :       auto factor = _mm_and_si128(
; 87   :         _mm_and_si128(_mm_cmpeq_epi32(r1,r2),set_one),
; 88   :         _mm_and_si128(_mm_cmpeq_epi32(r2,r3),set_one));

	movdqa	xmm0, XMMWORD PTR r2$11[rsp]
	pcmpeqd	xmm0, XMMWORD PTR r3$12[rsp]
	movdqa	XMMWORD PTR $T21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T21[rsp]
	pand	xmm0, XMMWORD PTR set_one$[rsp]
	movdqa	XMMWORD PTR $T22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR r1$10[rsp]
	pcmpeqd	xmm0, XMMWORD PTR r2$11[rsp]
	movdqa	XMMWORD PTR $T19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T19[rsp]
	pand	xmm0, XMMWORD PTR set_one$[rsp]
	movdqa	XMMWORD PTR $T20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T20[rsp]
	pand	xmm0, XMMWORD PTR $T22[rsp]
	movdqa	XMMWORD PTR $T23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T23[rsp]
	movdqa	XMMWORD PTR factor$18[rsp], xmm0

; 89   :       auto inv_factor = _mm_sub_epi32(set_one,factor);

	movdqa	xmm0, XMMWORD PTR set_one$[rsp]
	psubd	xmm0, XMMWORD PTR factor$18[rsp]
	movdqa	XMMWORD PTR $T25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T25[rsp]
	movdqa	XMMWORD PTR inv_factor$24[rsp], xmm0

; 90   : 
; 91   :       auto pixels = _mm_add_epi32(_mm_mullo_epi32(r2,factor),_mm_mullo_epi32(C_splat,inv_factor));

	movdqa	xmm0, XMMWORD PTR C_splat$13[rsp]
	pmulld	xmm0, XMMWORD PTR inv_factor$24[rsp]
	movdqa	XMMWORD PTR $T28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR r2$11[rsp]
	pmulld	xmm0, XMMWORD PTR factor$18[rsp]
	movdqa	XMMWORD PTR $T27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T27[rsp]
	paddd	xmm0, XMMWORD PTR $T28[rsp]
	movdqa	XMMWORD PTR $T29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR $T29[rsp]
	movdqa	XMMWORD PTR pixels$26[rsp], xmm0

; 92   : 
; 93   :       *output_line1++ = pixels.m128i_u32[3];

	mov	eax, 4
	imul	rax, 3
	mov	rcx, QWORD PTR output_line1$7[rsp]
	mov	eax, DWORD PTR pixels$26[rsp+rax]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR output_line1$7[rsp]
	add	rax, 4
	mov	QWORD PTR output_line1$7[rsp], rax

; 94   :       *output_line1++ = pixels.m128i_u32[2];

	mov	eax, 4
	imul	rax, 2
	mov	rcx, QWORD PTR output_line1$7[rsp]
	mov	eax, DWORD PTR pixels$26[rsp+rax]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR output_line1$7[rsp]
	add	rax, 4
	mov	QWORD PTR output_line1$7[rsp], rax

; 95   :       *output_line2++ = pixels.m128i_u32[1];

	mov	eax, 4
	imul	rax, 1
	mov	rcx, QWORD PTR output_line2$8[rsp]
	mov	eax, DWORD PTR pixels$26[rsp+rax]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR output_line2$8[rsp]
	add	rax, 4
	mov	QWORD PTR output_line2$8[rsp], rax

; 96   :       *output_line2++ = pixels.m128i_u32[0];

	mov	eax, 4
	imul	rax, 0
	mov	rcx, QWORD PTR output_line2$8[rsp]
	mov	eax, DWORD PTR pixels$26[rsp+rax]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR output_line2$8[rsp]
	add	rax, 4
	mov	QWORD PTR output_line2$8[rsp], rax

; 97   :     }

	jmp	$LN2@ScaleImage
$LN1@ScaleImage:

; 98   :   }

	jmp	$LN5@ScaleImage
$LN4@ScaleImage:

; 99   : #undef S
; 100  : #undef T
; 101  : #undef U
; 102  : #undef V
; 103  : #undef W
; 104  : #undef X
; 105  : #undef Y
; 106  : #undef Z
; 107  : #undef C
; 108  : };

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?ScaleImageEagle2X@@YAXPEAIHH0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 472				; 000001d8H
	pop	rdi
	pop	rbx
	ret	0
?ScaleImageEagle2X@@YAXPEAIHH0@Z ENDP			; ScaleImageEagle2X
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\graphics\eagle.cpp
_TEXT	SEGMENT
y$1 = 0
line$2 = 8
x$3 = 16
S$4 = 20
T$5 = 24
U$6 = 28
V$7 = 32
C$8 = 36
W$9 = 40
X$10 = 44
Y$11 = 48
Z$12 = 52
test$13 = 56
tv162 = 60
tv187 = 64
tv191 = 68
tv205 = 72
tv209 = 76
tv224 = 80
tv228 = 84
in_rgb$ = 112
in_width$ = 120
in_height$ = 128
output$ = 136
?img_scale_eagle@@YAXPEAIHH0@Z PROC			; img_scale_eagle

; 36   : void img_scale_eagle(uint32_t* in_rgb,int in_width,int in_height,uint32_t* output) {

$LN23:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 37   :     for (int y=1;y<in_height-1;++y) {

	mov	DWORD PTR y$1[rsp], 1
	jmp	SHORT $LN6@img_scale_
$LN5@img_scale_:
	mov	eax, DWORD PTR y$1[rsp]
	inc	eax
	mov	DWORD PTR y$1[rsp], eax
$LN6@img_scale_:
	mov	eax, DWORD PTR in_height$[rsp]
	dec	eax
	cmp	DWORD PTR y$1[rsp], eax
	jge	$LN4@img_scale_

; 38   :       auto line = &in_rgb[y*in_width];

	mov	eax, DWORD PTR y$1[rsp]
	imul	eax, DWORD PTR in_width$[rsp]
	cdqe
	mov	rcx, QWORD PTR in_rgb$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR line$2[rsp], rax

; 39   :       for (int x=1;x<in_width-1;++x) {

	mov	DWORD PTR x$3[rsp], 1
	jmp	SHORT $LN3@img_scale_
$LN2@img_scale_:
	mov	eax, DWORD PTR x$3[rsp]
	inc	eax
	mov	DWORD PTR x$3[rsp], eax
$LN3@img_scale_:
	mov	eax, DWORD PTR in_width$[rsp]
	dec	eax
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN1@img_scale_

; 40   :         auto S = (line-in_width)[x-1];

	movsxd	rax, DWORD PTR in_width$[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR line$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$3[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR S$4[rsp], eax

; 41   :         auto T = (line-in_width)[x+0];

	movsxd	rax, DWORD PTR in_width$[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR line$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$3[rsp]
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR T$5[rsp], eax

; 42   :         auto U = (line-in_width)[x+1];

	movsxd	rax, DWORD PTR in_width$[rsp]
	shl	rax, 2
	mov	rcx, QWORD PTR line$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$3[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR U$6[rsp], eax

; 43   :         auto V = line[x-1];

	mov	eax, DWORD PTR x$3[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR line$2[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR V$7[rsp], eax

; 44   :         auto C = line[x+0];

	mov	eax, DWORD PTR x$3[rsp]
	cdqe
	mov	rcx, QWORD PTR line$2[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR C$8[rsp], eax

; 45   :         auto W = line[x+1];

	mov	eax, DWORD PTR x$3[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR line$2[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR W$9[rsp], eax

; 46   :         auto X = (line+in_width)[x-1];

	movsxd	rax, DWORD PTR in_width$[rsp]
	mov	rcx, QWORD PTR line$2[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$3[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR X$10[rsp], eax

; 47   :         auto Y = (line+in_width)[x+0];

	movsxd	rax, DWORD PTR in_width$[rsp]
	mov	rcx, QWORD PTR line$2[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$3[rsp]
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR Y$11[rsp], eax

; 48   :         auto Z = (line+in_width)[x+1];

	movsxd	rax, DWORD PTR in_width$[rsp]
	mov	rcx, QWORD PTR line$2[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR x$3[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR Z$12[rsp], eax

; 49   : 
; 50   :         auto test = (V==S && V==T);

	mov	eax, DWORD PTR S$4[rsp]
	cmp	DWORD PTR V$7[rsp], eax
	jne	SHORT $LN9@img_scale_
	mov	eax, DWORD PTR T$5[rsp]
	cmp	DWORD PTR V$7[rsp], eax
	jne	SHORT $LN9@img_scale_
	mov	DWORD PTR tv162[rsp], 1
	jmp	SHORT $LN10@img_scale_
$LN9@img_scale_:
	mov	DWORD PTR tv162[rsp], 0
$LN10@img_scale_:
	movzx	eax, BYTE PTR tv162[rsp]
	mov	BYTE PTR test$13[rsp], al

; 51   : 
; 52   :         output[(x<<1)+(y<<2)*in_width] = S*test + C*(1-test);

	movzx	eax, BYTE PTR test$13[rsp]
	mov	ecx, DWORD PTR S$4[rsp]
	imul	ecx, eax
	mov	eax, ecx
	movzx	ecx, BYTE PTR test$13[rsp]
	mov	edx, 1
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR C$8[rsp]
	imul	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	mov	ecx, DWORD PTR y$1[rsp]
	shl	ecx, 2
	imul	ecx, DWORD PTR in_width$[rsp]
	mov	edx, DWORD PTR x$3[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax

; 53   :         output[(1+(x<<1))+(y<<2)*in_width] = U*((T==U && T==W)) + C*(1-(T==U && T==W));

	mov	eax, DWORD PTR U$6[rsp]
	cmp	DWORD PTR T$5[rsp], eax
	jne	SHORT $LN11@img_scale_
	mov	eax, DWORD PTR W$9[rsp]
	cmp	DWORD PTR T$5[rsp], eax
	jne	SHORT $LN11@img_scale_
	mov	DWORD PTR tv187[rsp], 1
	jmp	SHORT $LN12@img_scale_
$LN11@img_scale_:
	mov	DWORD PTR tv187[rsp], 0
$LN12@img_scale_:
	mov	eax, DWORD PTR U$6[rsp]
	cmp	DWORD PTR T$5[rsp], eax
	jne	SHORT $LN13@img_scale_
	mov	eax, DWORD PTR W$9[rsp]
	cmp	DWORD PTR T$5[rsp], eax
	jne	SHORT $LN13@img_scale_
	mov	DWORD PTR tv191[rsp], 1
	jmp	SHORT $LN14@img_scale_
$LN13@img_scale_:
	mov	DWORD PTR tv191[rsp], 0
$LN14@img_scale_:
	mov	eax, DWORD PTR U$6[rsp]
	imul	eax, DWORD PTR tv187[rsp]
	mov	ecx, 1
	sub	ecx, DWORD PTR tv191[rsp]
	mov	edx, DWORD PTR C$8[rsp]
	imul	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	mov	ecx, DWORD PTR y$1[rsp]
	shl	ecx, 2
	imul	ecx, DWORD PTR in_width$[rsp]
	mov	edx, DWORD PTR x$3[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax

; 54   :         output[(x<<1)+(2+(y<<2))*in_width] = X*((V==X && X==Y)) + C*(1-(V==X && X==Y));

	mov	eax, DWORD PTR X$10[rsp]
	cmp	DWORD PTR V$7[rsp], eax
	jne	SHORT $LN15@img_scale_
	mov	eax, DWORD PTR Y$11[rsp]
	cmp	DWORD PTR X$10[rsp], eax
	jne	SHORT $LN15@img_scale_
	mov	DWORD PTR tv205[rsp], 1
	jmp	SHORT $LN16@img_scale_
$LN15@img_scale_:
	mov	DWORD PTR tv205[rsp], 0
$LN16@img_scale_:
	mov	eax, DWORD PTR X$10[rsp]
	cmp	DWORD PTR V$7[rsp], eax
	jne	SHORT $LN17@img_scale_
	mov	eax, DWORD PTR Y$11[rsp]
	cmp	DWORD PTR X$10[rsp], eax
	jne	SHORT $LN17@img_scale_
	mov	DWORD PTR tv209[rsp], 1
	jmp	SHORT $LN18@img_scale_
$LN17@img_scale_:
	mov	DWORD PTR tv209[rsp], 0
$LN18@img_scale_:
	mov	eax, DWORD PTR X$10[rsp]
	imul	eax, DWORD PTR tv205[rsp]
	mov	ecx, 1
	sub	ecx, DWORD PTR tv209[rsp]
	mov	edx, DWORD PTR C$8[rsp]
	imul	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	mov	ecx, DWORD PTR y$1[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	imul	ecx, DWORD PTR in_width$[rsp]
	mov	edx, DWORD PTR x$3[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax

; 55   :         output[(1+(x<<1))+(2+(y<<2))*in_width] = Z*((W==Z && W==Y)) + C*(1-(W==Z && W==Y));

	mov	eax, DWORD PTR Z$12[rsp]
	cmp	DWORD PTR W$9[rsp], eax
	jne	SHORT $LN19@img_scale_
	mov	eax, DWORD PTR Y$11[rsp]
	cmp	DWORD PTR W$9[rsp], eax
	jne	SHORT $LN19@img_scale_
	mov	DWORD PTR tv224[rsp], 1
	jmp	SHORT $LN20@img_scale_
$LN19@img_scale_:
	mov	DWORD PTR tv224[rsp], 0
$LN20@img_scale_:
	mov	eax, DWORD PTR Z$12[rsp]
	cmp	DWORD PTR W$9[rsp], eax
	jne	SHORT $LN21@img_scale_
	mov	eax, DWORD PTR Y$11[rsp]
	cmp	DWORD PTR W$9[rsp], eax
	jne	SHORT $LN21@img_scale_
	mov	DWORD PTR tv228[rsp], 1
	jmp	SHORT $LN22@img_scale_
$LN21@img_scale_:
	mov	DWORD PTR tv228[rsp], 0
$LN22@img_scale_:
	mov	eax, DWORD PTR Z$12[rsp]
	imul	eax, DWORD PTR tv224[rsp]
	mov	ecx, 1
	sub	ecx, DWORD PTR tv228[rsp]
	mov	edx, DWORD PTR C$8[rsp]
	imul	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	mov	ecx, DWORD PTR y$1[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	imul	ecx, DWORD PTR in_width$[rsp]
	mov	edx, DWORD PTR x$3[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax

; 56   :         
; 57   :       }

	jmp	$LN2@img_scale_
$LN1@img_scale_:

; 58   :     }

	jmp	$LN5@img_scale_
$LN4@img_scale_:

; 59   :   };

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?img_scale_eagle@@YAXPEAIHH0@Z ENDP			; img_scale_eagle
_TEXT	ENDS
END

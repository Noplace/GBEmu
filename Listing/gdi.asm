; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	C:\Users\Khalid\Documents\GitHub\GBEmu\Solution\Code\graphics\gdi.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?theta@graphics@@3NA				; graphics::theta
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
_BSS	SEGMENT
?theta@graphics@@3NA DQ 01H DUP (?)			; graphics::theta
_BSS	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
PUBLIC	?interpolate_int@graphics@@YANHHN@Z		; graphics::interpolate_int
PUBLIC	?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z ; graphics::interpolate_color
PUBLIC	??0Graphics@graphics@@QAE@XZ			; graphics::Graphics::Graphics
PUBLIC	??1Graphics@graphics@@UAE@XZ			; graphics::Graphics::~Graphics
PUBLIC	?Initialize@Graphics@graphics@@QAEXPAUHWND__@@HH@Z ; graphics::Graphics::Initialize
PUBLIC	?Deinitialize@Graphics@graphics@@QAEXXZ		; graphics::Graphics::Deinitialize
PUBLIC	??_GGraphics@graphics@@UAEPAXI@Z		; graphics::Graphics::`scalar deleting destructor'
PUBLIC	??0GDI@graphics@@QAE@XZ				; graphics::GDI::GDI
PUBLIC	??1GDI@graphics@@UAE@XZ				; graphics::GDI::~GDI
PUBLIC	?Initialize@GDI@graphics@@QAEXPAUHWND__@@HH@Z	; graphics::GDI::Initialize
PUBLIC	?Deinitialize@GDI@graphics@@QAEXXZ		; graphics::GDI::Deinitialize
PUBLIC	?Render@GDI@graphics@@UAEXXZ			; graphics::GDI::Render
PUBLIC	?Clear@GDI@graphics@@UAEXUtagRGBQUAD@@@Z	; graphics::GDI::Clear
PUBLIC	?SetClippingArea@GDI@graphics@@QAEXHHHH@Z	; graphics::GDI::SetClippingArea
PUBLIC	?BeginFill@GDI@graphics@@QAEXUtagRGBQUAD@@N@Z	; graphics::GDI::BeginFill
PUBLIC	?BeginGradientFill@GDI@graphics@@QAEXPBUtagRGBQUAD@@PBN1HW4FillMode@2@@Z ; graphics::GDI::BeginGradientFill
PUBLIC	?EndFill@GDI@graphics@@QAEXXZ			; graphics::GDI::EndFill
PUBLIC	?DrawRectangle@GDI@graphics@@QAEXHHHH@Z		; graphics::GDI::DrawRectangle
PUBLIC	?DrawCircle@GDI@graphics@@QAEXHHH@Z		; graphics::GDI::DrawCircle
PUBLIC	?DrawTriangle@GDI@graphics@@QAEXHHHHHH@Z	; graphics::GDI::DrawTriangle
PUBLIC	?DrawLine@GDI@graphics@@QAEXHHHH@Z		; graphics::GDI::DrawLine
PUBLIC	?TestBoundry@GDI@graphics@@AAE_NHH@Z		; graphics::GDI::TestBoundry
PUBLIC	?FillPixel@GDI@graphics@@AAEXHHNN@Z		; graphics::GDI::FillPixel
PUBLIC	?ClearFill@GDI@graphics@@AAEXXZ			; graphics::GDI::ClearFill
PUBLIC	??_GGDI@graphics@@UAEPAXI@Z			; graphics::GDI::`scalar deleting destructor'
PUBLIC	?interpolate_int_array@graphics@@YANPAHHN@Z	; graphics::interpolate_int_array
PUBLIC	??$swap@H@std@@YAXAAH0@Z			; std::swap<int>
PUBLIC	??$_Move@AAH@std@@YA$$QAHAAH@Z			; std::_Move<int &>
PUBLIC	??_7Graphics@graphics@@6B@			; graphics::Graphics::`vftable'
PUBLIC	??_7GDI@graphics@@6B@				; graphics::GDI::`vftable'
PUBLIC	??_R4Graphics@graphics@@6B@			; graphics::Graphics::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGraphics@graphics@@@8			; graphics::Graphics `RTTI Type Descriptor'
PUBLIC	??_R3Graphics@graphics@@8			; graphics::Graphics::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Graphics@graphics@@8			; graphics::Graphics::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Graphics@graphics@@8		; graphics::Graphics::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4GDI@graphics@@6B@				; graphics::GDI::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVGDI@graphics@@@8			; graphics::GDI `RTTI Type Descriptor'
PUBLIC	??_R3GDI@graphics@@8				; graphics::GDI::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GDI@graphics@@8				; graphics::GDI::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@GDI@graphics@@8			; graphics::GDI::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__SetDIBitsToDevice@48:PROC
EXTRN	__imp__CreateDIBSection@24:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	_abs:PROC
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_EGraphics@graphics@@UAEPAXI@Z:PROC		; graphics::Graphics::`vector deleting destructor'
EXTRN	??_EGDI@graphics@@UAEPAXI@Z:PROC		; graphics::GDI::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@GDI@graphics@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GDI@graphics@@8 DD FLAT:??_R0?AVGDI@graphics@@@8 ; graphics::GDI::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3GDI@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R2GDI@graphics@@8
rdata$r	SEGMENT
??_R2GDI@graphics@@8 DD FLAT:??_R1A@?0A@EA@GDI@graphics@@8 ; graphics::GDI::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Graphics@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R3GDI@graphics@@8
rdata$r	SEGMENT
??_R3GDI@graphics@@8 DD 00H				; graphics::GDI::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2GDI@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGDI@graphics@@@8
_DATA	SEGMENT
??_R0?AVGDI@graphics@@@8 DD FLAT:??_7type_info@@6B@	; graphics::GDI `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGDI@graphics@@', 00H
_DATA	ENDS
;	COMDAT ??_R4GDI@graphics@@6B@
rdata$r	SEGMENT
??_R4GDI@graphics@@6B@ DD 00H				; graphics::GDI::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGDI@graphics@@@8
	DD	FLAT:??_R3GDI@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Graphics@graphics@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Graphics@graphics@@8 DD FLAT:??_R0?AVGraphics@graphics@@@8 ; graphics::Graphics::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Graphics@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R2Graphics@graphics@@8
rdata$r	SEGMENT
??_R2Graphics@graphics@@8 DD FLAT:??_R1A@?0A@EA@Graphics@graphics@@8 ; graphics::Graphics::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Graphics@graphics@@8
rdata$r	SEGMENT
??_R3Graphics@graphics@@8 DD 00H			; graphics::Graphics::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Graphics@graphics@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVGraphics@graphics@@@8
_DATA	SEGMENT
??_R0?AVGraphics@graphics@@@8 DD FLAT:??_7type_info@@6B@ ; graphics::Graphics `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVGraphics@graphics@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Graphics@graphics@@6B@
rdata$r	SEGMENT
??_R4Graphics@graphics@@6B@ DD 00H			; graphics::Graphics::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVGraphics@graphics@@@8
	DD	FLAT:??_R3Graphics@graphics@@8
rdata$r	ENDS
;	COMDAT ??_7GDI@graphics@@6B@
CONST	SEGMENT
??_7GDI@graphics@@6B@ DD FLAT:??_R4GDI@graphics@@6B@	; graphics::GDI::`vftable'
	DD	FLAT:??_EGDI@graphics@@UAEPAXI@Z
	DD	FLAT:?Clear@GDI@graphics@@UAEXUtagRGBQUAD@@@Z
	DD	FLAT:?Render@GDI@graphics@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7Graphics@graphics@@6B@
CONST	SEGMENT
??_7Graphics@graphics@@6B@ DD FLAT:??_R4Graphics@graphics@@6B@ ; graphics::Graphics::`vftable'
	DD	FLAT:??_EGraphics@graphics@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AAH@std@@YA$$QAHAAH@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$_Move@AAH@std@@YA$$QAHAAH@Z PROC			; std::_Move<int &>, COMDAT

; 1798 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1800 : 	}

	pop	ebp
	ret	0
??$_Move@AAH@std@@YA$$QAHAAH@Z ENDP			; std::_Move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
__Tmp$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@H@std@@YAXAAH0@Z PROC				; std::swap<int>, COMDAT

; 46   : 	{	// exchange values stored at _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 47   : 	_Ty _Tmp = _Move(_Left);

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Tmp$[ebp], ecx

; 48   : 	_Left = _Move(_Right);

	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 49   : 	_Right = _Move(_Tmp);

	lea	eax, DWORD PTR __Tmp$[ebp]
	push	eax
	call	??$_Move@AAH@std@@YA$$QAHAAH@Z		; std::_Move<int &>
	add	esp, 4
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 50   : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@swap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@swap:
	DD	1
	DD	$LN4@swap
$LN4@swap:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@swap
$LN3@swap:
	DB	95					; 0000005fH
	DB	84					; 00000054H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$swap@H@std@@YAXAAH0@Z ENDP				; std::swap<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_is$1 = -20						; size = 8
_i$2 = -12						; size = 4
_result$ = -8						; size = 8
_values$ = 8						; size = 4
_count$ = 12						; size = 4
_s$ = 16						; size = 8
?interpolate_int_array@graphics@@YANPAHHN@Z PROC	; graphics::interpolate_int_array

; 7    : double interpolate_int_array(int* values, int count, double s) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax

; 8    :   double result=0;

	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR _result$[ebp], xmm0

; 9    :   for (int i=0;i<count;i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@interpolat
$LN2@interpolat:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN3@interpolat:
	mov	ecx, DWORD PTR _i$2[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@interpolat

; 10   :       double is = static_cast<double>(count)/static_cast<double>(count-(i+1));

	cvtsi2sd xmm0, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _count$[ebp]
	sub	eax, edx
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	movsd	QWORD PTR _is$1[ebp], xmm0

; 11   :       result += values[i]*(is-s);

	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _values$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+ecx*4]
	movsd	xmm1, QWORD PTR _is$1[ebp]
	subsd	xmm1, QWORD PTR _s$[ebp]
	mulsd	xmm0, xmm1
	addsd	xmm0, QWORD PTR _result$[ebp]
	movsd	QWORD PTR _result$[ebp], xmm0

; 12   :   }

	jmp	SHORT $LN2@interpolat
$LN1@interpolat:

; 13   :   return result;

	fld	QWORD PTR _result$[ebp]

; 14   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?interpolate_int_array@graphics@@YANPAHHN@Z ENDP	; graphics::interpolate_int_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GGDI@graphics@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGDI@graphics@@UAEPAXI@Z PROC			; graphics::GDI::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GDI@graphics@@UAE@XZ			; graphics::GDI::~GDI
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGDI@graphics@@UAEPAXI@Z ENDP			; graphics::GDI::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.h
;	COMDAT ?ClearFill@GDI@graphics@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearFill@GDI@graphics@@AAEXXZ PROC			; graphics::GDI::ClearFill, COMDAT
; _this$ = ecx

; 52   :   void ClearFill() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 
; 54   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearFill@GDI@graphics@@AAEXXZ ENDP			; graphics::GDI::ClearFill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.h
;	COMDAT ?FillPixel@GDI@graphics@@AAEXHHNN@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
_c$4 = -16						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_xs$ = 16						; size = 8
_ys$ = 24						; size = 8
?FillPixel@GDI@graphics@@AAEXHHNN@Z PROC		; graphics::GDI::FillPixel, COMDAT
; _this$ = ecx

; 41   :   void FillPixel(int x, int y, double xs, double ys) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 42   :     int index = x+(y*display_width_);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	imul	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _index$[ebp], ecx

; 43   :     if (fill_.mode == kSolid) { //Solid Fill

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+164], 0
	jne	SHORT $LN3@FillPixel

; 44   :       back_buffer_[index] = interpolate_color(back_buffer_[index],fill_.colors[0],fill_.alphas[0]);

	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+eax+96]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+80]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z ; graphics::interpolate_color
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	jmp	$LN1@FillPixel
$LN3@FillPixel:

; 45   :     }
; 46   :     else if (fill_.mode == kGradientHorizontal) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+164], 1
	jne	$LN1@FillPixel

; 47   :       RGBQUAD c = interpolate_color(fill_.colors[0],fill_.colors[1],xs);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _xs$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+80]
	push	ecx
	mov	edx, 4
	imul	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx+80]
	push	ecx
	call	?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z ; graphics::interpolate_color
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _c$4[ebp], edx

; 48   :       back_buffer_[index] = interpolate_color(back_buffer_[index],c,fill_.alphas[0]);

	mov	eax, 8
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+eax+96]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _c$4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z ; graphics::interpolate_color
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
$LN1@FillPixel:

; 49   :     }  
; 50   :   }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@FillPixel
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN8@FillPixel:
	DD	1
	DD	$LN7@FillPixel
$LN7@FillPixel:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN6@FillPixel
$LN6@FillPixel:
	DB	99					; 00000063H
	DB	0
?FillPixel@GDI@graphics@@AAEXHHNN@Z ENDP		; graphics::GDI::FillPixel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.h
;	COMDAT ?TestBoundry@GDI@graphics@@AAE_NHH@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?TestBoundry@GDI@graphics@@AAE_NHH@Z PROC		; graphics::GDI::TestBoundry, COMDAT
; _this$ = ecx

; 33   :   bool TestBoundry(int x,int y) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 34   :    return ( x >= clip_.x && y >= clip_.y && x < clip_.width && y < clip_.height );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+168]
	jl	SHORT $LN3@TestBoundr
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR [edx+172]
	jl	SHORT $LN3@TestBoundr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	cmp	edx, DWORD PTR [ecx+176]
	jge	SHORT $LN3@TestBoundr
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR [eax+180]
	jge	SHORT $LN3@TestBoundr
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@TestBoundr
$LN3@TestBoundr:
	mov	DWORD PTR tv76[ebp], 0
$LN4@TestBoundr:
	mov	al, BYTE PTR tv76[ebp]

; 35   :   }

	mov	esp, ebp
	pop	ebp
	ret	8
?TestBoundry@GDI@graphics@@AAE_NHH@Z ENDP		; graphics::GDI::TestBoundry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
tv71 = -52						; size = 4
_yindex$1 = -48						; size = 8
_xindex$2 = -40						; size = 8
_x$3 = -32						; size = 4
_y$ = -28						; size = 4
_ystep$ = -24						; size = 4
_error$ = -20						; size = 4
_deltay$ = -16						; size = 4
_deltax$ = -12						; size = 4
_steep$ = -5						; size = 1
_this$ = -4						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
?DrawLine@GDI@graphics@@QAEXHHHH@Z PROC			; graphics::GDI::DrawLine
; _this$ = ecx

; 236  : void GDI::DrawLine(int x0, int y0, int x1, int y1) {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  :   
; 238  :   //int xmin = x0 > x1 ? x1 : x0;
; 239  :  // int xmax = x0 > x1 ? x0 : x1;
; 240  :   
; 241  :  // int ymin = y0 > y1 ? y1 : y0;
; 242  :  // int ymax = y0 > y1 ? y0 : y1;
; 243  :   
; 244  :   bool steep = abs(y1 - y0) > abs(x1 - x0);

	mov	eax, DWORD PTR _y1$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	cmp	esi, eax
	jle	SHORT $LN13@DrawLine
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN14@DrawLine
$LN13@DrawLine:
	mov	DWORD PTR tv71[ebp], 0
$LN14@DrawLine:
	mov	dl, BYTE PTR tv71[ebp]
	mov	BYTE PTR _steep$[ebp], dl

; 245  :   if (steep == true) {

	movzx	eax, BYTE PTR _steep$[ebp]
	cmp	eax, 1
	jne	SHORT $LN10@DrawLine

; 246  :     //swap_int(x0,y0);
; 247  :     //swap_int(x1,y1);
; 248  :     std::swap<int>(x0,y0);

	lea	ecx, DWORD PTR _y0$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x0$[ebp]
	push	edx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8

; 249  :     std::swap<int>(x1,y1);    

	lea	eax, DWORD PTR _y1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x1$[ebp]
	push	ecx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8
$LN10@DrawLine:

; 250  :   }
; 251  :   
; 252  :   if (x0 > x1) {

	mov	edx, DWORD PTR _x0$[ebp]
	cmp	edx, DWORD PTR _x1$[ebp]
	jle	SHORT $LN9@DrawLine

; 253  :     std::swap<int>(x0,x1);

	lea	eax, DWORD PTR _x1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _x0$[ebp]
	push	ecx
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8

; 254  :     std::swap<int>(y0,y1);

	lea	edx, DWORD PTR _y1$[ebp]
	push	edx
	lea	eax, DWORD PTR _y0$[ebp]
	push	eax
	call	??$swap@H@std@@YAXAAH0@Z		; std::swap<int>
	add	esp, 8
$LN9@DrawLine:

; 255  :   }
; 256  : 
; 257  :   
; 258  :   int deltax = x1 - x0;

	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ecx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _deltax$[ebp], ecx

; 259  :   int deltay = abs(y1 - y0);

	mov	edx, DWORD PTR _y1$[ebp]
	sub	edx, DWORD PTR _y0$[ebp]
	push	edx
	call	_abs
	add	esp, 4
	mov	DWORD PTR _deltay$[ebp], eax

; 260  :   int error = deltax / 2;

	mov	eax, DWORD PTR _deltax$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _error$[ebp], eax

; 261  :   int ystep;
; 262  :   int y = y0;

	mov	eax, DWORD PTR _y0$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 263  :   if (y0 < y1) 

	mov	ecx, DWORD PTR _y0$[ebp]
	cmp	ecx, DWORD PTR _y1$[ebp]
	jge	SHORT $LN8@DrawLine

; 264  :     ystep = 1;

	mov	DWORD PTR _ystep$[ebp], 1

; 265  :   else 

	jmp	SHORT $LN7@DrawLine
$LN8@DrawLine:

; 266  :     ystep = -1;

	mov	DWORD PTR _ystep$[ebp], -1
$LN7@DrawLine:

; 267  :     
; 268  :   for (int x = x0; x <= x1; x++) {

	mov	edx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR _x$3[ebp], edx
	jmp	SHORT $LN6@DrawLine
$LN5@DrawLine:
	mov	eax, DWORD PTR _x$3[ebp]
	add	eax, 1
	mov	DWORD PTR _x$3[ebp], eax
$LN6@DrawLine:
	mov	ecx, DWORD PTR _x$3[ebp]
	cmp	ecx, DWORD PTR _x1$[ebp]
	jg	$LN4@DrawLine

; 269  :     double xindex = static_cast<double>(x-x0)/static_cast<double>(x1-x0); 

	mov	edx, DWORD PTR _x$3[ebp]
	sub	edx, DWORD PTR _x0$[ebp]
	cvtsi2sd xmm0, edx
	mov	eax, DWORD PTR _x1$[ebp]
	sub	eax, DWORD PTR _x0$[ebp]
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	movsd	QWORD PTR _xindex$2[ebp], xmm0

; 270  :     double yindex = static_cast<double>(y-y0)/static_cast<double>(y1-y0);         

	mov	ecx, DWORD PTR _y$[ebp]
	sub	ecx, DWORD PTR _y0$[ebp]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _y1$[ebp]
	sub	edx, DWORD PTR _y0$[ebp]
	cvtsi2sd xmm1, edx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _yindex$1[ebp], xmm0

; 271  :     if (steep == true) {

	movzx	eax, BYTE PTR _steep$[ebp]
	cmp	eax, 1
	jne	SHORT $LN3@DrawLine

; 272  :       FillPixel(y,x,xindex,yindex);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _yindex$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xindex$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _x$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillPixel@GDI@graphics@@AAEXHHNN@Z	; graphics::GDI::FillPixel

; 273  :     }
; 274  :     else {

	jmp	SHORT $LN2@DrawLine
$LN3@DrawLine:

; 275  :       FillPixel(x,y,xindex,yindex);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _yindex$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xindex$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillPixel@GDI@graphics@@AAEXHHNN@Z	; graphics::GDI::FillPixel
$LN2@DrawLine:

; 276  :     }
; 277  :     
; 278  :     error = error - deltay;

	mov	edx, DWORD PTR _error$[ebp]
	sub	edx, DWORD PTR _deltay$[ebp]
	mov	DWORD PTR _error$[ebp], edx

; 279  :     if (error < 0) {

	jns	SHORT $LN1@DrawLine

; 280  :       y = y + ystep;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _ystep$[ebp]
	mov	DWORD PTR _y$[ebp], eax

; 281  :       error = error + deltax;  

	mov	ecx, DWORD PTR _error$[ebp]
	add	ecx, DWORD PTR _deltax$[ebp]
	mov	DWORD PTR _error$[ebp], ecx
$LN1@DrawLine:

; 282  :     }
; 283  :     
; 284  :   }

	jmp	$LN5@DrawLine
$LN4@DrawLine:

; 285  :   
; 286  : 
; 287  :   /*double slope = (y1-y0)/(x1-x0);
; 288  :   for (int i = i0; i <= i1; i++) {
; 289  :     double ry = (slope*i)+y0;
; 290  :     int y = static_cast<int>(ry);
; 291  :     double xindex = static_cast<double>(i-xmin)/static_cast<double>(xmax-xmin); 
; 292  :     double yindex = static_cast<double>(y-ymin)/static_cast<double>(ymax-ymin);         
; 293  :     FillPixel(u,v,xindex,yindex);
; 294  :   }*/
; 295  : 
; 296  : }

	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DrawLine@GDI@graphics@@QAEXHHHH@Z ENDP			; graphics::GDI::DrawLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
tv79 = -100						; size = 4
tv77 = -96						; size = 4
tv75 = -92						; size = 4
tv73 = -88						; size = 4
tv71 = -84						; size = 4
tv69 = -80						; size = 4
tv67 = -76						; size = 4
tv65 = -72						; size = 4
_yindex$1 = -68						; size = 8
_xindex$2 = -60						; size = 8
_gamma$3 = -52						; size = 8
_beta$4 = -44						; size = 8
_alpha$5 = -36						; size = 8
_u$6 = -28						; size = 4
_v$7 = -24						; size = 4
_ymax$ = -20						; size = 4
_xmax$ = -16						; size = 4
_ymin$ = -12						; size = 4
_xmin$ = -8						; size = 4
_this$ = -4						; size = 4
_x0$ = 8						; size = 4
_y0$ = 12						; size = 4
_x1$ = 16						; size = 4
_y1$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
?DrawTriangle@GDI@graphics@@QAEXHHHHHH@Z PROC		; graphics::GDI::DrawTriangle
; _this$ = ecx

; 158  : void GDI::DrawTriangle(int x0, int y0, int x1, int y1, int x2, int y2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 159  : 
; 160  :   //rotation
; 161  :   /*math::vector_1x2 v1={x0,y0};
; 162  :   math::vector_1x2 v2={x1,y1};
; 163  :   math::vector_1x2 v3={x2,y2};
; 164  :   math::vector_1x2 rv;
; 165  : 
; 166  :   math::matrix_2x2 m1;
; 167  :   math::matrix_2x2 m2,m3;
; 168  : 
; 169  :   theta += M_PI/100;
; 170  : 
; 171  :   double c = cos(theta);
; 172  :   double s = sin(theta);
; 173  :   m1(0,0) = c;
; 174  :   m1(0,1) = -s;
; 175  :   m1(1,0) = s;
; 176  :   m1(1,1) = c;
; 177  : 
; 178  :   m2(0,0) = 2;
; 179  :   m2(0,1) = 0;
; 180  :   m2(1,0) = 0;
; 181  :   m2(1,1) = 2;
; 182  :   
; 183  :   m1 = m1 * m2;
; 184  :   m3 = m1.inverse();
; 185  : 
; 186  :   rv = v1 * m1;
; 187  :   x0 = static_cast<int>(rv.x);
; 188  :   y0 = static_cast<int>(rv.y);
; 189  :   rv = v2 * m1;
; 190  :   x1 = static_cast<int>(rv.x);
; 191  :   y1 = static_cast<int>(rv.y);
; 192  :   rv = v3 * m1;
; 193  :   x2 = static_cast<int>(rv.x);
; 194  :   y2 = static_cast<int>(rv.y);*/  
; 195  : 
; 196  : #define f12(x,y) ((y1-y2)*x + (x2-x1)*y + x1*y2 - x2*y1)
; 197  : #define f20(x,y) ((y2-y0)*x + (x0-x2)*y + x2*y0 - x0*y2)
; 198  : #define f01(x,y) ((y0-y1)*x + (x1-x0)*y + x0*y1 - x1*y0)
; 199  : 
; 200  :   int xmin = x0 > x1 ? x1 : x0;

	mov	eax, DWORD PTR _x0$[ebp]
	cmp	eax, DWORD PTR _x1$[ebp]
	jle	SHORT $LN11@DrawTriang
	mov	ecx, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
	jmp	SHORT $LN12@DrawTriang
$LN11@DrawTriang:
	mov	edx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR tv65[ebp], edx
$LN12@DrawTriang:
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR _xmin$[ebp], eax

; 201  :   xmin = xmin > x2 ? x2 : xmin;

	mov	ecx, DWORD PTR _xmin$[ebp]
	cmp	ecx, DWORD PTR _x2$[ebp]
	jle	SHORT $LN13@DrawTriang
	mov	edx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN14@DrawTriang
$LN13@DrawTriang:
	mov	eax, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR tv67[ebp], eax
$LN14@DrawTriang:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _xmin$[ebp], ecx

; 202  :   
; 203  :   int ymin = y0 > y1 ? y1 : y0;

	mov	edx, DWORD PTR _y0$[ebp]
	cmp	edx, DWORD PTR _y1$[ebp]
	jle	SHORT $LN15@DrawTriang
	mov	eax, DWORD PTR _y1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN16@DrawTriang
$LN15@DrawTriang:
	mov	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR tv69[ebp], ecx
$LN16@DrawTriang:
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _ymin$[ebp], edx

; 204  :   ymin = ymin > y2 ? y2 : ymin;  

	mov	eax, DWORD PTR _ymin$[ebp]
	cmp	eax, DWORD PTR _y2$[ebp]
	jle	SHORT $LN17@DrawTriang
	mov	ecx, DWORD PTR _y2$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN18@DrawTriang
$LN17@DrawTriang:
	mov	edx, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN18@DrawTriang:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _ymin$[ebp], eax

; 205  : 
; 206  :   int xmax = x0 > x1 ? x0 : x1;

	mov	ecx, DWORD PTR _x0$[ebp]
	cmp	ecx, DWORD PTR _x1$[ebp]
	jle	SHORT $LN19@DrawTriang
	mov	edx, DWORD PTR _x0$[ebp]
	mov	DWORD PTR tv73[ebp], edx
	jmp	SHORT $LN20@DrawTriang
$LN19@DrawTriang:
	mov	eax, DWORD PTR _x1$[ebp]
	mov	DWORD PTR tv73[ebp], eax
$LN20@DrawTriang:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _xmax$[ebp], ecx

; 207  :   xmax = xmax > x2 ? xmax : x2;

	mov	edx, DWORD PTR _xmax$[ebp]
	cmp	edx, DWORD PTR _x2$[ebp]
	jle	SHORT $LN21@DrawTriang
	mov	eax, DWORD PTR _xmax$[ebp]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN22@DrawTriang
$LN21@DrawTriang:
	mov	ecx, DWORD PTR _x2$[ebp]
	mov	DWORD PTR tv75[ebp], ecx
$LN22@DrawTriang:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _xmax$[ebp], edx

; 208  : 
; 209  :   int ymax = y0 > y1 ? y0 : y1;

	mov	eax, DWORD PTR _y0$[ebp]
	cmp	eax, DWORD PTR _y1$[ebp]
	jle	SHORT $LN23@DrawTriang
	mov	ecx, DWORD PTR _y0$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN24@DrawTriang
$LN23@DrawTriang:
	mov	edx, DWORD PTR _y1$[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN24@DrawTriang:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _ymax$[ebp], eax

; 210  :   ymax = ymax > y2 ? ymax : y2;

	mov	ecx, DWORD PTR _ymax$[ebp]
	cmp	ecx, DWORD PTR _y2$[ebp]
	jle	SHORT $LN25@DrawTriang
	mov	edx, DWORD PTR _ymax$[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN26@DrawTriang
$LN25@DrawTriang:
	mov	eax, DWORD PTR _y2$[ebp]
	mov	DWORD PTR tv79[ebp], eax
$LN26@DrawTriang:
	mov	ecx, DWORD PTR tv79[ebp]
	mov	DWORD PTR _ymax$[ebp], ecx

; 211  :   
; 212  :   for (int v = ymin; v <= ymax; v++) {

	mov	edx, DWORD PTR _ymin$[ebp]
	mov	DWORD PTR _v$7[ebp], edx
	jmp	SHORT $LN8@DrawTriang
$LN7@DrawTriang:
	mov	eax, DWORD PTR _v$7[ebp]
	add	eax, 1
	mov	DWORD PTR _v$7[ebp], eax
$LN8@DrawTriang:
	mov	ecx, DWORD PTR _v$7[ebp]
	cmp	ecx, DWORD PTR _ymax$[ebp]
	jg	$LN6@DrawTriang

; 213  :     for (int u = xmin; u <= xmax; u++) {

	mov	edx, DWORD PTR _xmin$[ebp]
	mov	DWORD PTR _u$6[ebp], edx
	jmp	SHORT $LN5@DrawTriang
$LN4@DrawTriang:
	mov	eax, DWORD PTR _u$6[ebp]
	add	eax, 1
	mov	DWORD PTR _u$6[ebp], eax
$LN5@DrawTriang:
	mov	ecx, DWORD PTR _u$6[ebp]
	cmp	ecx, DWORD PTR _xmax$[ebp]
	jg	$LN3@DrawTriang

; 214  :       if ( TestBoundry(u,v) == true ) {    

	mov	edx, DWORD PTR _v$7[ebp]
	push	edx
	mov	eax, DWORD PTR _u$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestBoundry@GDI@graphics@@AAE_NHH@Z	; graphics::GDI::TestBoundry
	movzx	ecx, al
	cmp	ecx, 1
	jne	$LN1@DrawTriang

; 215  :         double alpha = static_cast<double>(f12(u,v))/static_cast<double>(f12(x0,y0));

	mov	edx, DWORD PTR _y1$[ebp]
	sub	edx, DWORD PTR _y2$[ebp]
	imul	edx, DWORD PTR _u$6[ebp]
	mov	eax, DWORD PTR _x2$[ebp]
	sub	eax, DWORD PTR _x1$[ebp]
	imul	eax, DWORD PTR _v$7[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _x1$[ebp]
	imul	ecx, DWORD PTR _y2$[ebp]
	add	edx, ecx
	mov	eax, DWORD PTR _x2$[ebp]
	imul	eax, DWORD PTR _y1$[ebp]
	sub	edx, eax
	cvtsi2sd xmm0, edx
	mov	ecx, DWORD PTR _y1$[ebp]
	sub	ecx, DWORD PTR _y2$[ebp]
	imul	ecx, DWORD PTR _x0$[ebp]
	mov	edx, DWORD PTR _x2$[ebp]
	sub	edx, DWORD PTR _x1$[ebp]
	imul	edx, DWORD PTR _y0$[ebp]
	add	ecx, edx
	mov	eax, DWORD PTR _x1$[ebp]
	imul	eax, DWORD PTR _y2$[ebp]
	add	ecx, eax
	mov	edx, DWORD PTR _x2$[ebp]
	imul	edx, DWORD PTR _y1$[ebp]
	sub	ecx, edx
	cvtsi2sd xmm1, ecx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _alpha$5[ebp], xmm0

; 216  :         double beta  = static_cast<double>(f20(u,v))/static_cast<double>(f20(x1,y1));

	mov	eax, DWORD PTR _y2$[ebp]
	sub	eax, DWORD PTR _y0$[ebp]
	imul	eax, DWORD PTR _u$6[ebp]
	mov	ecx, DWORD PTR _x0$[ebp]
	sub	ecx, DWORD PTR _x2$[ebp]
	imul	ecx, DWORD PTR _v$7[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _x2$[ebp]
	imul	edx, DWORD PTR _y0$[ebp]
	add	eax, edx
	mov	ecx, DWORD PTR _x0$[ebp]
	imul	ecx, DWORD PTR _y2$[ebp]
	sub	eax, ecx
	cvtsi2sd xmm0, eax
	mov	edx, DWORD PTR _y2$[ebp]
	sub	edx, DWORD PTR _y0$[ebp]
	imul	edx, DWORD PTR _x1$[ebp]
	mov	eax, DWORD PTR _x0$[ebp]
	sub	eax, DWORD PTR _x2$[ebp]
	imul	eax, DWORD PTR _y1$[ebp]
	add	edx, eax
	mov	ecx, DWORD PTR _x2$[ebp]
	imul	ecx, DWORD PTR _y0$[ebp]
	add	edx, ecx
	mov	eax, DWORD PTR _x0$[ebp]
	imul	eax, DWORD PTR _y2$[ebp]
	sub	edx, eax
	cvtsi2sd xmm1, edx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _beta$4[ebp], xmm0

; 217  :         double gamma = static_cast<double>(f01(u,v))/static_cast<double>(f01(x2,y2));

	mov	ecx, DWORD PTR _y0$[ebp]
	sub	ecx, DWORD PTR _y1$[ebp]
	imul	ecx, DWORD PTR _u$6[ebp]
	mov	edx, DWORD PTR _x1$[ebp]
	sub	edx, DWORD PTR _x0$[ebp]
	imul	edx, DWORD PTR _v$7[ebp]
	add	ecx, edx
	mov	eax, DWORD PTR _x0$[ebp]
	imul	eax, DWORD PTR _y1$[ebp]
	add	ecx, eax
	mov	edx, DWORD PTR _x1$[ebp]
	imul	edx, DWORD PTR _y0$[ebp]
	sub	ecx, edx
	cvtsi2sd xmm0, ecx
	mov	eax, DWORD PTR _y0$[ebp]
	sub	eax, DWORD PTR _y1$[ebp]
	imul	eax, DWORD PTR _x2$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	sub	ecx, DWORD PTR _x0$[ebp]
	imul	ecx, DWORD PTR _y2$[ebp]
	add	eax, ecx
	mov	edx, DWORD PTR _x0$[ebp]
	imul	edx, DWORD PTR _y1$[ebp]
	add	eax, edx
	mov	ecx, DWORD PTR _x1$[ebp]
	imul	ecx, DWORD PTR _y0$[ebp]
	sub	eax, ecx
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	movsd	QWORD PTR _gamma$3[ebp], xmm0

; 218  :         if ( alpha >= 0 && alpha <= 1 && 
; 219  :              beta  >= 0 && beta  <= 1 && 
; 220  :              gamma >= 0 && gamma <= 1) {

	movsd	xmm0, QWORD PTR _alpha$5[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	$LN1@DrawTriang
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, QWORD PTR _alpha$5[ebp]
	jb	$LN1@DrawTriang
	movsd	xmm0, QWORD PTR _beta$4[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	$LN1@DrawTriang
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, QWORD PTR _beta$4[ebp]
	jb	$LN1@DrawTriang
	movsd	xmm0, QWORD PTR _gamma$3[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN1@DrawTriang
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, QWORD PTR _gamma$3[ebp]
	jb	SHORT $LN1@DrawTriang

; 221  :           double xindex = static_cast<double>(u-xmin)/static_cast<double>(xmax-xmin); 

	mov	edx, DWORD PTR _u$6[ebp]
	sub	edx, DWORD PTR _xmin$[ebp]
	cvtsi2sd xmm0, edx
	mov	eax, DWORD PTR _xmax$[ebp]
	sub	eax, DWORD PTR _xmin$[ebp]
	cvtsi2sd xmm1, eax
	divsd	xmm0, xmm1
	movsd	QWORD PTR _xindex$2[ebp], xmm0

; 222  :           double yindex = static_cast<double>(v-ymin)/static_cast<double>(ymax-ymin);         

	mov	ecx, DWORD PTR _v$7[ebp]
	sub	ecx, DWORD PTR _ymin$[ebp]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _ymax$[ebp]
	sub	edx, DWORD PTR _ymin$[ebp]
	cvtsi2sd xmm1, edx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _yindex$1[ebp], xmm0

; 223  :           FillPixel(u,v,xindex,yindex);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _yindex$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xindex$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _v$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillPixel@GDI@graphics@@AAEXHHNN@Z	; graphics::GDI::FillPixel
$LN1@DrawTriang:

; 224  :         }
; 225  :       }
; 226  :     }

	jmp	$LN4@DrawTriang
$LN3@DrawTriang:

; 227  :   }

	jmp	$LN7@DrawTriang
$LN6@DrawTriang:

; 228  :   
; 229  : 
; 230  : #undef f12
; 231  : #undef f20
; 232  : #undef f01
; 233  : 
; 234  : }

	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?DrawTriangle@GDI@graphics@@QAEXHHHHHH@Z ENDP		; graphics::GDI::DrawTriangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_yindex$1 = -32						; size = 8
_xindex$2 = -24						; size = 8
_test$3 = -16						; size = 4
_u$4 = -12						; size = 4
_v$5 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_radius$ = 16						; size = 4
?DrawCircle@GDI@graphics@@QAEXHHH@Z PROC		; graphics::GDI::DrawCircle
; _this$ = ecx

; 142  : void GDI::DrawCircle(int x, int y, int radius) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 143  :   
; 144  :   for (int v = y; v < (y+radius*2); v++) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _v$5[ebp], eax
	jmp	SHORT $LN8@DrawCircle
$LN7@DrawCircle:
	mov	ecx, DWORD PTR _v$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _v$5[ebp], ecx
$LN8@DrawCircle:
	mov	edx, DWORD PTR _radius$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	cmp	DWORD PTR _v$5[ebp], ecx
	jge	$LN6@DrawCircle

; 145  :     for (int u = x; u < (x+radius*2); u++) {

	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR _u$4[ebp], edx
	jmp	SHORT $LN5@DrawCircle
$LN4@DrawCircle:
	mov	eax, DWORD PTR _u$4[ebp]
	add	eax, 1
	mov	DWORD PTR _u$4[ebp], eax
$LN5@DrawCircle:
	mov	ecx, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	lea	eax, DWORD PTR [edx+ecx*2]
	cmp	DWORD PTR _u$4[ebp], eax
	jge	$LN3@DrawCircle

; 146  :       if ( TestBoundry(u,v) == true ) {

	mov	ecx, DWORD PTR _v$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _u$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestBoundry@GDI@graphics@@AAE_NHH@Z	; graphics::GDI::TestBoundry
	movzx	eax, al
	cmp	eax, 1
	jne	$LN1@DrawCircle

; 147  :         int test = (u-x-radius)*(u-x-radius) + (v-y-radius)*(v-y-radius);

	mov	ecx, DWORD PTR _u$4[ebp]
	sub	ecx, DWORD PTR _x$[ebp]
	sub	ecx, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _u$4[ebp]
	sub	edx, DWORD PTR _x$[ebp]
	sub	edx, DWORD PTR _radius$[ebp]
	imul	ecx, edx
	mov	eax, DWORD PTR _v$5[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	sub	eax, DWORD PTR _radius$[ebp]
	mov	edx, DWORD PTR _v$5[ebp]
	sub	edx, DWORD PTR _y$[ebp]
	sub	edx, DWORD PTR _radius$[ebp]
	imul	eax, edx
	add	ecx, eax
	mov	DWORD PTR _test$3[ebp], ecx

; 148  :         if (test < radius*radius) {

	mov	eax, DWORD PTR _radius$[ebp]
	imul	eax, DWORD PTR _radius$[ebp]
	cmp	DWORD PTR _test$3[ebp], eax
	jge	SHORT $LN1@DrawCircle

; 149  :           double xindex = static_cast<double>(u-x)/static_cast<double>(radius*2); 

	mov	ecx, DWORD PTR _u$4[ebp]
	sub	ecx, DWORD PTR _x$[ebp]
	cvtsi2sd xmm0, ecx
	mov	edx, DWORD PTR _radius$[ebp]
	shl	edx, 1
	cvtsi2sd xmm1, edx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _xindex$2[ebp], xmm0

; 150  :           double yindex = static_cast<double>(v-y)/static_cast<double>(radius*2);         

	mov	eax, DWORD PTR _v$5[ebp]
	sub	eax, DWORD PTR _y$[ebp]
	cvtsi2sd xmm0, eax
	mov	ecx, DWORD PTR _radius$[ebp]
	shl	ecx, 1
	cvtsi2sd xmm1, ecx
	divsd	xmm0, xmm1
	movsd	QWORD PTR _yindex$1[ebp], xmm0

; 151  :           FillPixel(u,v,xindex,yindex);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _yindex$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xindex$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$5[ebp]
	push	edx
	mov	eax, DWORD PTR _u$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillPixel@GDI@graphics@@AAEXHHNN@Z	; graphics::GDI::FillPixel
$LN1@DrawCircle:

; 152  :         }
; 153  :       }
; 154  :     }

	jmp	$LN4@DrawCircle
$LN3@DrawCircle:

; 155  :   }

	jmp	$LN7@DrawCircle
$LN6@DrawCircle:

; 156  : }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DrawCircle@GDI@graphics@@QAEXHHH@Z ENDP		; graphics::GDI::DrawCircle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_yindex$1 = -28						; size = 8
_xindex$2 = -20						; size = 8
_u$3 = -12						; size = 4
_v$4 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?DrawRectangle@GDI@graphics@@QAEXHHHH@Z PROC		; graphics::GDI::DrawRectangle
; _this$ = ecx

; 110  : void GDI::DrawRectangle(int x, int y, int width, int height) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 111  : 
; 112  :   //DrawTriangle(x,y,x+width,y,x,y+height);
; 113  :   //DrawTriangle(x,y+height,x+width,y+height,x+width,y);
; 114  : 
; 115  :   /*
; 116  :   //theta += M_PI/100;
; 117  :   double vx=0,vy=0;
; 118  :   double c = cos(theta);
; 119  :   double s = sin(theta);
; 120  :   double m00 = c;//vx*vx+(1-vx*vx)*c;
; 121  :   double m01 = -s;//vx*vy*(1-c);
; 122  :   double m10 = s;//vx*vy*(1-c);
; 123  :   double m11 = c;//vy*vy+(1-vy*vy)*c;
; 124  :   */
; 125  : 
; 126  :   for (int v = y; v < (y+height); v++) {

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _v$4[ebp], eax
	jmp	SHORT $LN7@DrawRectan
$LN6@DrawRectan:
	mov	ecx, DWORD PTR _v$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _v$4[ebp], ecx
$LN7@DrawRectan:
	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _height$[ebp]
	cmp	DWORD PTR _v$4[ebp], edx
	jge	$LN5@DrawRectan

; 127  :     for (int u = x; u < (x+width); u++) {

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _u$3[ebp], eax
	jmp	SHORT $LN4@DrawRectan
$LN3@DrawRectan:
	mov	ecx, DWORD PTR _u$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _u$3[ebp], ecx
$LN4@DrawRectan:
	mov	edx, DWORD PTR _x$[ebp]
	add	edx, DWORD PTR _width$[ebp]
	cmp	DWORD PTR _u$3[ebp], edx
	jge	SHORT $LN2@DrawRectan

; 128  :       //int ud = static_cast<int>(u*m00+v*m01);//(u*cos(theta)-v*sin(theta));
; 129  :       //int vd = static_cast<int>(u*m10+v*m11);//(u*sin(theta)+v*cos(theta));
; 130  :       if ( TestBoundry(u,v) == true ) {

	mov	eax, DWORD PTR _v$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _u$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TestBoundry@GDI@graphics@@AAE_NHH@Z	; graphics::GDI::TestBoundry
	movzx	edx, al
	cmp	edx, 1
	jne	SHORT $LN1@DrawRectan

; 131  :         double xindex = static_cast<double>(u-x)/static_cast<double>(width); 

	mov	eax, DWORD PTR _u$3[ebp]
	sub	eax, DWORD PTR _x$[ebp]
	cvtsi2sd xmm0, eax
	cvtsi2sd xmm1, DWORD PTR _width$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _xindex$2[ebp], xmm0

; 132  :         double yindex = static_cast<double>(v-y)/static_cast<double>(height); 

	mov	ecx, DWORD PTR _v$4[ebp]
	sub	ecx, DWORD PTR _y$[ebp]
	cvtsi2sd xmm0, ecx
	cvtsi2sd xmm1, DWORD PTR _height$[ebp]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _yindex$1[ebp], xmm0

; 133  :         //rotation
; 134  : 
; 135  :         //
; 136  :         FillPixel(u,v,xindex,yindex);

	sub	esp, 8
	movsd	xmm0, QWORD PTR _yindex$1[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _xindex$2[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$4[ebp]
	push	edx
	mov	eax, DWORD PTR _u$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillPixel@GDI@graphics@@AAEXHHNN@Z	; graphics::GDI::FillPixel
$LN1@DrawRectan:

; 137  :       }
; 138  :     }

	jmp	$LN3@DrawRectan
$LN2@DrawRectan:

; 139  :   }

	jmp	$LN6@DrawRectan
$LN5@DrawRectan:

; 140  : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DrawRectangle@GDI@graphics@@QAEXHHHH@Z ENDP		; graphics::GDI::DrawRectangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EndFill@GDI@graphics@@QAEXXZ PROC			; graphics::GDI::EndFill
; _this$ = ecx

; 105  : void GDI::EndFill() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 
; 107  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndFill@GDI@graphics@@QAEXXZ ENDP			; graphics::GDI::EndFill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_colors$ = 8						; size = 4
_alphas$ = 12						; size = 4
_ratios$ = 16						; size = 4
_count$ = 20						; size = 4
_mode$ = 24						; size = 4
?BeginGradientFill@GDI@graphics@@QAEXPBUtagRGBQUAD@@PBN1HW4FillMode@2@@Z PROC ; graphics::GDI::BeginGradientFill
; _this$ = ecx

; 92   : void GDI::BeginGradientFill(const RGBQUAD* colors, const double* alphas, const double* ratios, int count, FillMode mode) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 93   :   ClearFill();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFill@GDI@graphics@@AAEXXZ		; graphics::GDI::ClearFill

; 94   :   fill_.count = count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+160], ecx

; 95   :   for (int i = 0; i < fill_.count; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@BeginGradi
$LN2@BeginGradi:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN3@BeginGradi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+160]
	jge	SHORT $LN1@BeginGradi

; 96   :     fill_.colors[i].rgbRed   = colors[i].rgbRed;

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _colors$[ebp]
	mov	cl, BYTE PTR [esi+ecx*4+2]
	mov	BYTE PTR [eax+edx*4+82], cl

; 97   :     fill_.colors[i].rgbGreen = colors[i].rgbGreen;

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _colors$[ebp]
	mov	cl, BYTE PTR [esi+ecx*4+1]
	mov	BYTE PTR [eax+edx*4+81], cl

; 98   :     fill_.colors[i].rgbBlue  = colors[i].rgbBlue;

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _colors$[ebp]
	mov	cl, BYTE PTR [esi+ecx*4]
	mov	BYTE PTR [eax+edx*4+80], cl

; 99   :     fill_.alphas[i] = alphas[i];

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _alphas$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx*8]
	movsd	QWORD PTR [eax+edx*8+96], xmm0

; 100  :     fill_.ratios[i] = ratios[i];

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	esi, DWORD PTR _ratios$[ebp]
	movsd	xmm0, QWORD PTR [esi+ecx*8]
	movsd	QWORD PTR [eax+edx*8+128], xmm0

; 101  :   }

	jmp	$LN2@BeginGradi
$LN1@BeginGradi:

; 102  :   fill_.mode = mode;  

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [edx+164], eax

; 103  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?BeginGradientFill@GDI@graphics@@QAEXPBUtagRGBQUAD@@PBN1HW4FillMode@2@@Z ENDP ; graphics::GDI::BeginGradientFill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
_alpha$ = 12						; size = 8
?BeginFill@GDI@graphics@@QAEXUtagRGBQUAD@@N@Z PROC	; graphics::GDI::BeginFill
; _this$ = ecx

; 82   : void GDI::BeginFill(RGBQUAD color, double alpha) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 83   :   ClearFill();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearFill@GDI@graphics@@AAEXXZ		; graphics::GDI::ClearFill

; 84   :   fill_.count = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+160], 1

; 85   :   fill_.colors[0].rgbRed = color.rgbRed;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _color$[ebp+2]
	mov	BYTE PTR [edx+ecx+82], al

; 86   :   fill_.colors[0].rgbGreen = color.rgbGreen;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _color$[ebp+1]
	mov	BYTE PTR [edx+ecx+81], al

; 87   :   fill_.colors[0].rgbBlue = color.rgbBlue;

	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _color$[ebp]
	mov	BYTE PTR [edx+ecx+80], al

; 88   :   fill_.alphas[0] = alpha;

	mov	ecx, 8
	imul	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _alpha$[ebp]
	movsd	QWORD PTR [edx+ecx+96], xmm0

; 89   :   fill_.mode = kSolid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 0

; 90   : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?BeginFill@GDI@graphics@@QAEXUtagRGBQUAD@@N@Z ENDP	; graphics::GDI::BeginFill
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
?SetClippingArea@GDI@graphics@@QAEXHHHH@Z PROC		; graphics::GDI::SetClippingArea
; _this$ = ecx

; 75   : void GDI::SetClippingArea(int x, int y, int width, int height) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 76   :   clip_.x = x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax+168], ecx

; 77   :   clip_.y = y;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR [edx+172], eax

; 78   :   clip_.width = width;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+176], edx

; 79   :   clip_.height = height;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+180], ecx

; 80   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetClippingArea@GDI@graphics@@QAEXHHHH@Z ENDP		; graphics::GDI::SetClippingArea
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?Clear@GDI@graphics@@UAEXUtagRGBQUAD@@@Z PROC		; graphics::GDI::Clear
; _this$ = ecx

; 67   : void GDI::Clear(RGBQUAD color) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 68   :   for (int i = 0; i < display_width_*display_height_; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Clear
$LN2@Clear:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Clear:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR _i$1[ebp], eax
	jge	SHORT $LN4@Clear

; 69   :     back_buffer_[i].rgbRed   = color.rgbRed;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	cl, BYTE PTR _color$[ebp+2]
	mov	BYTE PTR [edx+eax*4+2], cl

; 70   :     back_buffer_[i].rgbGreen = color.rgbGreen;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	dl, BYTE PTR _color$[ebp+1]
	mov	BYTE PTR [eax+ecx*4+1], dl

; 71   :     back_buffer_[i].rgbBlue  = color.rgbBlue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	al, BYTE PTR _color$[ebp]
	mov	BYTE PTR [ecx+edx*4], al

; 72   :   }

	jmp	SHORT $LN2@Clear
$LN4@Clear:

; 73   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@GDI@graphics@@UAEXUtagRGBQUAD@@@Z ENDP		; graphics::GDI::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Render@GDI@graphics@@UAEXXZ PROC			; graphics::GDI::Render
; _this$ = ecx

; 57   : void GDI::Render() {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 58   :   //memset(back_buffer_,255,200*200*4);
; 59   :   //SetDIBits(dc,hbmp,0,200,back_buffer,&bitmap_info,DIB_RGB_COLORS);
; 60   :   //for (int i = 0; i < display_width_*display_height_; i++) {
; 61   :   //  frame_buffer_[i] = back_buffer_[i];
; 62   :   //}
; 63   :   memcpy(frame_buffer_,back_buffer_,display_width_*display_height_*sizeof(RGBQUAD));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	imul	edx, DWORD PTR [ecx+12]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 64   :   SetDIBitsToDevice(window_dc_,0,0,display_width_,display_height_,0,0,0,display_height_,frame_buffer_,&bitmap_info,DIB_RGB_COLORS);

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	DWORD PTR __imp__SetDIBitsToDevice@48
	cmp	esi, esp
	call	__RTC_CheckEsp

; 65   : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Render@GDI@graphics@@UAEXXZ ENDP			; graphics::GDI::Render
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Deinitialize@GDI@graphics@@QAEXXZ PROC			; graphics::GDI::Deinitialize
; _this$ = ecx

; 50   : void GDI::Deinitialize() {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :   if (back_buffer_ != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN1@Deinitiali

; 52   :     delete [] back_buffer_;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Deinitiali:

; 53   :   DeleteObject(hbmp);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   :   Graphics::Deinitialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Deinitialize@Graphics@graphics@@QAEXXZ	; graphics::Graphics::Deinitialize

; 55   : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@GDI@graphics@@QAEXXZ ENDP			; graphics::GDI::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_window_handle$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
?Initialize@GDI@graphics@@QAEXPAUHWND__@@HH@Z PROC	; graphics::GDI::Initialize
; _this$ = ecx

; 29   : void GDI::Initialize(HWND window_handle,int width,int height) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 
; 31   :   Graphics::Initialize(window_handle,width,height);

	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR _window_handle$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Initialize@Graphics@graphics@@QAEXPAUHWND__@@HH@Z ; graphics::Graphics::Initialize

; 32   :   memset(&bitmap_info,0,sizeof(bitmap_info));

	push	44					; 0000002cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 33   :   bitmap_info.bmiHeader.biBitCount = 32;

	mov	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+30], cx

; 34   :   bitmap_info.bmiHeader.biPlanes = 1;

	mov	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+28], ax

; 35   :   bitmap_info.bmiHeader.biSize = sizeof(bitmap_info.bmiHeader);

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 40			; 00000028H

; 36   :   bitmap_info.bmiHeader.biWidth = width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 37   :   bitmap_info.bmiHeader.biHeight = -height;

	mov	edx, DWORD PTR _height$[ebp]
	neg	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], edx

; 38   :   bitmap_info.bmiHeader.biSizeImage = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 39   :   bitmap_info.bmiHeader.biCompression = BI_RGB;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0

; 40   : 
; 41   :   window_dc_ = GetDC(window_handle);//GetWindowDC(window_handle);//CreateCompatibleDC(GetDC(window_handle));

	mov	esi, esp
	mov	eax, DWORD PTR _window_handle$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 42   :   hbmp = CreateDIBSection(window_dc_,&bitmap_info,DIB_RGB_COLORS,reinterpret_cast<void**>(&frame_buffer_),NULL,0);

	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 72					; 00000048H
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	DWORD PTR __imp__CreateDIBSection@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 43   :   
; 44   :   back_buffer_ = new RGBQUAD[display_width_*display_height_];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	imul	ecx, DWORD PTR [eax+12]
	xor	ebx, ebx
	mov	eax, ecx
	mov	edx, 4
	mul	edx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+68], ecx

; 45   :   // = CreateCompatibleBitmap(dc,200,200);
; 46   :   //SelectObject(dc,hbmp);
; 47   :   SetClippingArea(0,0,display_width_,display_height_);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetClippingArea@GDI@graphics@@QAEXHHHH@Z ; graphics::GDI::SetClippingArea

; 48   : }

	pop	esi
	pop	ebx
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Initialize@GDI@graphics@@QAEXPAUHWND__@@HH@Z ENDP	; graphics::GDI::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GDI@graphics@@UAE@XZ PROC				; graphics::GDI::~GDI
; _this$ = ecx

; 25   : GDI::~GDI() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GDI@graphics@@6B@

; 26   : 
; 27   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Graphics@graphics@@UAE@XZ		; graphics::Graphics::~Graphics
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1GDI@graphics@@UAE@XZ ENDP				; graphics::GDI::~GDI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\gdi.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0GDI@graphics@@QAE@XZ PROC				; graphics::GDI::GDI
; _this$ = ecx

; 16   : GDI::GDI() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Graphics@graphics@@QAE@XZ		; graphics::Graphics::Graphics
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7GDI@graphics@@6B@

; 17   :   memset(&fill_,0,sizeof(fill_));

	push	88					; 00000058H
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 18   :   back_buffer_ = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], 0

; 19   :   frame_buffer_ = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 20   :   //int test[] = {1,4};
; 21   :   
; 22   :   //double r = interpolate_int_array(test,2,0);
; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0GDI@graphics@@QAE@XZ ENDP				; graphics::GDI::GDI
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GGraphics@graphics@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGraphics@graphics@@UAEPAXI@Z PROC			; graphics::Graphics::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Graphics@graphics@@UAE@XZ		; graphics::Graphics::~Graphics
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGraphics@graphics@@UAEPAXI@Z ENDP			; graphics::Graphics::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ?Deinitialize@Graphics@graphics@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Deinitialize@Graphics@graphics@@QAEXXZ PROC		; graphics::Graphics::Deinitialize, COMDAT
; _this$ = ecx

; 69   :   void Deinitialize() {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 70   :   }

	mov	esp, ebp
	pop	ebp
	ret	0
?Deinitialize@Graphics@graphics@@QAEXXZ ENDP		; graphics::Graphics::Deinitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ?Initialize@Graphics@graphics@@QAEXPAUHWND__@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_window_handle$ = 8					; size = 4
_width$ = 12						; size = 4
_height$ = 16						; size = 4
?Initialize@Graphics@graphics@@QAEXPAUHWND__@@HH@Z PROC	; graphics::Graphics::Initialize, COMDAT
; _this$ = ecx

; 64   :   void Initialize(HWND window_handle, int width, int height) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 65   :     window_handle_ = window_handle;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _window_handle$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 66   :     display_width_ = width;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR [edx+8], eax

; 67   :     display_height_ = height;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 68   :   }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Initialize@Graphics@graphics@@QAEXPAUHWND__@@HH@Z ENDP	; graphics::Graphics::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ??1Graphics@graphics@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Graphics@graphics@@UAE@XZ PROC			; graphics::Graphics::~Graphics, COMDAT
; _this$ = ecx

; 63   :   virtual ~Graphics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Graphics@graphics@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1Graphics@graphics@@UAE@XZ ENDP			; graphics::Graphics::~Graphics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ??0Graphics@graphics@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Graphics@graphics@@QAE@XZ PROC			; graphics::Graphics::Graphics, COMDAT
; _this$ = ecx

; 62   :   Graphics() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Graphics@graphics@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Graphics@graphics@@QAE@XZ ENDP			; graphics::Graphics::Graphics
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z
_TEXT	SEGMENT
tv148 = -48						; size = 4
tv146 = -44						; size = 4
tv143 = -38						; size = 2
tv137 = -36						; size = 4
tv135 = -32						; size = 4
tv132 = -26						; size = 2
tv94 = -24						; size = 4
tv92 = -20						; size = 4
tv89 = -14						; size = 2
_r$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_s$ = 16						; size = 8
?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z PROC ; graphics::interpolate_color, COMDAT

; 52   : inline RGBQUAD interpolate_color(RGBQUAD a,RGBQUAD b,double s) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 53   :   RGBQUAD r;
; 54   :   r.rgbRed   = static_cast<BYTE>(interpolate_int(a.rgbRed,b.rgbRed,s));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	movzx	eax, BYTE PTR _b$[ebp+2]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp+2]
	push	ecx
	call	?interpolate_int@graphics@@YANHHN@Z	; graphics::interpolate_int
	add	esp, 16					; 00000010H
	fnstcw	WORD PTR tv89[ebp]
	movzx	eax, WORD PTR tv89[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv92[ebp], eax
	fldcw	WORD PTR tv92[ebp]
	fistp	DWORD PTR tv94[ebp]
	fldcw	WORD PTR tv89[ebp]
	mov	dl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _r$[ebp+2], dl

; 55   :   r.rgbGreen = static_cast<BYTE>(interpolate_int(a.rgbGreen,b.rgbGreen,s));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	movzx	eax, BYTE PTR _b$[ebp+1]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp+1]
	push	ecx
	call	?interpolate_int@graphics@@YANHHN@Z	; graphics::interpolate_int
	add	esp, 16					; 00000010H
	fnstcw	WORD PTR tv132[ebp]
	movzx	eax, WORD PTR tv132[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv135[ebp], eax
	fldcw	WORD PTR tv135[ebp]
	fistp	DWORD PTR tv137[ebp]
	fldcw	WORD PTR tv132[ebp]
	mov	dl, BYTE PTR tv137[ebp]
	mov	BYTE PTR _r$[ebp+1], dl

; 56   :   r.rgbBlue  = static_cast<BYTE>(interpolate_int(a.rgbBlue,b.rgbBlue,s));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _s$[ebp]
	movsd	QWORD PTR [esp], xmm0
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _a$[ebp]
	push	ecx
	call	?interpolate_int@graphics@@YANHHN@Z	; graphics::interpolate_int
	add	esp, 16					; 00000010H
	fnstcw	WORD PTR tv143[ebp]
	movzx	eax, WORD PTR tv143[ebp]
	or	eax, 3072				; 00000c00H
	mov	DWORD PTR tv146[ebp], eax
	fldcw	WORD PTR tv146[ebp]
	fistp	DWORD PTR tv148[ebp]
	fldcw	WORD PTR tv143[ebp]
	mov	dl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _r$[ebp], dl

; 57   :   return r;

	mov	eax, DWORD PTR _r$[ebp]

; 58   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@interpolat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@interpolat:
	DD	1
	DD	$LN4@interpolat
$LN4@interpolat:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@interpolat
$LN3@interpolat:
	DB	114					; 00000072H
	DB	0
?interpolate_color@graphics@@YA?AUtagRGBQUAD@@U2@0N@Z ENDP ; graphics::interpolate_color
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\khalid\documents\github\gbemu\solution\code\graphics\graphics.h
;	COMDAT ?interpolate_int@graphics@@YANHHN@Z
_TEXT	SEGMENT
tv72 = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_s$ = 16						; size = 8
?interpolate_int@graphics@@YANHHN@Z PROC		; graphics::interpolate_int, COMDAT

; 37   : inline double interpolate_int(int a,int b,double s) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 38   :   return a + s*(b-a);

	cvtsi2sd xmm0, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	cvtsi2sd xmm1, eax
	mulsd	xmm1, QWORD PTR _s$[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv72[ebp], xmm0
	fld	QWORD PTR tv72[ebp]

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?interpolate_int@graphics@@YANHHN@Z ENDP		; graphics::interpolate_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?noiseseed@synth@audio@@3IA			; audio::synth::noiseseed
_BSS	SEGMENT
?noiseseed@synth@audio@@3IA DD 01H DUP (?)		; audio::synth::noiseseed
_BSS	ENDS
PUBLIC	?bits2float@synth@audio@@YAMI@Z			; audio::synth::bits2float
PUBLIC	?RandomInt@synth@audio@@YAIPEAI@Z		; audio::synth::RandomInt
PUBLIC	?RandomFloat@synth@audio@@YAMPEAI@Z		; audio::synth::RandomFloat
PUBLIC	?Noise@synth@audio@@YAMPEAI@Z			; audio::synth::Noise
PUBLIC	??0Component@synth@audio@@QEAA@XZ		; audio::synth::Component::Component
PUBLIC	??1Component@synth@audio@@UEAA@XZ		; audio::synth::Component::~Component
PUBLIC	??_GComponent@synth@audio@@UEAAPEAXI@Z		; audio::synth::Component::`scalar deleting destructor'
PUBLIC	??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ	; audio::synth::Wavetable<8,24>::Wavetable<8,24>
PUBLIC	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ	; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
PUBLIC	?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z ; audio::synth::Wavetable<8,24>::Tick
PUBLIC	?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z ; audio::synth::Wavetable<8,24>::get_increment
PUBLIC	??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z ; audio::synth::Wavetable<8,24>::`scalar deleting destructor'
PUBLIC	??0SquareOscillator@synth@audio@@QEAA@XZ	; audio::synth::SquareOscillator::SquareOscillator
PUBLIC	??1SquareOscillator@synth@audio@@UEAA@XZ	; audio::synth::SquareOscillator::~SquareOscillator
PUBLIC	??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z	; audio::synth::SquareOscillator::`scalar deleting destructor'
PUBLIC	??0NoiseSynth@synth@audio@@QEAA@XZ		; audio::synth::NoiseSynth::NoiseSynth
PUBLIC	??1NoiseSynth@synth@audio@@UEAA@XZ		; audio::synth::NoiseSynth::~NoiseSynth
PUBLIC	??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z		; audio::synth::NoiseSynth::`scalar deleting destructor'
PUBLIC	??_7Component@synth@audio@@6B@			; audio::synth::Component::`vftable'
PUBLIC	??_7?$Wavetable@$07$0BI@@synth@audio@@6B@	; audio::synth::Wavetable<8,24>::`vftable'
PUBLIC	??_7SquareOscillator@synth@audio@@6B@		; audio::synth::SquareOscillator::`vftable'
PUBLIC	??_7NoiseSynth@synth@audio@@6B@			; audio::synth::NoiseSynth::`vftable'
PUBLIC	??_R4Component@synth@audio@@6B@			; audio::synth::Component::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVComponent@synth@audio@@@8		; audio::synth::Component `RTTI Type Descriptor'
PUBLIC	??_R3Component@synth@audio@@8			; audio::synth::Component::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Component@synth@audio@@8			; audio::synth::Component::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Component@synth@audio@@8		; audio::synth::Component::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SquareOscillator@synth@audio@@6B@		; audio::synth::SquareOscillator::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSquareOscillator@synth@audio@@@8	; audio::synth::SquareOscillator `RTTI Type Descriptor'
PUBLIC	??_R3SquareOscillator@synth@audio@@8		; audio::synth::SquareOscillator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SquareOscillator@synth@audio@@8		; audio::synth::SquareOscillator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SquareOscillator@synth@audio@@8	; audio::synth::SquareOscillator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8 ; audio::synth::Wavetable<8,24>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Wavetable@$07$0BI@@synth@audio@@@8	; audio::synth::Wavetable<8,24> `RTTI Type Descriptor'
PUBLIC	??_R3?$Wavetable@$07$0BI@@synth@audio@@8	; audio::synth::Wavetable<8,24>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Wavetable@$07$0BI@@synth@audio@@8	; audio::synth::Wavetable<8,24>::`RTTI Base Class Array'
PUBLIC	??_R4?$Wavetable@$07$0BI@@synth@audio@@6B@	; audio::synth::Wavetable<8,24>::`RTTI Complete Object Locator'
PUBLIC	??_R4NoiseSynth@synth@audio@@6B@		; audio::synth::NoiseSynth::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNoiseSynth@synth@audio@@@8		; audio::synth::NoiseSynth `RTTI Type Descriptor'
PUBLIC	??_R3NoiseSynth@synth@audio@@8			; audio::synth::NoiseSynth::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NoiseSynth@synth@audio@@8			; audio::synth::NoiseSynth::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NoiseSynth@synth@audio@@8		; audio::synth::NoiseSynth::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@40c90fdb
PUBLIC	__real@4b800000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	__imp_cosf:PROC
EXTRN	__imp_logf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	??_EComponent@synth@audio@@UEAAPEAXI@Z:PROC	; audio::synth::Component::`vector deleting destructor'
EXTRN	??_E?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z:PROC ; audio::synth::Wavetable<8,24>::`vector deleting destructor'
EXTRN	??_ESquareOscillator@synth@audio@@UEAAPEAXI@Z:PROC ; audio::synth::SquareOscillator::`vector deleting destructor'
EXTRN	??_ENoiseSynth@synth@audio@@UEAAPEAXI@Z:PROC	; audio::synth::NoiseSynth::`vector deleting destructor'
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bits2float@synth@audio@@YAMI@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?bits2float@synth@audio@@YAMI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RandomInt@synth@audio@@YAIPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?RandomInt@synth@audio@@YAIPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RandomFloat@synth@audio@@YAMPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?RandomFloat@synth@audio@@YAMPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Noise@synth@audio@@YAMPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$?Noise@synth@audio@@YAMPEAI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?HardClip@synth@audio@@YAMM@Z DD imagerel ?HardClip@synth@audio@@YAMM@Z
	DD	imagerel ?HardClip@synth@audio@@YAMM@Z+92
	DD	imagerel $unwind$?HardClip@synth@audio@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Component@synth@audio@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0Component@synth@audio@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Component@synth@audio@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$??1Component@synth@audio@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GComponent@synth@audio@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??_GComponent@synth@audio@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z DD imagerel $LN3
	DD	imagerel $LN3+188
	DD	imagerel $unwind$?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0SquareOscillator@synth@audio@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??0SquareOscillator@synth@audio@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1SquareOscillator@synth@audio@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$??1SquareOscillator@synth@audio@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0NoiseSynth@synth@audio@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+216
	DD	imagerel $unwind$??0NoiseSynth@synth@audio@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1NoiseSynth@synth@audio@@UEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$??1NoiseSynth@synth@audio@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@4b800000
CONST	SEGMENT
__real@4b800000 DD 04b800000r			; 1.67772e+007
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@NoiseSynth@synth@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NoiseSynth@synth@audio@@8 DD imagerel ??_R0?AVNoiseSynth@synth@audio@@@8 ; audio::synth::NoiseSynth::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3NoiseSynth@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2NoiseSynth@synth@audio@@8
rdata$r	SEGMENT
??_R2NoiseSynth@synth@audio@@8 DD imagerel ??_R1A@?0A@EA@NoiseSynth@synth@audio@@8 ; audio::synth::NoiseSynth::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8
	DD	imagerel ??_R1A@?0A@EA@Component@synth@audio@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3NoiseSynth@synth@audio@@8
rdata$r	SEGMENT
??_R3NoiseSynth@synth@audio@@8 DD 00H			; audio::synth::NoiseSynth::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2NoiseSynth@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNoiseSynth@synth@audio@@@8
_DATA	SEGMENT
??_R0?AVNoiseSynth@synth@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::synth::NoiseSynth `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVNoiseSynth@synth@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4NoiseSynth@synth@audio@@6B@
rdata$r	SEGMENT
??_R4NoiseSynth@synth@audio@@6B@ DD 01H			; audio::synth::NoiseSynth::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVNoiseSynth@synth@audio@@@8
	DD	imagerel ??_R3NoiseSynth@synth@audio@@8
	DD	imagerel ??_R4NoiseSynth@synth@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_R4?$Wavetable@$07$0BI@@synth@audio@@6B@
rdata$r	SEGMENT
??_R4?$Wavetable@$07$0BI@@synth@audio@@6B@ DD 01H	; audio::synth::Wavetable<8,24>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$Wavetable@$07$0BI@@synth@audio@@@8
	DD	imagerel ??_R3?$Wavetable@$07$0BI@@synth@audio@@8
	DD	imagerel ??_R4?$Wavetable@$07$0BI@@synth@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$Wavetable@$07$0BI@@synth@audio@@8
rdata$r	SEGMENT
??_R2?$Wavetable@$07$0BI@@synth@audio@@8 DD imagerel ??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8 ; audio::synth::Wavetable<8,24>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Component@synth@audio@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$Wavetable@$07$0BI@@synth@audio@@8
rdata$r	SEGMENT
??_R3?$Wavetable@$07$0BI@@synth@audio@@8 DD 00H		; audio::synth::Wavetable<8,24>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$Wavetable@$07$0BI@@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Wavetable@$07$0BI@@synth@audio@@@8
_DATA	SEGMENT
??_R0?AV?$Wavetable@$07$0BI@@synth@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::synth::Wavetable<8,24> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$Wavetable@$07$0BI@@synth@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8 DD imagerel ??_R0?AV?$Wavetable@$07$0BI@@synth@audio@@@8 ; audio::synth::Wavetable<8,24>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$Wavetable@$07$0BI@@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SquareOscillator@synth@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SquareOscillator@synth@audio@@8 DD imagerel ??_R0?AVSquareOscillator@synth@audio@@@8 ; audio::synth::SquareOscillator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3SquareOscillator@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2SquareOscillator@synth@audio@@8
rdata$r	SEGMENT
??_R2SquareOscillator@synth@audio@@8 DD imagerel ??_R1A@?0A@EA@SquareOscillator@synth@audio@@8 ; audio::synth::SquareOscillator::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$Wavetable@$07$0BI@@synth@audio@@8
	DD	imagerel ??_R1A@?0A@EA@Component@synth@audio@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3SquareOscillator@synth@audio@@8
rdata$r	SEGMENT
??_R3SquareOscillator@synth@audio@@8 DD 00H		; audio::synth::SquareOscillator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2SquareOscillator@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSquareOscillator@synth@audio@@@8
_DATA	SEGMENT
??_R0?AVSquareOscillator@synth@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::synth::SquareOscillator `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSquareOscillator@synth@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4SquareOscillator@synth@audio@@6B@
rdata$r	SEGMENT
??_R4SquareOscillator@synth@audio@@6B@ DD 01H		; audio::synth::SquareOscillator::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSquareOscillator@synth@audio@@@8
	DD	imagerel ??_R3SquareOscillator@synth@audio@@8
	DD	imagerel ??_R4SquareOscillator@synth@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Component@synth@audio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Component@synth@audio@@8 DD imagerel ??_R0?AVComponent@synth@audio@@@8 ; audio::synth::Component::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Component@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R2Component@synth@audio@@8
rdata$r	SEGMENT
??_R2Component@synth@audio@@8 DD imagerel ??_R1A@?0A@EA@Component@synth@audio@@8 ; audio::synth::Component::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Component@synth@audio@@8
rdata$r	SEGMENT
??_R3Component@synth@audio@@8 DD 00H			; audio::synth::Component::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Component@synth@audio@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVComponent@synth@audio@@@8
_DATA	SEGMENT
??_R0?AVComponent@synth@audio@@@8 DQ FLAT:??_7type_info@@6B@ ; audio::synth::Component `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVComponent@synth@audio@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Component@synth@audio@@6B@
rdata$r	SEGMENT
??_R4Component@synth@audio@@6B@ DD 01H			; audio::synth::Component::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVComponent@synth@audio@@@8
	DD	imagerel ??_R3Component@synth@audio@@8
	DD	imagerel ??_R4Component@synth@audio@@6B@
rdata$r	ENDS
;	COMDAT ??_7NoiseSynth@synth@audio@@6B@
CONST	SEGMENT
??_7NoiseSynth@synth@audio@@6B@ DQ FLAT:??_R4NoiseSynth@synth@audio@@6B@ ; audio::synth::NoiseSynth::`vftable'
	DQ	FLAT:??_ENoiseSynth@synth@audio@@UEAAPEAXI@Z
	DQ	FLAT:?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z
	DQ	FLAT:?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z
CONST	ENDS
;	COMDAT ??_7SquareOscillator@synth@audio@@6B@
CONST	SEGMENT
??_7SquareOscillator@synth@audio@@6B@ DQ FLAT:??_R4SquareOscillator@synth@audio@@6B@ ; audio::synth::SquareOscillator::`vftable'
	DQ	FLAT:??_ESquareOscillator@synth@audio@@UEAAPEAXI@Z
	DQ	FLAT:?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z
	DQ	FLAT:?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z
CONST	ENDS
;	COMDAT ??_7?$Wavetable@$07$0BI@@synth@audio@@6B@
CONST	SEGMENT
??_7?$Wavetable@$07$0BI@@synth@audio@@6B@ DQ FLAT:??_R4?$Wavetable@$07$0BI@@synth@audio@@6B@ ; audio::synth::Wavetable<8,24>::`vftable'
	DQ	FLAT:??_E?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z
	DQ	FLAT:?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z
	DQ	FLAT:?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z
CONST	ENDS
;	COMDAT ??_7Component@synth@audio@@6B@
CONST	SEGMENT
??_7Component@synth@audio@@6B@ DQ FLAT:??_R4Component@synth@audio@@6B@ ; audio::synth::Component::`vftable'
	DQ	FLAT:??_EComponent@synth@audio@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
CONST	SEGMENT
$cppxdata$??0SquareOscillator@synth@audio@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0SquareOscillator@synth@audio@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0SquareOscillator@synth@audio@@QEAA@XZ
	DD	030H
	DD	00H
	DD	01H
$cppxdata$??0NoiseSynth@synth@audio@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0NoiseSynth@synth@audio@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0NoiseSynth@synth@audio@@QEAA@XZ
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GComponent@synth@audio@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Component@synth@audio@@UEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Component@synth@audio@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
xdata	SEGMENT
$unwind$?HardClip@synth@audio@@YAMM@Z DD 021a01H
	DD	07007120bH
$unwind$??0SquareOscillator@synth@audio@@QEAA@XZ DD 022711H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0SquareOscillator@synth@audio@@QEAA@XZ
$stateUnwindMap$??0SquareOscillator@synth@audio@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA
$ip2state$??0SquareOscillator@synth@audio@@QEAA@XZ DD imagerel ??0SquareOscillator@synth@audio@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0SquareOscillator@synth@audio@@QEAA@XZ+50
	DD	00H
	DD	imagerel ??0SquareOscillator@synth@audio@@QEAA@XZ+273
	DD	0ffffffffH
$unwind$?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1SquareOscillator@synth@audio@@UEAA@XZ DD 021e01H
	DD	07006520aH
$unwind$??0NoiseSynth@synth@audio@@QEAA@XZ DD 022711H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0NoiseSynth@synth@audio@@QEAA@XZ
$stateUnwindMap$??0NoiseSynth@synth@audio@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA
$ip2state$??0NoiseSynth@synth@audio@@QEAA@XZ DD imagerel ??0NoiseSynth@synth@audio@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0NoiseSynth@synth@audio@@QEAA@XZ+50
	DD	00H
	DD	imagerel ??0NoiseSynth@synth@audio@@QEAA@XZ+205
	DD	0ffffffffH
$unwind$?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1NoiseSynth@synth@audio@@UEAA@XZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Noise@synth@audio@@YAMPEAI@Z DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RandomFloat@synth@audio@@YAMPEAI@Z DD 021e01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RandomInt@synth@audio@@YAIPEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bits2float@synth@audio@@YAMI@Z DD 021c01H
	DD	070059209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?bits2float@synth@audio@@YAMI@Z$rtcName$0 DB 078H	; audio::synth::bits2float
	DB	00H
	ORG $+14
?bits2float@synth@audio@@YAMI@Z$rtcVarDesc DD 034H	; audio::synth::bits2float
	DD	04H
	DQ	FLAT:?bits2float@synth@audio@@YAMI@Z$rtcName$0
	ORG $+48
?bits2float@synth@audio@@YAMI@Z$rtcFrameData DD 01H	; audio::synth::bits2float
	DD	00H
	DQ	FLAT:?bits2float@synth@audio@@YAMI@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z PROC		; audio::synth::NoiseSynth::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??1NoiseSynth@synth@audio@@UEAA@XZ	; audio::synth::NoiseSynth::~NoiseSynth
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN1@scalar
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX@Z				; operator delete
$LN1@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GNoiseSynth@synth@audio@@UEAAPEAXI@Z ENDP		; audio::synth::NoiseSynth::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1NoiseSynth@synth@audio@@UEAA@XZ PROC			; audio::synth::NoiseSynth::~NoiseSynth

; 34   : NoiseSynth::~NoiseSynth() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7NoiseSynth@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 35   :   delete [] table;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??3@YAXPEAX@Z				; operator delete

; 36   :   table = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 37   : }

	mov	rcx, QWORD PTR this$[rsp]
	call	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1NoiseSynth@synth@audio@@UEAA@XZ ENDP			; audio::synth::NoiseSynth::~NoiseSynth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.cpp
_TEXT	SEGMENT
i$ = 32
$T1 = 40
$T2 = 48
tv92 = 56
this$ = 80
??0NoiseSynth@synth@audio@@QEAA@XZ PROC			; audio::synth::NoiseSynth::NoiseSynth

; 26   : NoiseSynth::NoiseSynth() : Wavetable() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]
	mov	QWORD PTR $T2[rsp], -2
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ ; audio::synth::Wavetable<8,24>::Wavetable<8,24>
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7NoiseSynth@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 27   :   table = new real_t[kIndexRange+1];

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	cdqe
	mov	QWORD PTR tv92[rsp], rax
	mov	eax, 4
	mov	rcx, QWORD PTR tv92[rsp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rax+32], rcx

; 28   :   int i;
; 29   :   for(i=0;i<=kIndexRange;++i) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN3@NoiseSynth
$LN2@NoiseSynth:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN3@NoiseSynth:
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN1@NoiseSynth

; 30   :     table[i] = HardClip(WhiteNoise);

	lea	rcx, OFFSET FLAT:?noiseseed@synth@audio@@3IA ; audio::synth::noiseseed
	call	?Noise@synth@audio@@YAMPEAI@Z		; audio::synth::Noise
	call	?HardClip@synth@audio@@YAMM@Z		; audio::synth::HardClip
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	DWORD PTR [rcx+rax*4], xmm0

; 31   :   }

	jmp	SHORT $LN2@NoiseSynth
$LN1@NoiseSynth:

; 32   : }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0NoiseSynth@synth@audio@@QEAA@XZ ENDP			; audio::synth::NoiseSynth::NoiseSynth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
i$ = 32
$T1 = 40
$T2 = 48
tv92 = 56
this$ = 80
?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA PROC	; `audio::synth::NoiseSynth::NoiseSynth'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0NoiseSynth@synth@audio@@QEAA@XZ@4HA ENDP	; `audio::synth::NoiseSynth::NoiseSynth'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z PROC	; audio::synth::SquareOscillator::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??1SquareOscillator@synth@audio@@UEAA@XZ ; audio::synth::SquareOscillator::~SquareOscillator
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN1@scalar
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX@Z				; operator delete
$LN1@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GSquareOscillator@synth@audio@@UEAAPEAXI@Z ENDP	; audio::synth::SquareOscillator::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1SquareOscillator@synth@audio@@UEAA@XZ PROC		; audio::synth::SquareOscillator::~SquareOscillator

; 19   : SquareOscillator::~SquareOscillator() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7SquareOscillator@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 20   :   delete [] table;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??3@YAXPEAX@Z				; operator delete

; 21   :   table = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+32], 0

; 22   : }

	mov	rcx, QWORD PTR this$[rsp]
	call	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1SquareOscillator@synth@audio@@UEAA@XZ ENDP		; audio::synth::SquareOscillator::~SquareOscillator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.cpp
_TEXT	SEGMENT
div2$ = 32
i$ = 36
$T1 = 40
$T2 = 48
tv92 = 56
this$ = 80
??0SquareOscillator@synth@audio@@QEAA@XZ PROC		; audio::synth::SquareOscillator::SquareOscillator

; 8    : SquareOscillator::SquareOscillator() : Wavetable() {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]
	mov	QWORD PTR $T2[rsp], -2
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ ; audio::synth::Wavetable<8,24>::Wavetable<8,24>
	npad	1
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7SquareOscillator@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 9    :   table = new real_t[kIndexRange+1];

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	inc	eax
	cdqe
	mov	QWORD PTR tv92[rsp], rax
	mov	eax, 4
	mov	rcx, QWORD PTR tv92[rsp]
	mul	rcx
	mov	rcx, -1
	cmovo	rax, rcx
	mov	rcx, rax
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rax+32], rcx

; 10   :   int div2 = kIndexRange >> 1;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+20]
	sar	eax, 1
	mov	DWORD PTR div2$[rsp], eax

; 11   :   int i;
; 12   :   for(i=0;i<div2;++i) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN3@SquareOsci
$LN2@SquareOsci:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN3@SquareOsci:
	mov	eax, DWORD PTR div2$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN1@SquareOsci

; 13   : 	  table[i]     =  1.0f;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax*4], xmm0

; 14   : 	  table[i+div2] = -1.0f;

	mov	eax, DWORD PTR div2$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rcx+rax*4], xmm0

; 15   :   }

	jmp	SHORT $LN2@SquareOsci
$LN1@SquareOsci:

; 16   :   table[kIndexRange] = 1.0f;

	mov	rax, QWORD PTR this$[rsp]
	movsxd	rax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax*4], xmm0

; 17   : }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0SquareOscillator@synth@audio@@QEAA@XZ ENDP		; audio::synth::SquareOscillator::SquareOscillator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
div2$ = 32
i$ = 36
$T1 = 40
$T2 = 48
tv92 = 56
this$ = 80
?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA PROC ; `audio::synth::SquareOscillator::SquareOscillator'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0SquareOscillator@synth@audio@@QEAA@XZ@4HA ENDP ; `audio::synth::SquareOscillator::SquareOscillator'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z PROC	; audio::synth::Wavetable<8,24>::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN1@scalar
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX@Z				; operator delete
$LN1@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_G?$Wavetable@$07$0BI@@synth@audio@@UEAAPEAXI@Z ENDP	; audio::synth::Wavetable<8,24>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z
_TEXT	SEGMENT
this$ = 16
frequency$ = 24
?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z PROC ; audio::synth::Wavetable<8,24>::get_increment, COMDAT

; 113  :   virtual uint32_t get_increment(real_t frequency) {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 114  :     return (uint32_t)((kIndexRange * frequency / sample_rate_) * kPrecisionRange);

	mov	rax, QWORD PTR this$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+20]
	mulss	xmm0, DWORD PTR frequency$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cvtsi2ss xmm1, rax
	divss	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	mulss	xmm0, DWORD PTR [rax+24]
	cvttss2si rax, xmm0

; 115  :   }

	pop	rdi
	ret	0
?get_increment@?$Wavetable@$07$0BI@@synth@audio@@UEAAIM@Z ENDP ; audio::synth::Wavetable<8,24>::get_increment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z
_TEXT	SEGMENT
i$ = 16
frac$ = 20
this$ = 48
inc$ = 56
?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z PROC	; audio::synth::Wavetable<8,24>::Tick, COMDAT

; 104  :   virtual real_t Tick(uint32_t inc) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 105  :     // the 8 MSB are the index in the table in the range 0-255 
; 106  :     int i = phase >> kPrecision; 

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	shr	eax, 24
	mov	DWORD PTR i$[rsp], eax

; 107  :     // and the kPrecision LSB are the fractionnal part
; 108  :     real_t frac = (phase & kPrecisionMask) * kPrecisionRangeInv;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	eax, DWORD PTR [rax+40]
	and	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	mulss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR frac$[rsp], xmm0

; 109  :     // increment the phase for the next tick
; 110  :     phase += inc; // the phase overflow itself

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax+40]
	add	eax, DWORD PTR inc$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+40], eax

; 111  :     return (table[i]*(1.0f-frac) + table[i+1]*frac); // linear interpolation

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR frac$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, DWORD PTR frac$[rsp]
	addss	xmm0, xmm1

; 112  :   }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?Tick@?$Wavetable@$07$0BI@@synth@audio@@UEAAMI@Z ENDP	; audio::synth::Wavetable<8,24>::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ PROC	; audio::synth::Wavetable<8,24>::~Wavetable<8,24>, COMDAT

; 100  :   virtual ~Wavetable() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7?$Wavetable@$07$0BI@@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx

; 101  : 
; 102  :   }

	mov	rcx, QWORD PTR this$[rsp]
	call	??1Component@synth@audio@@UEAA@XZ	; audio::synth::Component::~Component
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$Wavetable@$07$0BI@@synth@audio@@UEAA@XZ ENDP	; audio::synth::Wavetable<8,24>::~Wavetable<8,24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ PROC	; audio::synth::Wavetable<8,24>::Wavetable<8,24>, COMDAT

; 93   :     kPrecisionRangeInv(1.0f/(kPrecisionRange)){

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0Component@synth@audio@@QEAA@XZ	; audio::synth::Component::Component
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7?$Wavetable@$07$0BI@@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+16], 16777215		; 00ffffffH
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+20], 256			; 00000100H
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR __real@4b800000
	movss	DWORD PTR [rax+24], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+28], xmm0

; 94   :    //kPrecisionMask = ((1<<kPrecision)-1);
; 95   :    //kIndexRange = (1<<kIndex);
; 96   :    //kPrecisionRange = (real_t)(1<<kPrecision);
; 97   :       phase = 0;

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+40], 0

; 98   :   }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$Wavetable@$07$0BI@@synth@audio@@QEAA@XZ ENDP	; audio::synth::Wavetable<8,24>::Wavetable<8,24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GComponent@synth@audio@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GComponent@synth@audio@@UEAAPEAXI@Z PROC		; audio::synth::Component::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]
	mov	rcx, QWORD PTR this$[rsp]
	call	??1Component@synth@audio@@UEAA@XZ	; audio::synth::Component::~Component
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN1@scalar
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX@Z				; operator delete
$LN1@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_GComponent@synth@audio@@UEAAPEAXI@Z ENDP		; audio::synth::Component::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ??1Component@synth@audio@@UEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1Component@synth@audio@@UEAA@XZ PROC			; audio::synth::Component::~Component, COMDAT

; 72   :   virtual ~Component() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Component@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx
	pop	rdi
	ret	0
??1Component@synth@audio@@UEAA@XZ ENDP			; audio::synth::Component::~Component
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ??0Component@synth@audio@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0Component@synth@audio@@QEAA@XZ PROC			; audio::synth::Component::Component, COMDAT

; 71   :   Component() : sample_rate_(0),sample_time_ms_(0) {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7Component@synth@audio@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0Component@synth@audio@@QEAA@XZ ENDP			; audio::synth::Component::Component
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
_TEXT	SEGMENT
x$ = 32
?HardClip@synth@audio@@YAMM@Z PROC			; audio::synth::HardClip

; 50   : static real_t HardClip(real_t x) {

	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   :   if (x < -1.0f)

	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN4@HardClip

; 52   :     return -1.0f;

	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN5@HardClip
	jmp	SHORT $LN3@HardClip
$LN4@HardClip:

; 53   :   else if (x > 1.0f)

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN2@HardClip

; 54   :     return 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN5@HardClip

; 55   :   else

	jmp	SHORT $LN1@HardClip
$LN2@HardClip:

; 56   :     return x;

	movss	xmm0, DWORD PTR x$[rsp]
$LN1@HardClip:
$LN3@HardClip:
$LN5@HardClip:

; 57   : }

	add	rsp, 16
	pop	rdi
	ret	0
?HardClip@synth@audio@@YAMM@Z ENDP			; audio::synth::HardClip
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?Noise@synth@audio@@YAMPEAI@Z
_TEXT	SEGMENT
r1$ = 48
r2$ = 52
tv74 = 56
seed$ = 80
?Noise@synth@audio@@YAMPEAI@Z PROC			; audio::synth::Noise, COMDAT

; 40   : inline real_t Noise(uint32_t* seed) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 41   :   float r1 = (1+RandomFloat(seed))*0.5f;

	mov	rcx, QWORD PTR seed$[rsp]
	call	?RandomFloat@synth@audio@@YAMPEAI@Z	; audio::synth::RandomFloat
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR r1$[rsp], xmm0

; 42   :   float r2 = (1+RandomFloat(seed))*0.5f;

	mov	rcx, QWORD PTR seed$[rsp]
	call	?RandomFloat@synth@audio@@YAMPEAI@Z	; audio::synth::RandomFloat
	movss	xmm1, DWORD PTR __real@3f800000
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR r2$[rsp], xmm0

; 43   :   return (float) sqrtf( -2.0f * logf(r1)) * cosf( 2.0f * PI *r2);//white noise

	movss	xmm0, DWORD PTR r1$[rsp]
	call	QWORD PTR __imp_logf
	movss	xmm1, DWORD PTR __real@c0000000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_sqrtf
	movss	DWORD PTR tv74[rsp], xmm0
	movss	xmm1, DWORD PTR __real@40c90fdb
	mulss	xmm1, DWORD PTR r2$[rsp]
	movaps	xmm0, xmm1
	call	QWORD PTR __imp_cosf
	movss	xmm1, DWORD PTR tv74[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1

; 44   : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?Noise@synth@audio@@YAMPEAI@Z ENDP			; audio::synth::Noise
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?RandomFloat@synth@audio@@YAMPEAI@Z
_TEXT	SEGMENT
bits$ = 48
f$ = 52
seed$ = 80
?RandomFloat@synth@audio@@YAMPEAI@Z PROC		; audio::synth::RandomFloat, COMDAT

; 34   : inline real_t RandomFloat(uint32_t* seed) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 35   :   uint32_t bits = RandomInt(seed); // random 32-bit value

	mov	rcx, QWORD PTR seed$[rsp]
	call	?RandomInt@synth@audio@@YAIPEAI@Z	; audio::synth::RandomInt
	mov	DWORD PTR bits$[rsp], eax

; 36   :   real_t f = bits2float((bits >> 9) | 0x40000000); // random float in [2,4)

	mov	eax, DWORD PTR bits$[rsp]
	shr	eax, 9
	bts	eax, 30
	mov	ecx, eax
	call	?bits2float@synth@audio@@YAMI@Z		; audio::synth::bits2float
	movss	DWORD PTR f$[rsp], xmm0

; 37   :   return f - 3.0f; // uniform random float in [-1,1)

	movss	xmm0, DWORD PTR f$[rsp]
	subss	xmm0, DWORD PTR __real@40400000

; 38   : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?RandomFloat@synth@audio@@YAMPEAI@Z ENDP		; audio::synth::RandomFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?RandomInt@synth@audio@@YAIPEAI@Z
_TEXT	SEGMENT
seed$ = 16
?RandomInt@synth@audio@@YAIPEAI@Z PROC			; audio::synth::RandomInt, COMDAT

; 28   : inline uint32_t RandomInt(uint32_t* seed) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 29   :   *seed = *seed * 196314165 + 907633515;

	mov	rax, QWORD PTR seed$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, 196314165				; 0bb38435H
	add	eax, 907633515				; 3619636bH
	mov	rcx, QWORD PTR seed$[rsp]
	mov	DWORD PTR [rcx], eax

; 30   :   return *seed;

	mov	rax, QWORD PTR seed$[rsp]
	mov	eax, DWORD PTR [rax]

; 31   : }

	pop	rdi
	ret	0
?RandomInt@synth@audio@@YAIPEAI@Z ENDP			; audio::synth::RandomInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\personal\projects\gbemu\solution\code\audio\synth\quadrangular_wave.h
;	COMDAT ?bits2float@synth@audio@@YAMI@Z
_TEXT	SEGMENT
x$ = 52
u$ = 96
?bits2float@synth@audio@@YAMI@Z PROC			; audio::synth::bits2float, COMDAT

; 22   : inline real_t bits2float(uint32_t u) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+96]

; 23   :   UIntToFloatCast x;
; 24   :   x.in = u;

	mov	eax, DWORD PTR u$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 25   :   return x.out;

	movss	xmm0, DWORD PTR x$[rsp]

; 26   : }

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?bits2float@synth@audio@@YAMI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?bits2float@synth@audio@@YAMI@Z ENDP			; audio::synth::bits2float
_TEXT	ENDS
END

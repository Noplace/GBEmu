/*****************************************************************************************************************
* Copyright (c) 2013 Khalid Ali Al-Kooheji                                                                       *
*                                                                                                                *
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and              *
* associated documentation files (the "Software"), to deal in the Software without restriction, including        *
* without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell        *
* copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the       *
* following conditions:                                                                                          *
*                                                                                                                *
* The above copyright notice and this permission notice shall be included in all copies or substantial           *
* portions of the Software.                                                                                      *
*                                                                                                                *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT          *
* LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.          *
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, * DAMAGES OR OTHER LIABILITY,      *
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE            *
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                         *
*****************************************************************************************************************/
#include "gb.h"

namespace emulation {
namespace gb {

static const char* instruction_names[0x100] = 
{
  "NOP",
  "LDrd16<RegBC>",
  "LD$rr<RegBC,RegA>",
  "INC_16bit<RegBC>",
  "INC_8bit<RegB,0>",
  "DEC_8bit<RegB,0>",
  "LD<RegB,0,10>",
  "RLCA",
  "LDa16SP",
  "ADD_16bit<RegHL,RegBC>",
  "LDr$r<RegA,RegBC>",
  "DEC_16bit<RegBC>",
  "INC_8bit<RegC,0>",
  "DEC_8bit<RegC,0>",
  "LD<RegC,0,10>",
  "RRCA",

  "STOP",
  "LDrd16<RegDE>",
  "LD$rr<RegDE,RegA>",
  "INC_16bit<RegDE>",
  "INC_8bit<RegD,0>",
  "DEC_8bit<RegD,0>",
  "LD<RegD,0,10>",
  "RLA",
  "JR",
  "ADD_16bit<RegHL,RegDE>",
  "LDr$r<RegA,RegDE>",
  "DEC_16bit<RegDE>",
  "INC_8bit<RegE,0>",
  "DEC_8bit<RegE,0>",
  "LD<RegE,0,10>",
  "RRA",

  "JR_cc<CpuFlagsZ,1>",
  "LDrd16<RegHL>",
  "LDI$regreg<RegHL,RegA>",
  "INC_16bit<RegHL>",
  "INC_8bit<RegH,0>",
  "DEC_8bit<RegH,0>",
  "LD<RegH,0,10>",
  "DAA",
  "JR_cc<CpuFlagsZ,0>",
  "ADD_16bit<RegHL,RegHL>",
  "LDIreg$reg<RegA,RegHL>",
  "DEC_16bit<RegHL>",
  "INC_8bit<RegL,0>",
  "DEC_8bit<RegL,0>",
  "LD<RegL,0,10>",
  "CPL",

  "JR_cc<CpuFlagsC,1>",
  "LDrd16<RegSP>",
  "LDD$regreg<RegHL,RegA>",
  "INC_16bit<RegSP>",
  "INC_8bit<RegHL,1>",
  "DEC_8bit<RegHL,1>",
  "LD<RegHL,0,11>",
  "SCF",
  "JR_cc<CpuFlagsC,0>",
  "ADD_16bit<RegHL,RegSP>",
  "LDDreg$reg<RegA,RegHL>",
  "DEC_16bit<RegSP>",
  "INC_8bit<RegA,0>",
  "DEC_8bit<RegA,0>",
  "LD<RegA,0,10>",
  "CCF",

  "LDrr<RegB,RegB>",
  "LDrr<RegB,RegC>",
  "LDrr<RegB,RegD>",
  "LDrr<RegB,RegE>",
  "LDrr<RegB,RegH>",
  "LDrr<RegB,RegL>",
  "LDr$r<RegB,RegHL>",
  "LDrr<RegB,RegA>",
  "LDrr<RegC,RegB>",
  "LDrr<RegC,RegC>",
  "LDrr<RegC,RegD>",
  "LDrr<RegC,RegE>",
  "LDrr<RegC,RegH>",
  "LDrr<RegC,RegL>",
  "LDr$r<RegC,RegHL>",
  "LDrr<RegC,RegA>",

  "LDrr<RegD,RegB>",
  "LDrr<RegD,RegC>",
  "LDrr<RegD,RegD>",
  "LDrr<RegD,RegE>",
  "LDrr<RegD,RegH>",
  "LDrr<RegD,RegL>",
  "LDr$r<RegD,RegHL>",
  "LDrr<RegD,RegA>",
  "LDrr<RegE,RegB>",
  "LDrr<RegE,RegC>",
  "LDrr<RegE,RegD>",
  "LDrr<RegE,RegE>",
  "LDrr<RegE,RegH>",
  "LDrr<RegE,RegL>",
  "LDr$r<RegE,RegHL>",
  "LDrr<RegE,RegA>",

  "LDrr<RegH,RegB>",
  "LDrr<RegH,RegC>",
  "LDrr<RegH,RegD>",
  "LDrr<RegH,RegE>",
  "LDrr<RegH,RegH>",
  "LDrr<RegH,RegL>",
  "LDr$r<RegH,RegHL>",
  "LDrr<RegH,RegA>",
  "LDrr<RegL,RegB>",
  "LDrr<RegL,RegC>",
  "LDrr<RegL,RegD>",
  "LDrr<RegL,RegE>",
  "LDrr<RegL,RegH>",
  "LDrr<RegL,RegL>",
  "LDr$r<RegL,RegHL>",
  "LDrr<RegL,RegA>",

  "LD$rr<RegHL,RegB>",
  "LD$rr<RegHL,RegC>",
  "LD$rr<RegHL,RegD>",
  "LD$rr<RegHL,RegE>",
  "LD$rr<RegHL,RegH>",
  "LD$rr<RegHL,RegL>",
  "HALT",
  "LD$rr<RegHL,RegA>",
  "LDrr<RegA,RegB>",
  "LDrr<RegA,RegC>",
  "LDrr<RegA,RegD>",
  "LDrr<RegA,RegE>",
  "LDrr<RegA,RegH>",
  "LDrr<RegA,RegL>",
  "LDr$r<RegA,RegHL>",
  "LDrr<RegA,RegA>",

  "ADD<RegA,RegB,0>",
  "ADD<RegA,RegC,0>",
  "ADD<RegA,RegD,0>",
  "ADD<RegA,RegE,0>",
  "ADD<RegA,RegH,0>",
  "ADD<RegA,RegL,0>",
  "ADD<RegA,RegHL,1>",
  "ADD<RegA,RegA,0>",
  "ADC<RegA,RegB,0>",
  "ADC<RegA,RegC,0>",
  "ADC<RegA,RegD,0>",
  "ADC<RegA,RegE,0>",
  "ADC<RegA,RegH,0>",
  "ADC<RegA,RegL,0>",
  "ADC<RegA,RegHL,1>",
  "ADC<RegA,RegA,0>",

  "SUB<RegA,RegB,0>",
  "SUB<RegA,RegC,0>",
  "SUB<RegA,RegD,0>",
  "SUB<RegA,RegE,0>",
  "SUB<RegA,RegH,0>",
  "SUB<RegA,RegL,0>",
  "SUB<RegA,RegHL,1>",
  "SUB<RegA,RegA,0>",
  "SBC<RegA,RegB,0>",
  "SBC<RegA,RegC,0>",
  "SBC<RegA,RegD,0>",
  "SBC<RegA,RegE,0>",
  "SBC<RegA,RegH,0>",
  "SBC<RegA,RegL,0>",
  "SBC<RegA,RegHL,1>",
  "SBC<RegA,RegA,0>",

  "AND<RegA,RegB,0>",
  "AND<RegA,RegC,0>",
  "AND<RegA,RegD,0>",
  "AND<RegA,RegE,0>",
  "AND<RegA,RegH,0>",
  "AND<RegA,RegL,0>",
  "AND<RegA,RegHL,1>",
  "AND<RegA,RegA,0>",
  "XOR<RegA,RegB,0>",
  "XOR<RegA,RegC,0>",
  "XOR<RegA,RegD,0>",
  "XOR<RegA,RegE,0>",
  "XOR<RegA,RegH,0>",
  "XOR<RegA,RegL,0>",
  "XOR<RegA,RegHL,1>",
  "XOR<RegA,RegA,0>",

  "OR<RegA,RegB,0>",
  "OR<RegA,RegC,0>",
  "OR<RegA,RegD,0>",
  "OR<RegA,RegE,0>",
  "OR<RegA,RegH,0>",
  "OR<RegA,RegL,0>",
  "OR<RegA,RegHL,1>",
  "OR<RegA,RegA,0>",
  "CP_reg<RegB>",
  "CP_reg<RegC>",
  "CP_reg<RegD>",
  "CP_reg<RegE>",
  "CP_reg<RegH>",
  "CP_reg<RegL>",
  "CP_HL",
  "CP_reg<RegA>",

  "RET_cc<CpuFlagsZ,1>",
  "POP<RegBC>",
  "JP_cc<CpuFlagsZ,1>",
  "JP",
  "CALL_cc<CpuFlagsZ,1>",
  "PUSH<RegBC>",
  "ADD<RegA,0,2>",
  "RST",
  "RET_cc<CpuFlagsZ,0>",
  "RET",
  "JP_cc<CpuFlagsZ,0>",
  "PREFIX_CB",
  "CALL_cc<CpuFlagsZ,0>",
  "CALL",
  "ADC<RegA,0,2>",
  "RST",

  "RET_cc<CpuFlagsC,1>",
  "POP<RegDE>",
  "JP_cc<CpuFlagsC,1>",
  "ILLEGAL",
  "CALL_cc<CpuFlagsC,1>",
  "PUSH<RegDE>",
  "SUB<RegA,0,2>",
  "RST",
  "RET_cc<CpuFlagsC,0>",
  "RETI",
  "JP_cc<CpuFlagsC,0>",
  "ILLEGAL",
  "CALL_cc<CpuFlagsC,0>",
  "ILLEGAL",
  "SBC<RegA,0,2>",
  "RST",

  "LD<0,RegA,12>",
  "POP<RegHL>",
  "LD$FF00rr<RegC,RegA>",
  "ILLEGAL",
  "ILLEGAL",
  "PUSH<RegHL>",
  "AND<RegA,0,2>",
  "RST",
  "ADD_SPr8",
  "JP_HL",
  "LD<0,RegA,14>",
  "ILLEGAL",
  "ILLEGAL",
  "ILLEGAL",
  "XOR<RegA,0,2>",
  "RST",

  "LD<RegA,0,13>",
  "POP<RegAF>",
  "LDr$FF00r<RegA,RegC>",
  "DI",
  "ILLEGAL",
  "PUSH<RegAF>",
  "OR<RegA,0,2>",
  "RST",
  "LDHLSPr8",
  "LDSPHL",
  "LD<RegA,0,15>",
  "EI",
  "ILLEGAL",
  "ILLEGAL",
  "CP_d8",
  "RST",
};

void print_instruction(uint16_t pc, uint8_t opcode) {
  
  char line[256];
  sprintf_s(line, "0x%04x %s\n", pc, instruction_names[opcode]);
  //void OutputDebugString2(const char* str);
  OutputDebugString(line);
}



}
}